Общий План Реализации Системы Управления Событиями и Напоминаниями (Версия 2)

Цель: Создание распределенной системы для управления событиями с различными способами уведомлений, оптимизированной для личного локального использования, но с возможностью расширения.

Основные Компоненты (как и ранее, но с уточнениями):

Центральный Бэкенд / API

RabbitMQ (с плагином отложенных сообщений)

Сервис Уведомлений для Десктопа

Сервис Уведомлений для Telegram

Сервис Индексации / Синхронизации (Удаляем из MVP, PostgreSQL будет достаточно)

Пользовательские Интерфейсы (Десктопное UI, Telegram-бот UI)

1. Выбор Технологий (Предлагаемые, с изменениями)

Бэкенд (Центральный API):

Язык: Python

Фреймворк: FastAPI (идеально подходит для асинхронного локального API)

База данных: PostgreSQL (легко запускается через Docker, надежная, расширяемая, даже для локального использования лучше, чем SQLite, если вдруг понадобится удаленный доступ или более сложные запросы в будущем)

ORM: SQLAlchemy (для FastAPI)

Коммуникация с RabbitMQ: faststream

RabbitMQ: Выбор уже сделан, используем с rabbitmq_delayed_message_exchange.

Сервисы Уведомлений:

Язык: Python

Библиотека RabbitMQ: faststream (унифицированный подход)

Telegram API: python-telegram-bot (PTB) - как более простая отправная точка для MVP. Если появятся сложные UI-элементы (инлайн-кнопки, состояния), то aiogram будет более подходящим.

Десктопные уведомления: Десктопный клиент будет получать уведомления по WebSocket.

Пользовательские Интерфейсы:

Десктопное UI: Electron (React/Vue/Angular) – Да, Electron может вызывать нативные уведомления ОС на Windows, macOS и Linux. Это позволяет избежать C/C++.

Telegram-бот UI: Реализуется как часть Сервиса Telegram-уведомлений, использующего PTB.

2. Детализация Компонентов и Планирование Реализации (с изменениями)
2.1. Центральный Бэкенд / API

Ключевое изменение: Отсутствие авторизации.

Система будет работать для одного предопределенного пользователя. Все события будут принадлежать этому пользователю.

В базе данных будет одна запись в таблице User (или UserConfig), которая будет хранить идентификаторы для связи (Telegram chat_id, Desktop device_id).

API-эндпоинты не будут требовать токенов или логина. Доступ к ним будет "доверенный" (например, только с localhost или с использованием простого "секретного ключа" в заголовке, если это необходимо, но для локального проекта можно и без этого).

Функционал:

Управление Пользовательской Конфигурацией:

Одна запись в БД для "текущего пользователя".

Эндпоинты для обновления telegram_chat_id и desktop_device_id для этого пользователя. Это позволит системе знать, куда отправлять уведомления.

Управление Событиями (CRUD): Создание, чтение, обновление, удаление событий. Все операции автоматически ассоциируются с нашим единственным пользователем.

Расчет Напоминаний: При создании/обновлении события, на основе настроек пользователя (по умолчанию или конфигурируемых), генерируются точки напоминаний.

Публикация в RabbitMQ (faststream):

Для каждого рассчитанного напоминания: публикует сообщение в RabbitMQ с отложенной доставкой на соответствующую очередь (например, notification.desktop, notification.telegram). Сообщение содержит event_id, event_title, remind_at, notification_type, а также сохраненные telegram_chat_id или desktop_device_id из конфигурации пользователя.

Модель Данных (PostgreSQL):

UserConfig (или просто User с одной записью): id (всегда 1), telegram_chat_id (nullable, строка), desktop_device_id (nullable, строка/UUID).

Event: id, user_id (FK к UserConfig.id), title, description, start_time, end_time (nullable), location (nullable), created_at, updated_at, is_completed.

Reminder: id, event_id (FK), user_id (FK), remind_at (timestamp), notification_type (e.g., 'desktop', 'telegram'), is_sent (boolean).

API Эндпоинты (Пример, без авторизации):

GET /config (получить текущую конфигурацию пользователя)

PUT /config/telegram/{chat_id} (обновить telegram_chat_id для пользователя 1)

PUT /config/desktop/{device_id} (обновить desktop_device_id для пользователя 1)

POST /events (создать событие для пользователя 1)

GET /events

GET /events/{id}

PUT /events/{id}

DELETE /events/{id}

2.2. RabbitMQ

Настройка:

Установка RabbitMQ (например, через Docker).

Включение плагина rabbitmq_delayed_message_exchange.

Типы Сообщений (JSON-формат):

Для напоминаний:

Generated json
{
  "type": "reminder",
  "event_id": "...",
  "event_title": "...",
  "event_description": "...",
  "remind_at": "...",
  "target_type": "desktop", // или "telegram"
  "telegram_chat_id": "...", // Если target_type: telegram
  "desktop_device_id": "..." // Если target_type: desktop
}


Exchange / Queues:

delayed_reminders_exchange: Тип x-delayed-message. Все напоминания публикуются сюда с x-delay заголовком.

Маршрутизация по routing_key:

reminder.desktop -> q.notification.desktop

reminder.telegram -> q.notification.telegram

2.3. Сервис Десктоп-уведомлений

Функционал:

faststream Consumer: Слушает q.notification.desktop.

WebSocket Server: Открывает WebSocket-соединение для десктопных клиентов. Десктопное UI подключается к нему, передавая свой desktop_device_id.

Доставка уведомлений: Когда приходит сообщение из RabbitMQ, сервис находит соответствующее открытое WebSocket-соединение (по desktop_device_id) и отправляет уведомление через него. Если соединения нет, можно проигнорировать или залогировать.

Технологии: Python (FastAPI/Starlette с Uvicorn), faststream, websockets.

2.4. Сервис Telegram-уведомлений

Функционал:

Telegram Bot API (python-telegram-bot):

Команды: /start, /link (или /bind). /start позволит получить chat_id. /link (или /bind) может быть использована для подтверждения связи (например, бот просит пользователя отправить chat_id бэкенду напрямую через десктопный UI, или генерирует одноразовую ссылку/токен, который пользователь передает бэкенду через десктопный UI).

CRUD-команды (/create, /list, /edit) будут взаимодействовать с Центральным Бэкендом через его API.

faststream Consumer: Слушает q.notification.telegram.

Доставка уведомлений: Когда приходит сообщение из RabbitMQ, использует telegram_chat_id из payload для отправки сообщения через Telegram Bot API (bot.send_message).

Технологии: Python, python-telegram-bot, faststream, httpx (для взаимодействия с Центральным API).

2.5. Сервис Индексации / Синхронизации

Решение: Удаляем этот сервис из MVP.

Для локального проекта с одним пользователем и ограниченным объемом данных PostgreSQL будет более чем достаточен для всех операций чтения, включая базовый поиск по полям (например, LIKE %query% по заголовку).

Если в будущем возникнет потребность в сложном полнотекстовом поиске или агрегациях на больших объемах данных, тогда можно будет рассмотреть Elasticsearch, Redis (для кэширования определенных запросов) или другие специализированные решения. Но для MVP это излишне усложнение.

3. Пользовательские Интерфейсы
3.1. Десктопное UI

Функционал:

Начальная настройка: При первом запуске генерирует уникальный desktop_device_id (например, UUID) и отправляет его в Центральный Бэкенд на эндпоинт PUT /config/desktop/{device_id}.

CRUD Событий: Выполнение API-запросов к Центральному Бэкенду для управления событиями.

Подключение к WebSocket: Устанавливает WebSocket-соединение с Сервисом Десктоп-уведомлений, передавая desktop_device_id для идентификации.

Нативные Уведомления: Получив уведомление через WebSocket, использует встроенный в Electron API new Notification() для отображения всплывающих уведомлений ОС.

Технологии: Electron (JS/TS), React/Vue/Angular.

3.2. Telegram-бот UI

Функционал:

Реализуется в рамках Сервиса Telegram-уведомлений.

Прием команд от пользователей (например, /start, /events, /create).

Взаимодействие с Центральным Бэкендом для выполнения действий (создание/просмотр событий).

Отображение полученных уведомлений от Сервиса Telegram-уведомлений.

Механизм связывания аккаунта:

Пользователь начинает чат с ботом (/start). Бот запоминает chat_id.

Бот может дать команду /link и попросить пользователя ввести ее в Десктопном UI (в специальном поле). Десктопный UI отправит telegram_chat_id на Центральный Бэкенд, который свяжет его с единственным пользователем.

Или же, при получении /start от нового chat_id, бот сам отправляет этот chat_id на эндпоинт PUT /config/telegram/{chat_id} Центрального Бэкенда, устанавливая его как telegram_chat_id для нашего единственного пользователя. Это самый простой подход для одного пользователя.

4. Этапы Реализации (MVP) - Упрощено

Настройка Инфраструктуры:

Установка PostgreSQL, RabbitMQ (через Docker Compose).

Настройка плагина rabbitmq_delayed_message_exchange.

Центральный Бэкенд / API (MVP):

Модель данных (UserConfig, Event, Reminder). UserConfig инициализируется с одной записью (id=1) при запуске.

CRUD для событий (все для пользователя id=1).

Минимальная логика расчета напоминаний.

Эндпоинты для обновления telegram_chat_id и desktop_device_id в UserConfig.

Публикация напоминаний в delayed_reminders_exchange с помощью faststream.

Сервис Telegram-уведомлений (MVP):

Базовый Telegram-бот: start команда, которая сохраняет chat_id в Центральный Бэкенд.

faststream Consumer для q.notification.telegram.

Отправка тестовых уведомлений в Telegram.

Сервис Десктоп-уведомлений (MVP):

Базовый WebSocket Server.

faststream Consumer для q.notification.desktop.

Пересылка сообщений через WebSocket по desktop_device_id.

Десктопное UI (MVP):

При первом запуске/настройке отправка desktop_device_id в Центральный Бэкенд.

Просмотр/Создание событий.

Подключение к WebSocket-серверу уведомлений.

Отображение нативных уведомлений при получении через WebSocket.

5. Дополнительные Соображения

Deployment: Docker Compose идеален для локальной разработки и развертывания всех сервисов.