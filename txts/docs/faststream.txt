TITLE: Test FastStream Publisher with TestBroker
DESCRIPTION: Demonstrates how to patch a FastStream broker with a TestBroker to enable in-memory testing of publishers. This setup is ideal for CI/CD pipelines and local development, eliminating the need for external broker dependencies.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/publishing/test.md#_snippet_2

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/kafka/object_testing.py [ln:1-4,8-12] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/confluent/object_testing.py [ln:1-4,8-12] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/rabbit/object_testing.py [ln:1-4,8-12] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/nats/object_testing.py [ln:1-4,8-12] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/redis/object_testing.py [ln:1-4,8-12] !}
```

----------------------------------------

TITLE: Test FastStream FastAPI StreamRouter with TestClient
DESCRIPTION: This section illustrates how to effectively test your FastStream StreamRouter when integrated with FastAPI using the standard TestClient. It provides examples for different message brokers, demonstrating the setup required for unit testing your message processing logic.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/fastapi/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/kafka/test.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/confluent/test.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/rabbit/test.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/nats/test.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/redis/test.py !}
```

----------------------------------------

TITLE: Create FastStream Kafka Subscriber Function
DESCRIPTION: This snippet defines an asynchronous function `on_hello_world` decorated with `@broker.subscriber('hello_world')`. This function will be invoked when messages arrive on the 'hello_world' Kafka topic, with the message automatically parsed into a `HelloWorld` object and passed as an argument.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/Subscriber/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
@broker.subscriber("hello_world")
async def on_hello_world(msg: HelloWorld):
    print(msg)
```

----------------------------------------

TITLE: Complete FastStream Redis Basic Channel Subscription Application
DESCRIPTION: This complete FastStream application demonstrates how to subscribe to a single Redis channel named 'test' using Redis Pub/Sub. It sets up a RedisBroker and defines a message handler function to process incoming messages, logging the content.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/pubsub/subscription.md#_snippet_0

LANGUAGE: Python
CODE:
```
from faststream import FastStream
from faststream.redis import RedisBroker

broker = RedisBroker()

@broker.subscriber("test")
async def handle_message(msg: str):
    print(f"Received: {msg}")
```

----------------------------------------

TITLE: Complete FastStream Kafka RPC Emulation Example
DESCRIPTION: This comprehensive example combines the echo subscriber, reply consumer, and request sender into a single FastStream application. It demonstrates the full flow of sending an RPC request, handling the echo, consuming the reply, and asserting the received data, including a timeout mechanism for waiting on the response.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/howto/kafka/rpc.md#_snippet_3

LANGUAGE: python
CODE:
```
from asyncio import Future, wait_for
from typing import Annotated, Any
from uuid import uuid4

from faststream import FastStream, Context
from faststream.kafka import KafkaBroker, KafkaMessage

broker = KafkaBroker()
app = FastStream(broker)

@broker.subscriber("echo-topic")
async def echo_handler(msg: Any) -> Any:
    return msg

@broker.subscriber("responses")
async def response_handler(
    msg: KafkaMessage,
    responses: Annotated[
        dict[str, Future[bytes]],
        Context("responses", initial=dict),
    ],
) -> None:
    if (future := responses.pop(msg.correlation_id, None)):
        future.set_result(msg.body)

@app.after_startup
async def send_request(
    responses: Annotated[
        dict[str, Future[bytes]],
        Context("responses", initial=dict),
    ],
) -> None:
    correlation_id = str(uuid4())
    future = responses[correlation_id] = Future[bytes]()

    await broker.publish("echo", "echo-topic", reply_to="responses", correlation_id=correlation_id)

    try:
        data: bytes = await wait_for(future, timeout=10.0)
    except TimeoutError:
        responses.pop(correlation_id, None)
        raise

    assert data == b"echo"
```

----------------------------------------

TITLE: Execute FastStream Application via CLI
DESCRIPTION: Command to run a FastStream application using the installed CLI, specifying the application entry point (e.g., `serve:app`).
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/index.md#_snippet_6

LANGUAGE: shell
CODE:
```
faststream run serve:app
```

----------------------------------------

TITLE: FastStream Basic Message Handling with Redis
DESCRIPTION: Demonstrates a basic FastStream application using RedisBroker to handle incoming messages and publish responses. It defines an asynchronous function `handle_msg` that processes user data (string and integer) and returns a formatted string.
SOURCE: https://github.com/ag2ai/faststream/blob/main/README.md#_snippet_2

LANGUAGE: python
CODE:
```
# broker = RedisBroker("redis://localhost:6379/")

app = FastStream(broker)

@broker.subscriber("in")
@broker.publisher("out")
async def handle_msg(user: str, user_id: int) -> str:
    return f"User: {user_id} - {user} registered"
```

----------------------------------------

TITLE: Define FastStream Message Payloads with Pydantic Models
DESCRIPTION: This Python code demonstrates how to define message payloads using Pydantic models in a FastStream application. It shows how to annotate models with descriptions and examples, and how to use them as argument and return types in message handlers to automatically generate structured AsyncAPI documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asyncapi/custom.md#_snippet_5

LANGUAGE: python
CODE:
```
{! docs_src/getting_started/asyncapi/asyncapi_customization/payload_info.py !}
```

----------------------------------------

TITLE: Define FastStream Handlers for Tracing
DESCRIPTION: This Python code defines a series of asynchronous FastStream message handlers (`first_handler`, `second_handler`, `third_handler`) that are chained together using `@broker.subscriber` and `@broker.publisher` decorators. This setup demonstrates how messages flow through different services, forming a trace that can be visualized to understand inter-service communication and delays.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/opentelemetry/tracing.md#_snippet_0

LANGUAGE: python
CODE:
```
@broker.subscriber("first")
@broker.publisher("second")
async def first_handler(msg: str):
    await asyncio.sleep(0.1)
    return msg


@broker.subscriber("second")
@broker.publisher("third")
async def second_handler(msg: str):
    await asyncio.sleep(0.05)
    return msg


@broker.subscriber("third")
async def third_handler(msg: str):
    await asyncio.sleep(0.075)
```

----------------------------------------

TITLE: Configure OpenTelemetry TracerProvider in Python
DESCRIPTION: This Python code sets up the OpenTelemetry `TracerProvider` to collect and process traces. It configures a `Resource` with a service name, initializes an `OTLPSpanExporter` to send spans to `http://localhost:4317` (the default OTLP gRPC endpoint), and adds a `BatchSpanProcessor` to handle asynchronous span export. This setup ensures that traces generated by the application are sent to the OpenTelemetry Collector.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/opentelemetry/sentry.md#_snippet_1

LANGUAGE: python
CODE:
```
from opentelemetry import trace
from opentelemetry.sdk.resources import Resource
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter
from opentelemetry.sdk.trace.export import BatchSpanProcessor

resource = Resource.create(attributes={"service.name": "faststream"})
tracer_provider = TracerProvider(resource=resource)
trace.set_tracer_provider(tracer_provider)
exporter = OTLPSpanExporter(endpoint="http://localhost:4317")
processor = BatchSpanProcessor(exporter)
tracer_provider.add_span_processor(processor)
```

----------------------------------------

TITLE: Define Redis Stream Consumer Function
DESCRIPTION: This snippet defines an asynchronous function `handle` decorated with `@broker.subscriber("test-stream")`. This function automatically receives and processes messages from the specified Redis stream, with message parsing based on the `msg` argument's type hint.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/streams/subscription.md#_snippet_3

LANGUAGE: Python
CODE:
```
@broker.subscriber("test-stream")
async def handle(msg: str):
    print(f"Received message: {msg}")
```

----------------------------------------

TITLE: Subscribe to Message Streams Asynchronously with FastStream
DESCRIPTION: This snippet demonstrates how to subscribe to message streams using FastStream with various message brokers (AIOKafka, Confluent, RabbitMQ, NATS, Redis). It shows the basic syntax for defining an asynchronous message handler using the `@broker.subscriber` decorator, abstracting away broker-specific details like topics or queues.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
from faststream.kafka import KafkaBroker

broker = KafkaBroker()

@broker.subscriber("test")  # topic name
async def handle_msg(msg_body):
    ...
```

LANGUAGE: Python
CODE:
```
from faststream.confluent import KafkaBroker

broker = KafkaBroker()

@broker.subscriber("test")  # topic name
async def handle_msg(msg_body):
    ...
```

LANGUAGE: Python
CODE:
```
from faststream.rabbit import RabbitBroker

broker = RabbitBroker()

@broker.subscriber("test")  # queue name
async def handle_msg(msg_body):
    ...
```

LANGUAGE: Python
CODE:
```
from faststream.nats import NatsBroker

broker = NatsBroker()

@broker.subscriber("test")  # subject name
async def handle_msg(msg_body):
    ...
```

LANGUAGE: Python
CODE:
```
from faststream.redis import RedisBroker

broker = RedisBroker()

@broker.subscriber("test")  # channel name
async def handle_msg(msg_body):
    ...
```

----------------------------------------

TITLE: Publishing Messages with Publisher Decorator across Brokers
DESCRIPTION: This collection of snippets demonstrates the usage of the `@broker.publisher` decorator within FastStream for various messaging brokers, including AIOKafka, Confluent Kafka, RabbitMQ, NATS, and Redis. The decorator is applied to a function that is already a subscriber, defining an output channel for the function's return value. A key feature is its automatic propagation of the `correlation_id` from the incoming message to the published message, which is essential for end-to-end tracing in distributed systems.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/publishing/decorator.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.kafka import KafkaBroker

broker = KafkaBroker("localhost:9092")
app = FastStream()

@app.on_startup
async def startup():
    await broker.start()

@app.on_shutdown
async def shutdown():
    await broker.close()

@broker.subscriber("input_topic")
@broker.publisher("output_topic")
async def handle_message(msg: str) -> str:
    print(f"Received: {msg}")
    return f"Processed: {msg}"
```

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.confluent import KafkaBroker as ConfluentKafkaBroker

broker = ConfluentKafkaBroker("localhost:9092")
app = FastStream()

@app.on_startup
async def startup():
    await broker.start()

@app.on_shutdown
async def shutdown():
    await broker.close()

@broker.subscriber("input_topic")
@broker.publisher("output_topic")
async def handle_message(msg: str) -> str:
    print(f"Received: {msg}")
    return f"Processed: {msg}"
```

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.rabbit import RabbitBroker

broker = RabbitBroker("amqp://guest:guest@localhost:5672/")
app = FastStream()

@app.on_startup
async def startup():
    await broker.start()

@app.on_shutdown
async def shutdown():
    await broker.close()

@broker.subscriber("input_queue")
@broker.publisher("output_exchange")
async def handle_message(msg: str) -> str:
    print(f"Received: {msg}")
    return f"Processed: {msg}"
```

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.nats import NatsBroker

broker = NatsBroker("nats://localhost:4222")
app = FastStream()

@app.on_startup
async def startup():
    await broker.start()

@app.on_shutdown
async def shutdown():
    await broker.close()

@broker.subscriber("input_subject")
@broker.publisher("output_subject")
async def handle_message(msg: str) -> str:
    print(f"Received: {msg}")
    return f"Processed: {msg}"
```

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.redis import RedisBroker

broker = RedisBroker("redis://localhost:6379")
app = FastStream()

@app.on_startup
async def startup():
    await broker.start()

@app.on_shutdown
async def shutdown():
    await broker.close()

@broker.subscriber("input_channel")
@broker.publisher("output_channel")
async def handle_message(msg: str) -> str:
    print(f"Received: {msg}")
    return f"Processed: {msg}"
```

----------------------------------------

TITLE: Configure OpenTelemetry TracerProvider in Python
DESCRIPTION: This Python snippet demonstrates how to configure the OpenTelemetry `TracerProvider`. It initializes a `Resource` with a service name and then sets up a `TracerProvider` using this resource. Finally, it registers the configured provider globally, which is a prerequisite for enabling distributed tracing in an application.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/opentelemetry/tracing.md#_snippet_2

LANGUAGE: python
CODE:
```
from opentelemetry import trace
from opentelemetry.sdk.resources import Resource
from opentelemetry.sdk.trace import TracerProvider

resource = Resource.create(attributes={"service.name": "faststream"})
tracer_provider = TracerProvider(resource=resource)
trace.set_tracer_provider(tracer_provider)
```

----------------------------------------

TITLE: Publishing Messages with FastStream Brokers
DESCRIPTION: Demonstrates how to publish a message using different FastStream broker implementations. It shows connecting to the broker as an async context manager and then calling the `publish` method with a message and a routing key (topic, queue, subject, or channel).
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/publishing/index.md#_snippet_0

LANGUAGE: python
CODE:
```
async with KafkaBroker() as br:
    await br.publish("message", "topic")
```

LANGUAGE: python
CODE:
```
async with KafkaBroker() as br:
    await br.publish("message", "topic")
```

LANGUAGE: python
CODE:
```
async with RabbitBroker() as br:
    await br.publish("message", "queue")
```

LANGUAGE: python
CODE:
```
async with NatsBroker() as br:
    await br.publish("message", "subject")
```

LANGUAGE: python
CODE:
```
async with RedisBroker() as br:
    await br.publish("message", "channel")
```

----------------------------------------

TITLE: Configure FastStream with Prometheus Middleware and ASGI Metrics Endpoint
DESCRIPTION: This Python code demonstrates how to integrate Prometheus metrics into a FastStream application. It uses `NatsPrometheusMiddleware` to collect metrics from a NATS broker and exposes a `/metrics` endpoint using `AsgiFastStream` and `prometheus_client.make_asgi_app` for Prometheus to scrape.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_4

LANGUAGE: python
CODE:
```
from prometheus_client import CollectorRegistry, make_asgi_app
from faststream.asgi import AsgiFastStream
from faststream.nats import NatsBroker
from faststream.nats.prometheus import NatsPrometheusMiddleware

registry = CollectorRegistry()

broker = NatsBroker(
    middlewares=(
        NatsPrometheusMiddleware(registry=registry),
    )
)

app = AsgiFastStream(
    broker,
    asgi_routes=[
        ("/metrics", make_asgi_app(registry)),
    ]
)
```

----------------------------------------

TITLE: FastStream Application with Liveness and Readiness Probes
DESCRIPTION: This Python script demonstrates how to set up liveness and readiness health checks for a FastStream application. The liveness probe is a simple HTTP 204 response, while the readiness probe verifies active connections to Redis, RabbitMQ, and PostgreSQL databases before the application accepts traffic.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/healthcheks.md#_snippet_0

LANGUAGE: Python
CODE:
```
import asyncio
import logging
from typing import Awaitable, Callable, Any

import asyncpg
import redis.asyncio as redis
import uvicorn
from faststream import FastStream
from faststream.asgi import AsgiResponse, get
from faststream.rabbit import RabbitBroker


@get
async def liveness(scope: dict[str, Any]) -> AsgiResponse:
    return AsgiResponse(b"", status_code=204)


def readiness(
    broker: RabbitBroker,
    redis_connection: redis.Redis,
    postgres_connection: asyncpg.Pool,
) -> Callable[[dict[str, Any]], Awaitable[AsgiResponse]]:
    healthy_response = AsgiResponse(b"", 204)
    unhealthy_response = AsgiResponse(b"", 500)

    @get
    async def func(scope: dict[str, Any]) -> AsgiResponse:
        try:
            await redis_connection.ping()
        except (redis.ConnectionError, Exception):
            logging.exception("Redis not ready")
            return unhealthy_response

        try:
            await broker.ping(timeout=5.0)
        except Exception:
            logging.exception("RabbitMQ not ready")
            return unhealthy_response

        try:
            await postgres_connection.fetchval("SELECT 1")
        except (asyncpg.exceptions.PostgresConnectionError, Exception):
            logging.exception("Postgres not ready")
            return unhealthy_response

        return healthy_response

    return func


async def main() -> None:
    redis_connection = redis.Redis(host="redis", port=6379)

    postgres_connection = await asyncpg.create_pool(
        "postgresql://user:password@postgres/postgres"
    )

    broker = RabbitBroker("amqp://guest:guest@rabbitmq:5672/")
    app = FastStream(broker)

    asgi_routes = [
        ("/internal/alive", liveness),
        ("/internal/ready", readiness(broker, redis_connection, postgres_connection)),
    ]

    uvicorn_config = uvicorn.Config(
        app.as_asgi(asgi_routes),
        host="0.0.0.0",
        port=8000,
    )
    server = uvicorn.Server(uvicorn_config)
    await server.serve()


if __name__ == "__main__":
    asyncio.run(main())
```

----------------------------------------

TITLE: FastStream KafkaBroker Lifespan Management with Starlette
DESCRIPTION: Demonstrates how to integrate a FastStream KafkaBroker's lifecycle (start and close) into a Starlette application's lifespan context manager, ensuring proper resource management for event streaming applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/django/index.md#_snippet_7

LANGUAGE: python
CODE:
```
from contextlib import asynccontextmanager
from faststream.kafka import KafkaBroker

broker = KafkaBroker()

@asynccontextmanager
async def broker_lifespan(app):
    await broker.start()
    try:
        yield
    finally:
        await broker.close()

application = Starlette(
    ...,
    lifespan=broker_lifespan,
)
```

----------------------------------------

TITLE: FastStream Default Message Body Serialization with Pydantic
DESCRIPTION: Demonstrates how FastStream automatically serializes incoming message bodies using Pydantic based on function type annotations. This example shows a basic subscriber function expecting a string message body, where Pydantic handles the type casting.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/index.md#_snippet_2

LANGUAGE: python
CODE:
```
@broker.subscriber("test")
async def handle_str(
    msg_body: str,
):
    ...
```

----------------------------------------

TITLE: FastStream Per-Argument JSON Message Unpacking Across Brokers
DESCRIPTION: This snippet showcases FastStream's advanced capability to unpack an incoming JSON message into multiple distinct function arguments, each with its own type annotation. This method provides granular serialization and validation for complex JSON structures, leveraging Pydantic's features. The example is applicable across various message brokers like AIOKafka, Confluent, RabbitMQ, NATS, and Redis.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/annotation.md#_snippet_2

LANGUAGE: AIOKafka
CODE:
```
@broker.subscriber("test")
async def handle(
    name: str,
    user_id: int,
):
    print(f"Name: {name}, User ID: {user_id}")
```

LANGUAGE: Confluent
CODE:
```
@broker.subscriber("test")
async def handle(
    name: str,
    user_id: int,
):
    print(f"Name: {name}, User ID: {user_id}")
```

LANGUAGE: RabbitMQ
CODE:
```
@broker.subscriber("test")
async def handle(
    name: str,
    user_id: int,
):
    print(f"Name: {name}, User ID: {user_id}")
```

LANGUAGE: NATS
CODE:
```
@broker.subscriber("test")
async def handle(
    name: str,
    user_id: int,
):
    print(f"Name: {name}, User ID: {user_id}")
```

LANGUAGE: Redis
CODE:
```
@broker.subscriber("test")
async def handle(
    name: str,
    user_id: int,
):
    print(f"Name: {name}, User ID: {user_id}")
```

----------------------------------------

TITLE: Connect to Kafka and Process Messages with FastStream Confluent
DESCRIPTION: This Python example demonstrates how to establish a connection to Kafka using FastStream's KafkaBroker module. It initializes a broker, defines an asynchronous message handler decorated with subscriber and publisher decorators to consume from 'in-topic' and produce to 'out-topic', automatically parsing incoming messages into specified types and returning a response.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_46

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.confluent import KafkaBroker

broker = KafkaBroker("localhost:9092")
app = FastStream(broker)

@broker.subscriber("in-topic")
@broker.publisher("out-topic")
async def handle_msg(user: str, user_id: int) -> str:
    return f"User: {user_id} - {user} registered"
```

----------------------------------------

TITLE: Define Pydantic Message Structure for Kafka Consumption
DESCRIPTION: Illustrates how to define a Pydantic `BaseModel` to represent the structure of messages consumed from a Kafka topic. This ensures type-safe parsing and validation of incoming data, here exemplified by a `HelloWorld` message.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/confluent/Subscriber/index.md#_snippet_2

LANGUAGE: python
CODE:
```
class HelloWorld(BaseModel):
    name: str
    message: str
```

----------------------------------------

TITLE: Integrate ASGI Applications with FastStream Broker
DESCRIPTION: This Python snippet shows how to use `AsgiFastStream` to integrate ASGI applications, such as health probes (`make_ping_asgi`) and Prometheus metrics (`make_asgi_app`), directly within the FastStream broker runtime. This allows serving documentation, HTTP probes, and metrics without external dependencies.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_9

LANGUAGE: python
CODE:
```
from faststream.nats import NatsBroker
from faststream.asgi import AsgiFastStream, make_ping_asgi

from prometheus_client import make_asgi_app
from prometheus_client.registry import CollectorRegistry

broker = NatsBroker()

prometheus_registry = CollectorRegistry()

app = AsgiFastStream(
    broker,
    asyncapi_path="/docs",
    asgi_routes=[
        ("/health", make_ping_asgi(broker, timeout=5.0)),
        ("/metrics", make_asgi_app(registry=prometheus_registry))
    ]
)
```

----------------------------------------

TITLE: Extend Nats Jetstream Message Processing with In-Progress Sender
DESCRIPTION: This example shows how to use an `in_progress_task` to periodically send `in_progress()` signals to a Nats message, ensuring that Nats Jetstream does not re-deliver the message while a long-running handler is still processing it. It utilizes `FastStream` with `NatsBroker` and `NatsMessage` dependencies.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/howto/nats/in-progress.md#_snippet_0

LANGUAGE: python
CODE:
```
import asyncio

from faststream import Depends, FastStream
from faststream.nats import NatsBroker, NatsMessage

broker = NatsBroker()
app = FastStream(broker)

async def progress_sender(message: NatsMessage):
    async def in_progress_task():
        while True:
            await asyncio.sleep(10.0)
            await message.in_progress()

    task = asyncio.create_task(in_progress_task())
    yield
    task.cancel()

@broker.subscriber("test", dependencies=[Depends(progress_sender)])
async def handler():
    await asyncio.sleep(20.0)
```

----------------------------------------

TITLE: Full FastStream NATS Dynamic Configuration Example
DESCRIPTION: A comprehensive example showcasing dynamic configuration with NATS Key-Value storage in FastStream. It includes a `KvWatch` subscriber to update global context, a consumer that uses the context value, and `on_startup`/`after_startup` hooks to initialize the Key-Value store and trigger an event.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/howto/nats/dynaconf.md#_snippet_2

LANGUAGE: python
CODE:
```
from uuid import uuid4

from faststream import FastStream, Context
from faststream.nats import NatsMessage, NatsBroker, KvWatch

broker = NatsBroker()
app = FastStream(broker)

@broker.subscriber("create_sell", kv_watch=KvWatch("order_service"))
async def watch_kv_order_service(new_value: bool):
    app.context.set_global("create_sell", new_value)

@broker.subscriber("order_service.order.filled.buy")
async def handle_filled_buy(
    message: NatsMessage,
    create_sell: bool = Context("create_sell"),
):
    if create_sell:
        await broker.publish(b"", "order_service.order.create.sell")

@broker.subscriber("order_service.order.create.sell")
async def handle_create_sell(message: NatsMessage): ...

@app.on_startup
async def on_startup():
    await broker.connect()

    order_service_kv = await broker.key_value("order_service")

    initial_create_sell_value = b"1"
    await order_service_kv.put("create_sell", initial_create_sell_value)
    app.context.set_global("create_sell", bool(initial_create_sell_value))

@app.after_startup
async def after_startup():
    await broker.publish({"order_id": str(uuid4())}, "order_service.order.filled.buy")
```

----------------------------------------

TITLE: Implementing Nested Dependencies in FastStream
DESCRIPTION: Demonstrates how dependencies can be nested, where one dependency function relies on another. This pattern is consistently applied across different FastStream brokers like AIOKafka, Confluent, RabbitMQ, NATS, and Redis.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/dependencies/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
from faststream import Depends, apply_types

def inner_dependency(value: int) -> int:
    return value * 2

def outer_dependency(val: int = Depends(inner_dependency)) -> int:
    return val + 1

@apply_types
def main_function(data: int, result: int = Depends(outer_dependency)):
    return data + result
```

----------------------------------------

TITLE: FastStream Kafka Basic Consumer Application
DESCRIPTION: This complete example demonstrates a FastStream application configured to consume 'HelloWorld' messages from a 'hello_world' Kafka topic. It showcases the integration of `FastStream`, `KafkaBroker`, Pydantic models for message parsing, and a subscriber function.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/confluent/Subscriber/index.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.kafka import KafkaBroker
from pydantic import BaseModel

class HelloWorld(BaseModel):
    name: str
    message: str

broker = KafkaBroker("localhost:9092")
app = FastStream(broker)

@broker.subscriber("hello_world")
async def on_hello_world(msg: HelloWorld):
    print(f"Received message: {msg.name} - {msg.message}")
```

----------------------------------------

TITLE: Initialize FastStream Application with a Message Broker
DESCRIPTION: This Python example shows the initial setup for a FastStream application, demonstrating how to import `FastStream` and a specific broker (e.g., `KafkaBroker`). It illustrates how to instantiate a broker object, connecting to a local message queue. The commented-out lines provide examples for other supported brokers like RabbitMQ, NATS, and Redis, highlighting FastStream's multi-broker compatibility.
SOURCE: https://github.com/ag2ai/faststream/blob/main/README.md#_snippet_1

LANGUAGE: Python
CODE:
```
from faststream import FastStream
from faststream.kafka import KafkaBroker
# from faststream.rabbit import RabbitBroker
# from faststream.nats import NatsBroker
# from faststream.redis import RedisBroker

broker = KafkaBroker("localhost:9092")
# broker = RabbitBroker("amqp://guest:guest@localhost:5672/")
# broker = NatsBroker("nats://localhost:4222/")
```

----------------------------------------

TITLE: Integrating FastStream KafkaRouter as a FastAPI Plugin
DESCRIPTION: This example illustrates how to integrate FastStream directly into a FastAPI application using a StreamRouter. It demonstrates declaring message handlers with `@router.subscriber` and `@router.publisher` decorators, and including the router within the main FastAPI application to enable seamless message processing alongside HTTP endpoints.
SOURCE: https://github.com/ag2ai/faststream/blob/main/README.md#_snippet_12

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

from faststream.kafka.fastapi import KafkaRouter

router = KafkaRouter("localhost:9092")

class Incoming(BaseModel):
    m: dict

@router.subscriber("test")
@router.publisher("response")
async def hello(m: Incoming):
    return {"response": "Hello, world!"}

app = FastAPI()
app.include_router(router)
```

----------------------------------------

TITLE: Implement Basic Dependency Injection with FastStream Depends
DESCRIPTION: This example illustrates the fundamental steps for implementing dependency injection in FastStream using the `Depends` class. It shows how to declare a callable dependency, inject it into an event handler using `Depends`, and then utilize its result. This pattern is consistent across various FastStream brokers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/dependencies/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from faststream.kafka import KafkaBroker
from faststream import Depends

broker = KafkaBroker("localhost:9092")

async def get_user_id() -> int:
    return 123

@broker.subscriber("test-topic")
async def handle_message(
    message: str,
    user_id: int = Depends(get_user_id)
):
    print(f"Received message: {message} for user: {user_id}")
```

LANGUAGE: Python
CODE:
```
from faststream.confluent import KafkaBroker
from faststream import Depends

broker = KafkaBroker("localhost:9092")

async def get_user_id() -> int:
    return 123

@broker.subscriber("test-topic")
async def handle_message(
    message: str,
    user_id: int = Depends(get_user_id)
):
    print(f"Received message: {message} for user: {user_id}")
```

LANGUAGE: Python
CODE:
```
from faststream.rabbit import RabbitBroker
from faststream import Depends

broker = RabbitBroker("amqp://guest:guest@localhost:5672/")

async def get_user_id() -> int:
    return 123

@broker.subscriber("test-topic")
async def handle_message(
    message: str,
    user_id: int = Depends(get_user_id)
):
    print(f"Received message: {message} for user: {user_id}")
```

LANGUAGE: Python
CODE:
```
from faststream.nats import NatsBroker
from faststream import Depends

broker = NatsBroker("nats://localhost:4222")

async def get_user_id() -> int:
    return 123

@broker.subscriber("test-topic")
async def handle_message(
    message: str,
    user_id: int = Depends(get_user_id)
):
    print(f"Received message: {message} for user: {user_id}")
```

LANGUAGE: Python
CODE:
```
from faststream.redis import RedisBroker
from faststream import Depends

broker = RedisBroker("redis://localhost:6379")

async def get_user_id() -> int:
    return 123

@broker.subscriber("test-topic")
async def handle_message(
    message: str,
    user_id: int = Depends(get_user_id)
):
    print(f"Received message: {message} for user: {user_id}")
```

----------------------------------------

TITLE: FastStream Basic Message Serialization with Primitive Types
DESCRIPTION: This snippet demonstrates FastStream's automatic message serialization for basic Python primitive types such as `str`, `bytes`, and `int`. By annotating the message parameter in a broker subscriber, FastStream uses Pydantic to validate and convert incoming messages to the specified type. If serialization fails, a `pydantic.ValidationError` is raised.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/annotation.md#_snippet_0

LANGUAGE: Python
CODE:
```
@broker.subscriber("test")
async def handle(
    msg: str,
):
    ...

@broker.subscriber("test")
async def handle(
    msg: bytes,
):
    ...

@broker.subscriber("test")
async def handle(
    msg: int,
):
    ...
```

----------------------------------------

TITLE: Run FastStream ASGI Application with Uvicorn
DESCRIPTION: Shows how to run the initialized `AsgiFastStream` application using the `uvicorn` ASGI server.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asgi.md#_snippet_1

LANGUAGE: shell
CODE:
```
uvicorn main:app
```

----------------------------------------

TITLE: Generate a new FastStream project using cookiecutter
DESCRIPTION: This command uses `cookiecutter` with the `cookiecutter-faststream` template to generate a new FastStream project. Users will be prompted to fill in project details during this process.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/template/index.md#_snippet_1

LANGUAGE: bash
CODE:
```
cookiecutter https://github.com/ag2ai/cookiecutter-faststream.git
```

----------------------------------------

TITLE: Subscribe to Message Streams Synchronously with FastStream
DESCRIPTION: This snippet illustrates how to subscribe to message streams using FastStream with synchronous functions. It provides examples for different message brokers (AIOKafka, Confluent, RabbitMQ, NATS, Redis), showing that FastStream automatically runs synchronous handlers in a ThreadPool using `anyio.to_thread.run_sync()` to prevent blocking the event loop.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from faststream.kafka import KafkaBroker

broker = KafkaBroker()

@broker.subscriber("test")  # topic name
def handle_msg(msg_body):
    ...
```

LANGUAGE: Python
CODE:
```
from faststream.confluent import KafkaBroker

broker = KafkaBroker()

@broker.subscriber("test")  # topic name
def handle_msg(msg_body):
    ...
```

LANGUAGE: Python
CODE:
```
from faststream.rabbit import RabbitBroker

broker = RabbitBroker()

@broker.subscriber("test")  # queue name
def handle_msg(msg_body):
    ...
```

LANGUAGE: Python
CODE:
```
from faststream.nats import NatsBroker

broker = NatsBroker()

@broker.subscriber("test")  # subject name
def handle_msg(msg_body):
    ...
```

LANGUAGE: Python
CODE:
```
from faststream.redis import RedisBroker

broker = RedisBroker()

@broker.subscriber("test")  # channel name
def handle_msg(msg_body):
    ...
```

----------------------------------------

TITLE: FastStream Dependency Management with FastDepends
DESCRIPTION: Demonstrates FastStream's dependency injection system, powered by FastDepends, which is similar to `pytest fixtures` and `FastAPI Depends`. It shows how function arguments declare required dependencies, which are then delivered from a global Context object using the `Depends` decorator.
SOURCE: https://github.com/ag2ai/faststream/blob/main/README.md#_snippet_10

LANGUAGE: python
CODE:
```
from faststream import Depends, Logger

async def base_dep(user_id: int) -> bool:
    return True

@broker.subscriber("in-test")
async def base_handler(user: str,
                       logger: Logger,
                       dep: bool = Depends(base_dep)):
    assert dep is True
    logger.info(user)
```

----------------------------------------

TITLE: Implementing Basic FastStream Consumers and Producers
DESCRIPTION: This section demonstrates how to create a basic FastStream application that consumes data from an incoming stream and publishes it to another. It highlights the use of `@broker.subscriber` and `@broker.publisher` decorators for delegating data consumption/production and JSON encoding/decoding, allowing focus on core business logic.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/faststream.md#_snippet_1

LANGUAGE: AIOKafka
CODE:
```
{!> docs_src/index/kafka/basic.py!}
```

LANGUAGE: Confluent
CODE:
```
{!> docs_src/index/confluent/basic.py!}
```

LANGUAGE: RabbitMQ
CODE:
```
{!> docs_src/index/rabbit/basic.py!}
```

LANGUAGE: NATS
CODE:
```
{!> docs_src/index/nats/basic.py!}
```

LANGUAGE: Redis
CODE:
```
{!> docs_src/index/redis/basic.py!}
```

----------------------------------------

TITLE: FastStream Dynamic Subscriber Registration at Runtime
DESCRIPTION: This example demonstrates how new subscribers can be registered and managed dynamically at runtime, even after the broker has already started. It covers the steps to create, set up, start, and close a dynamically registered subscriber.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_35

LANGUAGE: python
CODE:
```
subscriber = broker.subscriber("dynamic")
subscriber(handler_method)
...
broker.setup_subscriber(subscriber)
await subscriber.start()
...
await subscriber.close()
```

----------------------------------------

TITLE: FastStream Kafka Message Handling with Pydantic Models
DESCRIPTION: Illustrates how to define message schemas using Pydantic's BaseModel for structured data validation and handling with FastStream and KafkaBroker. The `User` model ensures type safety for incoming messages, which are then processed by the `handle_msg` function.
SOURCE: https://github.com/ag2ai/faststream/blob/main/README.md#_snippet_3

LANGUAGE: python
CODE:
```
from pydantic import BaseModel, Field, PositiveInt
from faststream import FastStream
from faststream.kafka import KafkaBroker

broker = KafkaBroker("localhost:9092")
app = FastStream(broker)

class User(BaseModel):
    user: str = Field(..., examples=["John"])
    user_id: PositiveInt = Field(..., examples=["1"])

@broker.subscriber("in")
@broker.publisher("out")
async def handle_msg(data: User) -> str:
    return f"User: {data.user} - {data.user_id} registered"
```

----------------------------------------

TITLE: Manually Acknowledge RabbitMQ Messages in FastStream
DESCRIPTION: FastStream allows manual acknowledgement of messages by providing direct access to the message object via the Context. You can call `ack()`, `nack()`, or `reject()` methods on the `RabbitMessage` object to control the message lifecycle explicitly. FastStream will detect manual acknowledgement and skip its automatic handling.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/ack.md#_snippet_3

LANGUAGE: Python
CODE:
```
from faststream.rabbit.annotations import RabbitMessage

@broker.subscriber("test")
async def base_handler(body: str, msg: RabbitMessage):
    await msg.ack()
    # or
    await msg.nack()
    # or
    await msg.reject()
```

----------------------------------------

TITLE: Kubernetes Deployment with Liveness and Readiness Probes
DESCRIPTION: This YAML configuration defines a Kubernetes Deployment for a dummy application, showcasing how to integrate liveness and readiness probes. The liveness probe checks the '/internal/alive' endpoint to determine if the container should be restarted, while the readiness probe checks '/internal/ready' to control whether the pod receives traffic, ensuring the application is fully operational before accepting requests.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/healthcheks.md#_snippet_3

LANGUAGE: YAML
CODE:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dummy-app
  labels:
    app: dummy-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dummy-app
  template:
    metadata:
      labels:
        app: dummy-app
    spec:
      containers:
        - name: dummy-app
          image: "dummy-app:latest"
          command: ["/bin/sh", "-c", 'python3 main.py']
          ports:
            - containerPort: 8000
          livenessProbe:
            httpGet:
              path: /internal/alive
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /internal/ready
              port: 8000
            periodSeconds: 60
```

----------------------------------------

TITLE: Run FastStream Application via CLI
DESCRIPTION: Command to start a FastStream application using the CLI. It requires specifying the Python module and the application symbol (e.g., `basic:app`) to locate and run the FastStream instance.
SOURCE: https://github.com/ag2ai/faststream/blob/main/README.md#_snippet_6

LANGUAGE: shell
CODE:
```
faststream run basic:app
```

----------------------------------------

TITLE: Defining FastStream Messages with Pydantic BaseModel
DESCRIPTION: Learn how to define structured messages in FastStream applications using Pydantic's `BaseModel`. This allows for declarative syntax to specify message fields and types, enabling easy parsing of input JSON-encoded data into Python objects through type annotations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/faststream.md#_snippet_2

LANGUAGE: AIOKafka
CODE:
```
{!> docs_src/index/kafka/pydantic.py !}
```

LANGUAGE: Confluent
CODE:
```
{!> docs_src/index/confluent/pydantic.py !}
```

LANGUAGE: RabbitMQ
CODE:
```
{!> docs_src/index/rabbit/pydantic.py !}
```

LANGUAGE: NATS
CODE:
```
{!> docs_src/index/nats/pydantic.py !}
```

LANGUAGE: Redis
CODE:
```
{!> docs_src/index/redis/pydantic.py !}
```

----------------------------------------

TITLE: FastStream Middleware Stabilization Example
DESCRIPTION: This Python code demonstrates the stabilized behavior of `subscriber_middleware` and `publisher_middleware` in FastStream. It shows how to define asynchronous middleware functions and apply them to a message handler using `@broker.subscriber` and `@broker.publisher` decorators. This new approach allows for intercepting and modifying messages at various processing stages, enabling features like exception handling and header manipulation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_36

LANGUAGE: python
CODE:
```
async def subscriber_middleware(call_next, msg):
    return await call_next(msg)

async def publisher_middleware(call_next, msg, **kwargs):
    return await call_next(msg, **kwargs)

@broker.subscriber(
    "in",
    middlewares=(subscriber_middleware,),
)
@broker.publisher(
    "out",
    middlewares=(publisher_middleware,),
)
async def handler(msg):
    return msg
```

----------------------------------------

TITLE: Integrate FastStream Endpoints with Other ASGI Frameworks (FastAPI)
DESCRIPTION: This example illustrates how to integrate FastStream's ASGI wrappers as ready-to-use endpoints within another ASGI framework, specifically FastAPI. It shows how to mount FastStream's health check (`make_ping_asgi`) and AsyncAPI documentation (`make_asyncapi_asgi`) endpoints into a FastAPI application, including managing the broker's lifecycle with an `asynccontextmanager`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asgi.md#_snippet_10

LANGUAGE: python
CODE:
```
from contextlib import asynccontextmanager

from fastapi import FastAPI
from faststream import FastStream
from faststream.nats import NatsBroker
from faststream.asgi import make_ping_asgi, make_asyncapi_asgi

broker = NatsBroker()

@asynccontextmanager
async def start_broker(app):
    """Start the broker with the app."""
    async with broker:
        await broker.start()
        yield

app = FastAPI(lifespan=start_broker)

app.mount("/health", make_ping_asgi(broker, timeout=5.0))
app.mount("/asyncapi", make_asyncapi_asgi(FastStream(broker)))
```

----------------------------------------

TITLE: Creating and Using a FastStream Publisher Object
DESCRIPTION: This snippet demonstrates how to instantiate and use the FastStream Publisher object with different messaging brokers like AIOKafka, Confluent, RabbitMQ, NATS, and Redis. It highlights the object's reusability, AsyncAPI support, and testing capabilities, emphasizing the importance of return type annotations for message casting before publishing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/publishing/object.md#_snippet_0

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/publishing/kafka/object.py !}
```

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/publishing/confluent/object.py !}
```

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/publishing/rabbit/object.py !}
```

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/publishing/nats/object.py !}
```

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/publishing/redis/object.py !}
```

----------------------------------------

TITLE: Broadcasting Function Return to Multiple FastStream Publishers
DESCRIPTION: This example illustrates how to broadcast a function's return value to multiple output topics by applying multiple `@publisher` decorators to a single FastStream subscriber function. It also notes that in RPC mode, a reply is sent to the RPC channel in addition to all configured publishers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/publishing/object.md#_snippet_1

LANGUAGE: python
CODE:
```
@publisher1
@publisher2
@broker.subscriber("in")
async def handle(msg) -> str:
    return "Response"
```

----------------------------------------

TITLE: Integrate Pydantic Settings into FastStream Application
DESCRIPTION: Illustrates how to import and utilize the `settings` object, derived from `BaseSettings`, within a FastStream application. It shows how to access configured values for application startup and shutdown logic, such as connecting to a broker.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/config/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from faststream import FastStream, Logger
from faststream.broker.core.usecase import BrokerUsecase
from .config import settings

app = FastStream()

@app.on_startup
async def startup_broker(broker: BrokerUsecase, logger: Logger) -> None:
    logger.info(f"Starting application: {settings.app_name}")
    await broker.connect(settings.url)

@app.on_shutdown
async def shutdown_broker(broker: BrokerUsecase, logger: Logger) -> None:
    logger.info("Shutting down application")
    await broker.disconnect()
```

----------------------------------------

TITLE: Complete FastStream Redis Stream Publishing Example
DESCRIPTION: A comprehensive example demonstrating the full setup for publishing and subscribing to Redis streams using FastStream. This includes broker initialization, application setup, data model definition, and the message processing pipeline, showcasing a complete end-to-end flow.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/streams/publishing.md#_snippet_4

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.redis import RedisBroker
from pydantic import BaseModel

class Message(BaseModel):
    id: int
    content: str

broker = RedisBroker("redis://localhost:6379")

app = FastStream(broker)

@broker.subscriber("input-stream")
@broker.publisher("output-stream")
async def process_message(msg: Message) -> Message:
    print(f"Received: {msg.content}")
    return Message(id=msg.id + 1, content=f"Processed: {msg.content}")
```

----------------------------------------

TITLE: FastStream Kafka Basic Subscriber Application
DESCRIPTION: This snippet shows the complete FastStream application code for consuming 'HelloWorld' messages from a 'hello_world' Kafka topic. It includes Pydantic model definition, KafkaBroker setup, and a subscriber function to process incoming messages.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/Subscriber/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
from faststream import FastStream, KafkaBroker
from pydantic import BaseModel

class HelloWorld(BaseModel):
    msg: str
    name: str

broker = KafkaBroker("localhost:9092")
app = FastStream(broker)

@broker.subscriber("hello_world")
async def on_hello_world(msg: HelloWorld):
    print(msg)
```

----------------------------------------

TITLE: Define Custom Message Parser Signature with Original Parser in FastStream
DESCRIPTION: This snippet demonstrates how to define a custom message parser function that reuses the original FastStream parser. The custom parser takes both the raw message object and the `original_parser` function as arguments. This allows for pre-processing or post-processing of the message while still leveraging FastStream's default parsing logic. Note that the `original_parser` is always asynchronous, so your custom parser should also be asynchronous.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/serialization/parser.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Callable, Awaitable
from faststream.kafka import ConsumerRecord, KafkaMessage

async def parser(
    msg: ConsumerRecord,
    original_parser: Callable[[ConsumerRecord], Awaitable[KafkaMessage]],
) -> KafkaMessage:
    return await original_parser(msg)
```

LANGUAGE: Python
CODE:
```
from confluent_kafka import Message
from typing import Callable, Awaitable
from faststream.confluent import KafkaMessage

async def parser(
    msg: Message,
    original_parser: Callable[[Message], Awaitable[KafkaMessage]],
) -> KafkaMessage:
    return await original_parser(msg)
```

LANGUAGE: Python
CODE:
```
from typing import Callable, Awaitable
from aio_pika import IncomingMessage
from faststream.rabbit import RabbitMessage

async def parser(
    msg: IncomingMessage,
    original_parser: Callable[[IncomingMessage], Awaitable[RabbitMessage]],
) -> RabbitMessage:
    return await original_parser(msg)
```

LANGUAGE: Python
CODE:
```
from typing import Callable, Awaitable
from nats.aio.msg import Msg
from faststream.nats import NatsMessage

async def parser(
    msg: Msg,
    original_parser: Callable[[Msg], Awaitable[NatsMessage]],
) -> NatsMessage:
    return await original_parser(msg)
```

LANGUAGE: Python
CODE:
```
from typing import Callable, Awaitable
from faststream.redis import RedisMessage
from faststream.redis.message import PubSubMessage

async def parser(
    msg: PubSubMessage,
    original_parser: Callable[[PubSubMessage], Awaitable[RedisMessage]],
) -> RedisMessage:
    return await original_parser(msg)
```

----------------------------------------

TITLE: Decorate FastStream Kafka Function with Subscriber and Publisher
DESCRIPTION: This example demonstrates applying both `@broker.subscriber` and `@broker.publisher` decorators to a processing function. This setup automatically handles message consumption and production, integrating the function into the FastStream data pipeline and ensuring AsyncAPI documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/Publisher/index.md#_snippet_9

LANGUAGE: python
CODE:
```
from pydantic import BaseModel

class InputMessage(BaseModel):
    message: str

class OutputMessage(BaseModel):
    response: str

# Assuming 'broker' and 'to_output_data' are defined
@broker.subscriber("input_data")
@to_output_data
async def handle_msg(msg: InputMessage) -> OutputMessage:
    return OutputMessage(response=f"Processed: {msg.message}")
```

----------------------------------------

TITLE: Define a Broker-Level Publisher Middleware in FastStream
DESCRIPTION: This Python example demonstrates how to create a custom middleware class `MyMiddleware` inheriting from `BaseMiddleware` and implementing the `publish_scope` method. This middleware is then applied globally to the `Broker` instance, affecting all outgoing messages.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/middlewares/index.md#_snippet_6

LANGUAGE: python
CODE:
```
from typing import Callable, Awaitable

from faststream import BaseMiddleware

class MyMiddleware(BaseMiddleware):
    async def publish_scope(
        self,
        call_next: Callable[..., Awaitable[Any]],
        msg: Any,
        **options: Any,
    ) -> Any:
        return await call_next(msg, **options)


Broker(middlewares=[MyMiddleware])
```

----------------------------------------

TITLE: Complete FastStream Kafka Application with Partition Key Example
DESCRIPTION: This comprehensive example showcases a FastStream application that consumes messages from an 'input_data' Kafka topic and republishes them to an 'output_data' topic, explicitly utilizing a partition key. It integrates both consumer and publisher definitions, illustrating how to implement key-based message routing for efficient data processing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/Publisher/using_a_key.md#_snippet_2

LANGUAGE: Python
CODE:
```
from faststream import FastStream
from faststream.kafka import KafkaBroker

broker = KafkaBroker("localhost:9092")
app = FastStream(broker)

@broker.publisher("output_data")
async def to_output_data(msg: str, key: str) -> None:
    pass

@broker.subscriber("input_data")
async def handle_input_data(msg: str):
    print(f"Received: {msg}")
    await to_output_data.publish(msg, key=msg.key)
```

----------------------------------------

TITLE: FastStream Middleware as Async Context Managers (Breaking Change)
DESCRIPTION: Highlights a breaking change requiring both subscriber and publisher middlewares to be of the `async context manager` type. This example demonstrates how to define and apply such middlewares using `contextlib.asynccontextmanager`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_41

LANGUAGE: python
CODE:
```
from contextlib import asynccontextmanager

@asynccontextmanager
async def subscriber_middleware(msg_body):
    yield msg_body

@asynccontextmanager
async def publisher_middleware(
    msg_to_publish,
    **publish_arguments,
):
    yield msg_to_publish

@broker.subscriber("in", middlewares=(subscriber_middleware,))
@broker.publisher("out", middlewares=(publisher_middleware,))
async def handler():
    ...
```

----------------------------------------

TITLE: Initiating FastStream with RedisBroker
DESCRIPTION: This snippet demonstrates how to initialize a FastStream application and integrate it with RedisBroker, setting up the foundation for Redis-based messaging and RPC.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/rpc.md#_snippet_0

LANGUAGE: Python
CODE:
```
broker = RedisBroker()
app = FastStream(broker)
```

----------------------------------------

TITLE: Register Handlers and Publishers with FastStream Broker Router
DESCRIPTION: This example illustrates how to define message handlers using `@router.subscriber` and message publishers using `@router.publisher` on a FastStream `BrokerRouter` instance. This allows for modular organization of business logic within the application.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/routers/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
@router.subscriber("input_data")
async def handle_input_data(msg: str):
    print(f"Received: {msg}")

@router.publisher("output_data")
async def publish_output_data(msg: str):
    return msg
```

----------------------------------------

TITLE: Configure Cron-Scheduled Tasks for FastStream Brokers
DESCRIPTION: This code demonstrates how to define a task with a cron schedule using `taskiq_broker.task` and integrate it with `StreamScheduler` from `taskiq-faststream`. The `LabelScheduleSource` is used to automatically discover tasks marked with schedules. The examples show configuration for AIOKafka, Confluent, RabbitMQ, NATS, and Redis, primarily differing in the message destination parameter (e.g., `topic`, `queue`, `subject`, `channel`).
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/includes/scheduling/taskiq_broker.md#_snippet_0

LANGUAGE: Python
CODE:
```
from taskiq_faststream import StreamScheduler
from taskiq.schedule_sources import LabelScheduleSource

taskiq_broker.task(
    message={\"user\": \"John\", \"user_id\": 1},
    topic=\"in-topic\",
    schedule=[{
        \"cron\": \"* * * * *\",
    }],
)

scheduler = StreamScheduler(
    broker=taskiq_broker,
    sources=[LabelScheduleSource(taskiq_broker)],
)
```

LANGUAGE: Python
CODE:
```
from taskiq_faststream import StreamScheduler
from taskiq.schedule_sources import LabelScheduleSource

taskiq_broker.task(
    message={\"user\": \"John\", \"user_id\": 1},
    topic=\"in-topic\",
    schedule=[{
        \"cron\": \"* * * * *\",
    }],
)

scheduler = StreamScheduler(
    broker=taskiq_broker,
    sources=[LabelScheduleSource(taskiq_broker)],
)
```

LANGUAGE: Python
CODE:
```
from taskiq_faststream import StreamScheduler
from taskiq.schedule_sources import LabelScheduleSource

taskiq_broker.task(
    message={\"user\": \"John\", \"user_id\": 1},
    queue=\"in-queue\",
    schedule=[{
        \"cron\": \"* * * * *\",
    }],
)

scheduler = StreamScheduler(
    broker=taskiq_broker,
    sources=[LabelScheduleSource(taskiq_broker)],
)
```

LANGUAGE: Python
CODE:
```
from taskiq_faststream import StreamScheduler
from taskiq.schedule_sources import LabelScheduleSource

taskiq_broker.task(
    message={\"user\": \"John\", \"user_id\": 1},
    subject=\"in-subject\",
    schedule=[{
        \"cron\": \"* * * * *\",
    }],
)

scheduler = StreamScheduler(
    broker=taskiq_broker,
    sources=[LabelScheduleSource(taskiq_broker)],
)
```

LANGUAGE: Python
CODE:
```
from taskiq_faststream import StreamScheduler
from taskiq.schedule_sources import LabelScheduleSource

taskiq_broker.task(
    message={\"user\": \"John\", \"user_id\": 1},
    channel=\"in-channel\",
    schedule=[{
        \"cron\": \"* * * * *\",
    }],
)

scheduler = StreamScheduler(
    broker=taskiq_broker,
    sources=[LabelScheduleSource(taskiq_broker)],
)
```

----------------------------------------

TITLE: FastStream Original Application Message Consumption Examples
DESCRIPTION: Demonstrates how a FastStream application consumes JSON messages using various message brokers (AIOKafka, Confluent, RabbitMQ, NATS, Redis). The application expects JSON messages like `{"name": "username", "user_id": 1}`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/test.md#_snippet_0

LANGUAGE: Python
CODE:
```
// External file: docs_src/getting_started/subscription/kafka/annotation.py
```

LANGUAGE: Python
CODE:
```
// External file: docs_src/getting_started/subscription/confluent/annotation.py
```

LANGUAGE: Python
CODE:
```
// External file: docs_src/getting_started/subscription/rabbit/annotation.py
```

LANGUAGE: Python
CODE:
```
// External file: docs_src/getting_started/subscription/nats/annotation.py
```

LANGUAGE: Python
CODE:
```
// External file: docs_src/getting_started/subscription/redis/annotation.py
```

----------------------------------------

TITLE: Testing FastStream Applications with TestKafkaBroker and Pytest
DESCRIPTION: Shows how to test FastStream applications using `TestKafkaBroker` and `pytest` context managers. It includes examples for testing correct message processing and handling invalid input, demonstrating how `pydantic.ValidationError` is raised for schema violations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/README.md#_snippet_4

LANGUAGE: python
CODE:
```
# Code above omitted 👆

import pytest
import pydantic
from faststream.kafka import TestKafkaBroker


@pytest.mark.asyncio
async def test_correct():
    async with TestKafkaBroker(broker) as br:
        await br.publish({
            "user": "John",
            "user_id": 1,
        }, "in")

@pytest.mark.asyncio
async def test_invalid():
    async with TestKafkaBroker(broker) as br:
        with pytest.raises(pydantic.ValidationError):
            await br.publish("wrong message", "in")
```

----------------------------------------

TITLE: Complete FastStream Kafka Partition Key Example Application
DESCRIPTION: This comprehensive FastStream application showcases the end-to-end process of consuming messages from an 'input_data' topic and publishing them to an 'output_data' topic, leveraging a specified partition key. It highlights how to integrate key-based partitioning into a Kafka-based application for ordered and efficient message handling.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/confluent/Publisher/using_a_key.md#_snippet_2

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.kafka import KafkaBroker

broker = KafkaBroker("localhost:9092")
app = FastStream(broker)

@broker.publisher("output_data")
async def to_output_data(message: str, key: str):
    pass

@broker.subscriber("input_data")
async def on_input_data(message: str):
    print(f"Received: {message}")
    await to_output_data.publish(message, key="my-partition-key")
```

----------------------------------------

TITLE: Configure Kafka Consumer for At Least Once Acknowledgement in FastStream
DESCRIPTION: This snippet demonstrates how to configure a FastStream Kafka consumer to use an 'at least once' message processing strategy. By setting `auto_commit=False` and specifying a `group_id`, the offset is committed only after the message processing function returns successfully, ensuring messages are re-processed on failure.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/ack.md#_snippet_0

LANGUAGE: Python
CODE:
```
@broker.subscriber(
    "test", group_id="group", auto_commit=False
)
async def base_handler(body: str):
    ...
```

----------------------------------------

TITLE: Decorate Functions for Redis Message Publishing with FastStream
DESCRIPTION: Explains how to use FastStream decorators (`@broker.subscriber` and `@broker.publisher`) to define a data pipeline where an incoming message triggers processing, and the result is automatically published to another Redis channel. This approach streamlines message flow and requires a return type annotation for the decorated function.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/pubsub/publishing.md#_snippet_2

LANGUAGE: python
CODE:
```
from faststream.redis import RedisBroker

broker = RedisBroker("redis://localhost:6379")

publisher = broker.publisher("output_data")

@broker.subscriber("input_data")
@publisher
async def process_and_publish(msg: str) -> str:
    return f"Processed: {msg}"
```

LANGUAGE: python
CODE:
```
from faststream.redis import RedisBroker

broker = RedisBroker("redis://localhost:6379")
```

LANGUAGE: python
CODE:
```
publisher = broker.publisher("output_data")
```

LANGUAGE: python
CODE:
```
async def process_and_publish(msg: str) -> str:
    return f"Processed: {msg}"
```

LANGUAGE: python
CODE:
```
@broker.subscriber("input_data")
@publisher
async def process_and_publish(msg: str) -> str:
    return f"Processed: {msg}"
```

----------------------------------------

TITLE: Publishing a Message with a Specific Partition Key in FastStream
DESCRIPTION: This snippet demonstrates how to include a partition key when invoking a FastStream publisher's publish method. By passing the key parameter, you ensure that the message is routed to the appropriate Kafka partition, which is crucial for maintaining message order and grouping related data.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/Publisher/using_a_key.md#_snippet_1

LANGUAGE: Python
CODE:
```
await to_output_data.publish(msg, key=msg.key)
```

----------------------------------------

TITLE: Define FastStream Subscribers with Message Filtering
DESCRIPTION: Demonstrates how to set up FastStream subscribers to handle both JSON and non-JSON messages on a single topic using the `filter` argument. This example shows a main handler with a specific filter (for JSON content-type) and a default handler that catches all other messages.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/filtering.md#_snippet_0

LANGUAGE: Python
CODE:
```
from faststream import FastStream, Logger
from faststream.kafka import KafkaBroker
from pydantic import BaseModel

class MyMessage(BaseModel):
    name: str
    value: int

broker = KafkaBroker("localhost:9092")

@broker.subscriber("test-topic", filter=lambda msg: msg.headers.get("content-type") == "application/json")
async def handle(msg: MyMessage, logger: Logger):
    logger.info(f"Received JSON message: {msg.model_dump_json()}")

@broker.subscriber("test-topic")
async def default_handler(msg: bytes, logger: Logger):
    logger.info(f"Received non-JSON message: {msg.decode()}")

app = FastStream(broker)
```

LANGUAGE: Python
CODE:
```
from faststream import FastStream, Logger
from faststream.confluent import ConfluentBroker
from pydantic import BaseModel

class MyMessage(BaseModel):
    name: str
    value: int

broker = ConfluentBroker("localhost:9092")

@broker.subscriber("test-topic", filter=lambda msg: msg.headers.get("content-type") == "application/json")
async def handle(msg: MyMessage, logger: Logger):
    logger.info(f"Received JSON message: {msg.model_dump_json()}")

@broker.subscriber("test-topic")
async def default_handler(msg: bytes, logger: Logger):
    logger.info(f"Received non-JSON message: {msg.decode()}")

app = FastStream(broker)
```

LANGUAGE: Python
CODE:
```
from faststream import FastStream, Logger
from faststream.rabbit import RabbitBroker
from pydantic import BaseModel

class MyMessage(BaseModel):
    name: str
    value: int

broker = RabbitBroker("amqp://guest:guest@localhost:5672/")

@broker.subscriber("test-topic", filter=lambda msg: msg.headers.get("content-type") == "application/json")
async def handle(msg: MyMessage, logger: Logger):
    logger.info(f"Received JSON message: {msg.model_dump_json()}")

@broker.subscriber("test-topic")
async def default_handler(msg: bytes, logger: Logger):
    logger.info(f"Received non-JSON message: {msg.decode()}")

app = FastStream(broker)
```

LANGUAGE: Python
CODE:
```
from faststream import FastStream, Logger
from faststream.nats import NatsBroker
from pydantic import BaseModel

class MyMessage(BaseModel):
    name: str
    value: int

broker = NatsBroker("nats://localhost:4222")

@broker.subscriber("test-topic", filter=lambda msg: msg.headers.get("content-type") == "application/json")
async def handle(msg: MyMessage, logger: Logger):
    logger.info(f"Received JSON message: {msg.model_dump_json()}")

@broker.subscriber("test-topic")
async def default_handler(msg: bytes, logger: Logger):
    logger.info(f"Received non-JSON message: {msg.decode()}")

app = FastStream(broker)
```

LANGUAGE: Python
CODE:
```
from faststream import FastStream, Logger
from faststream.redis import RedisBroker
from pydantic import BaseModel

class MyMessage(BaseModel):
    name: str
    value: int

broker = RedisBroker("redis://localhost:6379")

@broker.subscriber("test-topic", filter=lambda msg: msg.headers.get("content-type") == "application/json")
async def handle(msg: MyMessage, logger: Logger):
    logger.info(f"Received JSON message: {msg.model_dump_json()}")

@broker.subscriber("test-topic")
async def default_handler(msg: bytes, logger: Logger):
    logger.info(f"Received non-JSON message: {msg.decode()}")

app = FastStream(broker)
```

----------------------------------------

TITLE: Testing FastStream Services with TestBroker Context Manager
DESCRIPTION: This snippet illustrates how to effectively test FastStream services using the `TestBroker` context manager. It redirects `subscriber` and `publisher` functions to in-memory brokers, facilitating rapid testing without the need for a running external broker or its dependencies, and integrates seamlessly with pytest.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/faststream.md#_snippet_3

LANGUAGE: AIOKafka
CODE:
```
# Code above omitted 👆

{!> docs_src/index/kafka/test.py [ln:3-21] !}
```

LANGUAGE: Confluent
CODE:
```
# Code above omitted 👆

{!> docs_src/index/confluent/test.py [ln:3-21] !}
```

LANGUAGE: RabbitMQ
CODE:
```
# Code above omitted 👆

{!> docs_src/index/rabbit/test.py [ln:3-21] !}
```

LANGUAGE: NATS
CODE:
```
# Code above omitted 👆

{!> docs_src/index/nats/test.py [ln:3-21] !}
```

LANGUAGE: Redis
CODE:
```
# Code above omitted 👆

{!> docs_src/index/redis/test.py [ln:3-21] !}
```

----------------------------------------

TITLE: Handling Messages with FastStream StreamRouter in FastAPI
DESCRIPTION: Demonstrates how to declare message handlers using `StreamRouter` within a FastAPI application. It highlights the integration with FastAPI's dependency system, allowing the use of `fastapi.Depends` and other FastAPI features. Messages are accessible via `body`, `path`, and `headers` request parameters.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/fastapi/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/kafka/base.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/confluent/base.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/rabbit/base.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/nats/base.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/redis/base.py !}
```

----------------------------------------

TITLE: Connect to Kafka with FastStream using Confluent KafkaBroker
DESCRIPTION: This example demonstrates how to establish a connection to a Kafka broker using FastStream's `KafkaBroker` module, which now supports Confluent Kafka. It shows a basic message handler that subscribes to 'in-topic' and publishes to 'out-topic', processing user data.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_47

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.confluent import KafkaBroker

broker = KafkaBroker("localhost:9092")
app = FastStream(broker)

@broker.subscriber("in-topic")
@broker.publisher("out-topic")
async def handle_msg(user: str, user_id: int) -> str:
    return f"User: {user_id} - {user} registered"
```

----------------------------------------

TITLE: Define Custom ASGI HTTP GET Route in FastStream
DESCRIPTION: Shows how to create a custom HTTP GET endpoint using the `@get` decorator and `AsgiResponse` within `AsgiFastStream`, allowing for flexible custom route definitions.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asgi.md#_snippet_4

LANGUAGE: python
CODE:
```
from faststream.nats import NatsBroker
from faststream.asgi import AsgiFastStream, AsgiResponse, get

broker = NatsBroker()

@get
async def liveness_ping(scope):
    return AsgiResponse(b"", status_code=200)

app = AsgiFastStream(
    broker,
    asgi_routes=[("/health", liveness_ping)]
)
```

----------------------------------------

TITLE: FastStream Kafka Pattern Subscription for Topic Data Access
DESCRIPTION: This snippet demonstrates using pattern subscriptions with FastStream to extract data directly from the Kafka topic name. The `Path()` dependency allows injecting parts of the topic name (e.g., 'level' from 'logs.{level}') into the consumer function arguments, enabling dynamic message routing and processing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/Subscriber/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
from faststream import Path

@broker.subscriber(pattern="logs.{level}")
async def base_handler(
    body: str,
    level: str = Path(),
):
    ...
```

----------------------------------------

TITLE: FastStream Redis List Batch Publishing
DESCRIPTION: Demonstrates two methods for publishing multiple messages to a Redis List in a single request using FastStream. This includes directly calling `broker.publish_batch` or configuring a publisher with batching enabled.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/list/batch.md#_snippet_3

LANGUAGE: Python
CODE:
```
broker.publish_batch("msg2", "msg2", list="test-list")
broker.publisher(list=ListSub("test-list", batch=True))
```

----------------------------------------

TITLE: Integrate FastStream with Aiohttp
DESCRIPTION: This snippet demonstrates how to integrate FastStream with the Aiohttp framework. It shows how to initialize the FastStream broker at application startup and close it gracefully during shutdown, leveraging Aiohttp's lifecycle hooks.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/frameworks/index.md#_snippet_2

LANGUAGE: python
CODE:
```
{!> docs_src/integrations/http_frameworks_integrations/aiohttp.py !}
```

----------------------------------------

TITLE: Implement `broker.request` for RPC in FastStream
DESCRIPTION: This snippet demonstrates the new `broker.request` method for performing RPC calls in FastStream, replacing the old `broker.publish(..., rpc=True)` approach. It allows access to the full `NatsMessage` response, including headers and middleware processing, providing more control and flexibility compared to the previous method which only returned the message body.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_6

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.nats import NatsBroker, NatsResponse, NatsMessage

broker = NatsBroker()

@broker.subscriber("test")
async def echo_handler(msg):
    return NatsResponse(msg, headers={"x-token": "some-token"})

@app.after_startup
async def test():
    # The old implementation was returning just a message body,
    # so you wasn't be able to check response headers, etc
    msg_body: str = await broker.publish("ping", "test", rpc=True)
    assert msg_body == "ping"

    # Now request return the whole message and you can validate any part of it
    # moreover it triggers all your middlewares
    response: NatsMessage = await broker.request("ping", "test")
```

----------------------------------------

TITLE: Full FastStream Kafka and Django ASGI Application Example
DESCRIPTION: A comprehensive `asgi.py` example showing how to set up a Starlette application that integrates a FastStream KafkaBroker with a Django application, including static file serving and proper Django settings initialization.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/django/index.md#_snippet_8

LANGUAGE: python
CODE:
```
import os
from contextlib import asynccontextmanager

from django.core.asgi import get_asgi_application
from starlette.applications import Starlette
from starlette.routing import Mount
from starlette.staticfiles import StaticFiles
from faststream.kafka import KafkaBroker


os.environ.setdefault("DJANGO_SETTINGS_MODULE", "app.settings")

broker = KafkaBroker()

@asynccontextmanager
async def broker_lifespan(app):
    await broker.start()
    try:
        yield
    finally:
        await broker.close()

application = Starlette(
    routes=(
        Mount("/static", StaticFiles(directory="static"), name="static"),
        Mount("/", get_asgi_application()),
    ),
    lifespan=broker_lifespan,
)
```

----------------------------------------

TITLE: FastStream Kafka Reply Consumer for RPC Responses
DESCRIPTION: This code implements a `response_handler` that subscribes to a "responses" topic. It uses a `Context` variable `responses` (a dictionary mapping correlation IDs to `Future` objects) to store and retrieve `Future` objects, setting their results with the body of incoming messages based on their `correlation_id`. This is crucial for matching replies to original requests.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/howto/kafka/rpc.md#_snippet_1

LANGUAGE: python
CODE:
```
from asyncio import Future
from typing import Annotated

from faststream import FastStream, Context
from faststream.kafka import KafkaBroker, KafkaMessage

broker = KafkaBroker()
app = FastStream(broker)

@broker.subscriber("responses")
async def response_handler(
    msg: KafkaMessage,
    responses: Annotated[
        dict[str, Future[bytes]],
        Context("responses", initial=dict),
    ],
) -> None:
    if (future := responses.pop(msg.correlation_id, None)):
        future.set_result(msg.body)
```

----------------------------------------

TITLE: Extracting Message Headers in FastStream
DESCRIPTION: This Python snippet demonstrates how to extract header values from incoming messages in a FastStream application. It shows two ways: directly extracting a header by its name (`user_id: int = Header()`) and extracting a header with a custom name mapping (`u_id: int = Header("user_id")`). This allows flexible access to message metadata.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_66

LANGUAGE: Python
CODE:
```
async def handler(
  user_id: int = Header(),
  u_id: int = Header("user_id"),  # with custom name
): ...
```

----------------------------------------

TITLE: Full FastStream Kafka Application with Publisher Decorator
DESCRIPTION: This comprehensive example illustrates a FastStream application that utilizes both subscriber and publisher decorators. It showcases how to define message processing logic that consumes from one topic and publishes to another, with automatic AsyncAPI documentation generation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/Publisher/index.md#_snippet_5

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.kafka import KafkaBroker
from pydantic import BaseModel

class InputMessage(BaseModel):
    message: str

class OutputMessage(BaseModel):
    response: str

broker = KafkaBroker("localhost:9092")

to_output_data = broker.publisher("output_data")

@broker.subscriber("input_data")
@to_output_data
async def handle_msg(msg: InputMessage) -> OutputMessage:
    return OutputMessage(response=f"Processed: {msg.message}")

app = FastStream(broker)
```

----------------------------------------

TITLE: FastStream Application Context Manager
DESCRIPTION: A new `FastStream` application context manager has been introduced, offering FastAPI-like lifespan management. This allows for cleaner setup and teardown logic for FastStream applications, improving resource management.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_57

LANGUAGE: APIDOC
CODE:
```
FastStream application context manager
  description: Provides FastAPI-like lifespan management
```

----------------------------------------

TITLE: Integrate FastStream with FastAPI
DESCRIPTION: This snippet demonstrates how to integrate FastStream with the FastAPI framework. It shows how to initialize the FastStream broker at application startup and close it gracefully during shutdown, leveraging FastAPI's lifecycle hooks.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/frameworks/index.md#_snippet_0

LANGUAGE: python
CODE:
```
{!> docs_src/integrations/http_frameworks_integrations/fastapi.py !}
```

----------------------------------------

TITLE: Dockerfile for FastStream Healthcheck Application
DESCRIPTION: This Dockerfile builds a slim Python image for the FastStream application. It installs necessary system dependencies and Python packages, copies the application code, and sets the working directory for execution.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/healthcheks.md#_snippet_1

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.12-slim

RUN apt-get update && apt-get install -y curl

WORKDIR /app
RUN pip install 'faststream[rabbit]' uvicorn redis asyncpg
COPY main.py /app
```

----------------------------------------

TITLE: Integrate FastStream with Sanic
DESCRIPTION: This snippet demonstrates how to integrate FastStream with the Sanic framework. It shows how to initialize the FastStream broker at application startup and close it gracefully during shutdown, leveraging Sanic's lifecycle hooks.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/frameworks/index.md#_snippet_6

LANGUAGE: python
CODE:
```
{!> docs_src/integrations/http_frameworks_integrations/sanic.py !}
```

----------------------------------------

TITLE: Inject Specific Message Fields with FastStream Context
DESCRIPTION: Shows how to use FastStream's `Context` feature to directly inject specific message fields, such as headers, into a handler function's arguments. This approach simplifies access to individual message attributes without needing to interact with the full message object.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/confluent/message.md#_snippet_2

LANGUAGE: python
CODE:
```
from faststream import Context

@broker.subscriber("test")
async def base_handler(
    body: str,
    headers: str = Context("message.headers"),
):
    print(headers)
```

----------------------------------------

TITLE: FastStream Kafka: Disabling Auto-Commit for At-Least-Once Processing
DESCRIPTION: This snippet demonstrates how to configure a FastStream Kafka consumer to disable automatic offset committing. By setting `auto_commit=False` and providing a `group_id`, the consumer adopts an 'at least once' processing strategy, where the message is acknowledged only upon successful function execution.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/confluent/ack.md#_snippet_0

LANGUAGE: Python
CODE:
```
@broker.subscriber(
    "test", group_id="group", auto_commit=False
)
async def base_handler(body: str):
    ...
```

----------------------------------------

TITLE: Explicit Partition Assignment for FastStream Kafka Broker
DESCRIPTION: This snippet demonstrates how to explicitly assign specific Kafka topic partitions to a consumer using FastStream's `KafkaBroker`. It utilizes `TopicPartition` objects to define the topic and partition ID, which are then passed to the `@broker.subscribe` decorator's `partitions` argument. This allows for fine-grained control over which partitions a consumer instance will listen to.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_27

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.kafka import KafkaBroker, TopicPartition

broker = KafkaBroker()

topic_partition_first = TopicPartition("my_topic", 1)
topic_partition_second = TopicPartition("my_topic", 2)

@broker.subscribe(partitions=[topic_partition_first, topic_partition_second])
async def some_consumer(msg):
   ...
```

----------------------------------------

TITLE: Basic Context Usage with FastStream Messaging Brokers
DESCRIPTION: Demonstrates basic usage of FastStream's Context for storing application runtime objects and variables across different messaging brokers like AIOKafka, Confluent, RabbitMQ, NATS, and Redis.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
# Python code from docs_src/getting_started/context/kafka/base.py
# Actual content not provided in input.
```

LANGUAGE: Python
CODE:
```
# Python code from docs_src/getting_started/context/confluent/base.py
# Actual content not provided in input.
```

LANGUAGE: Python
CODE:
```
# Python code from docs_src/getting_started/context/rabbit/base.py
# Actual content not provided in input.
```

LANGUAGE: Python
CODE:
```
# Python code from docs_src/getting_started/context/nats/base.py
# Actual content not provided in input.
```

LANGUAGE: Python
CODE:
```
# Python code from docs_src/getting_started/context/redis/base.py
# Actual content not provided in input.
```

----------------------------------------

TITLE: Integrating FastStream KafkaBroker with aiohttp Application
DESCRIPTION: This snippet demonstrates how to use a FastStream KafkaBroker independently within an aiohttp web application. It shows how to initialize the broker, define a subscriber, and manage the broker's lifecycle (start and close) using aiohttp's startup and cleanup hooks to ensure proper resource management alongside HTTP routes.
SOURCE: https://github.com/ag2ai/faststream/blob/main/README.md#_snippet_11

LANGUAGE: python
CODE:
```
from aiohttp import web

from faststream.kafka import KafkaBroker

broker = KafkaBroker("localhost:9092")

@broker.subscriber("test")
async def base_handler(body):
    print(body)

async def start_broker(app):
    await broker.start()

async def stop_broker(app):
    await broker.close()

async def hello(request):
    return web.Response(text="Hello, world")

app = web.Application()
app.add_routes([web.get("/", hello)])
app.on_startup.append(start_broker)
app.on_cleanup.append(stop_broker)

if __name__ == "__main__":
    web.run_app(app)
```

----------------------------------------

TITLE: Publish Message with a Dedicated FastStream Kafka Publisher Object
DESCRIPTION: This snippet shows how to send messages using a pre-defined publisher object. This method ensures that publishing operations are well-structured and automatically included in your AsyncAPI documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/Publisher/index.md#_snippet_4

LANGUAGE: python
CODE:
```
from pydantic import BaseModel

class MyPydanticModel(BaseModel):
    name: str

# Assuming 'publisher' is already defined as: publisher = broker.publisher("another_topic")
await publisher.publish({"msg": "Hello from object!"})
await publisher.publish("Hello from object!")
await publisher.publish(123)
await publisher.publish(False)
await publisher.publish(b"Binary data from object!")
await publisher.publish(MyPydanticModel(name="Jane Doe"))
```

----------------------------------------

TITLE: Manually Acknowledge or Nack Kafka Messages in FastStream
DESCRIPTION: This example shows how to manually control message acknowledgements in FastStream by accessing the `KafkaMessage` object from the context. The `ack()` method commits the message offset, while `nack()` prevents the commit, allowing another consumer in the group to re-process the message, providing fine-grained control over message delivery.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/ack.md#_snippet_1

LANGUAGE: Python
CODE:
```
from faststream.kafka.annotations import KafkaMessage


@broker.subscriber(
    "test", group_id="group", auto_commit=False
)
async def base_handler(body: str, msg: KafkaMessage):
    await msg.ack()
    # or
    await msg.nack()
```

----------------------------------------

TITLE: Complete FastStream Redis Pattern Channel Subscription Application
DESCRIPTION: This complete FastStream application demonstrates how to subscribe to multiple Redis channels matching a specific pattern (e.g., 'test.*') using the `PubSub` object with the `pattern` flag set to `True`. It sets up a RedisBroker and defines a message handler function.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/pubsub/subscription.md#_snippet_4

LANGUAGE: Python
CODE:
```
from faststream import FastStream
from faststream.redis import RedisBroker, PubSub

broker = RedisBroker()

@broker.subscriber(channel=PubSub("test.*", pattern=True))
async def handle_message(msg: str):
    print(f"Received: {msg}")
```

----------------------------------------

TITLE: Publish Detailed Responses with FastStream Broker
DESCRIPTION: This Python example demonstrates the extended Response API in FastStream, allowing handlers to return `Response` objects (or broker-specific responses like `KafkaResponse`) with detailed information, including custom headers. This enables richer message content from subscribers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_8

LANGUAGE: python
CODE:
```
@broker.subscriber("in")
@broker.publisher("out")
async def handler(msg):
    return Response(msg, headers={"response_header": "Hi!"})   # or KafkaResponse, etc
```

----------------------------------------

TITLE: Define FastStream Kafka Batch Subscriber
DESCRIPTION: Configures a FastStream subscriber with the @broker.subscriber(...) decorator to consume messages in batches. This involves setting the 'msg' object as a list and the 'batch' parameter to 'True', instructing the subscriber to handle message consumption in groups.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/Subscriber/batch_subscriber.md#_snippet_0

LANGUAGE: Python
CODE:
```
@broker.subscriber("test_batch", batch=True)
```

----------------------------------------

TITLE: Install FastStream project development dependencies
DESCRIPTION: This command installs all development-specific dependencies for the FastStream project, enabling local development and testing. The `-e` flag installs the package in editable mode.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/template/index.md#_snippet_3

LANGUAGE: bash
CODE:
```
pip install -e ".[dev]"
```

----------------------------------------

TITLE: Define Pydantic BaseSettings Class for Application Configuration
DESCRIPTION: Demonstrates how to create a `BaseSettings` subclass to define application configuration parameters. It shows examples for both Pydantic v1 and v2, highlighting the import path differences and how to declare typed attributes for settings.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/config/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings

class Settings(BaseSettings):
    app_name: str = "FastStream"
    items_per_user: int = 50
    url: str
```

LANGUAGE: Python
CODE:
```
from pydantic import BaseSettings

class Settings(BaseSettings):
    app_name: str = "FastStream"
    items_per_user: int = 50
    url: str
```

----------------------------------------

TITLE: Define Lifespan Context Manager for FastStream Applications
DESCRIPTION: Demonstrates how to use the `lifespan` context manager in FastStream applications to define startup and shutdown logic. This method is suitable for objects that need to be processed at both application startup and shutdown, offering a more integrated approach compared to separate `on_startup` and `after_shutdown` hooks. Note that `lifespan` executes before the broker starts and after it shuts down, preventing message publishing within this context.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/lifespan/context.md#_snippet_0

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/lifespan/kafka/ml_context.py!}
```

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/lifespan/confluent/ml_context.py!}
```

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/lifespan/rabbit/ml_context.py!}
```

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/lifespan/nats/ml_context.py!}
```

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/lifespan/redis/ml_context.py!}
```

----------------------------------------

TITLE: Registering FastStream Subscribers at Runtime
DESCRIPTION: Illustrates the new ability to register subscribers dynamically at runtime with an already-started broker. This involves creating a subscriber, assigning a handler, setting up the subscriber with the broker, and then starting and closing it.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_42

LANGUAGE: python
CODE:
```
subscriber = broker.subscriber("dynamic")
subscriber(handler_method)
...
broker.setup_subscriber(subscriber)
await subscriber.start()
...
await subscriber.close()
```

----------------------------------------

TITLE: FastStream Asynchronous Context Manager Middlewares
DESCRIPTION: This section highlights a breaking change requiring both `subscriber` and `publisher` middlewares to be implemented as async context managers. This design enables advanced functionalities such as suppressing exceptions, passing fallback message bodies to publishers, and patching outgoing message headers, crucial for observability tools.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_34

LANGUAGE: python
CODE:
```
async def subscriber_middleware(call_next, msg):
    return await call_next(msg)

async def publisher_middleware(call_next, msg, **kwargs):
    return await call_next(msg, **kwargs)

@broker.subscriber(
    "in",
    middlewares=(subscriber_middleware,),
)
@broker.publisher(
    "out",
    middlewares=(publisher_middleware,),
)
async def handler(msg):
    return msg
```

----------------------------------------

TITLE: Run FastStream Application with Inline Environment Variable
DESCRIPTION: Command-line example demonstrating how to launch a FastStream application while setting an environment variable (`URL`) directly before the `faststream run` command. This allows for dynamic configuration at runtime.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/config/index.md#_snippet_3

LANGUAGE: Bash
CODE:
```
URL="amqp://guest:guest@localhost:5672" faststream run serve:app
```

----------------------------------------

TITLE: Publish Message with FastStream KafkaBroker's Unified Method
DESCRIPTION: This example shows how to publish a message to a Kafka topic using the `publish` method of the `KafkaBroker` instance. It supports sending Python primitives and Pydantic models as message content.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/Publisher/index.md#_snippet_1

LANGUAGE: python
CODE:
```
from pydantic import BaseModel

class MyPydanticModel(BaseModel):
    name: str

# Example usage:
await broker.publish({"msg": "Hello!"}, topic="test_topic")
await broker.publish("Hello!", topic="test_topic")
await broker.publish(1, topic="test_topic")
await broker.publish(True, topic="test_topic")
await broker.publish(b"Hello!", topic="test_topic")
await broker.publish(MyPydanticModel(name="John"), topic="test_topic")
```

----------------------------------------

TITLE: Protobuf Serialization Example in FastStream
DESCRIPTION: Demonstrates how to use the generated Protobuf class (`Person`) within a `FastStream` application to serialize and deserialize messages. It shows defining a publisher and a subscriber with a custom `decoder` and `encoder` for Protobuf messages.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/serialization/examples.md#_snippet_3

LANGUAGE: Python
CODE:
```
import asyncio

from faststream import FastStream, Logger
from faststream.kafka import KafkaBroker

from .message_pb2 import Person

broker = KafkaBroker("localhost:9092")
app = FastStream(broker)

@broker.publisher("in")
@broker.subscriber("in", decoder=Person.FromString)
async def handle_msg(msg: Person, logger: Logger) -> Person:
    logger.info(msg)
    return Person(name="John", age=25)


@app.on_startup
async def startup():
    await broker.start()
    await handle_msg(Person(name="John", age=25))


@app.on_shutdown
async def shutdown():
    await broker.close()
```

----------------------------------------

TITLE: Subscribe to Kafka Topics with an aiokafka.ConsumerRebalanceListener
DESCRIPTION: This example shows how to use the KafkaBroker().subscriber(...) method with an aiokafka.ConsumerRebalanceListener object. This new feature allows custom logic to be executed during consumer rebalancing events, enhancing control over Kafka consumer behavior.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_29

LANGUAGE: Python
CODE:
```
broker = KafkaBroker()

broker.subscriber(..., listener=MyRebalancer())
```

----------------------------------------

TITLE: Authenticate with SASLPlaintext and SSL/TLS in FastStream Redis
DESCRIPTION: The `SASLPlaintext` object is used for authentication in SASL plaintext mode, allowing you to provide a username and password. When combined with SSL/TLS, it provides both authentication and encrypted communication for FastStream Redis connections, enhancing overall security.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/security.md#_snippet_1

LANGUAGE: python
CODE:
```
from faststream.redis import RedisBroker
from faststream.security import SASLPlaintext
import ssl

broker = RedisBroker(
    host="localhost",
    port=6379,
    security=SASLPlaintext(
        username="user",
        password="password",
        ssl_context=ssl.create_default_context(),
    ),
)
```

----------------------------------------

TITLE: Configure NATS Subscriber for Concurrent Message Processing
DESCRIPTION: This snippet demonstrates how to configure a FastStream NATS subscriber to process multiple messages concurrently using the `max_workers` argument. By setting `max_workers` to a value greater than 1, a single subscriber can handle up to that many messages simultaneously, allowing for parallel processing and increased throughput per subject.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/includes/en/nats/scaling.md#_snippet_0

LANGUAGE: python
CODE:
```
@broker.subscriber(..., max_workers=10)
```

----------------------------------------

TITLE: Run FastStream App with Multiprocessing
DESCRIPTION: This command starts a FastStream application using the `run` subcommand and scales it across multiple worker processes, leveraging multiprocessing for improved performance and concurrency.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/cli/index.md#_snippet_3

LANGUAGE: shell
CODE:
```
faststream run serve:app --workers 2
```

----------------------------------------

TITLE: Docker Compose Configuration with Healthchecks
DESCRIPTION: This Docker Compose file defines a multi-service environment including RabbitMQ, Redis, PostgreSQL, and the FastStream application. It configures health checks for each service, ensuring that the application only starts accepting traffic once all its dependencies are healthy.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/healthcheks.md#_snippet_2

LANGUAGE: YAML
CODE:
```
services:
  rabbitmq:
    image: rabbitmq:3.8-management
    container_name: rabbitmq-local
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping"]

  redis:
    image: redis:7.2
    container_name: redis-local
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

  postgres:
    image: postgres:14
    container_name: postgres-local
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "user" ]

  app:
    build: .
    container_name: app-local
    command: bash -c "python main.py"
    ports:
      - "8000:8000"
    volumes:
      - ./main.py:/app/main.py
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/internal/ready"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 5s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
```

----------------------------------------

TITLE: Define FastStream Broker-Level Message Processing Middleware
DESCRIPTION: Defines `MyMiddleware` inheriting `BaseMiddleware` to wrap the entire message processing pipeline. It implements `on_receive` for pre-processing (e.g., logging) and `after_processed` for post-processing, ensuring `super()` calls for proper error handling.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/middlewares/index.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream import BaseMiddleware

class MyMiddleware(BaseMiddleware):
    async def on_receive(self):
        print(f"Received: {self.msg}")
        return await super().on_receive()

    async def after_processed(self, exc_type, exc_val, exc_tb):
        return await super().after_processed(exc_type, exc_val, exc_tb)
```

----------------------------------------

TITLE: Applying Dependencies to Asynchronous Functions with FastStream
DESCRIPTION: Demonstrates how the `@apply_types` decorator facilitates dependency injection for asynchronous Python functions, allowing both synchronous and asynchronous dependencies.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/dependencies/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
from faststream import Depends, apply_types

async def get_async_value() -> int:
    return 20

def get_sync_value() -> int:
    return 5

@apply_types
async def process_async_data(data: int, async_val: int = Depends(get_async_value), sync_val: int = Depends(get_sync_value)):
    return data + async_val + sync_val
```

----------------------------------------

TITLE: Full FastStream Redis RPC Example
DESCRIPTION: This comprehensive example combines all the components for setting up and utilizing Redis RPC with FastStream's RedisBroker, demonstrating the complete flow from broker initialization to defining subscribers and sending RPC requests across different Redis data types.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/rpc.md#_snippet_3

LANGUAGE: Python
CODE:
```
from faststream import FastStream
from faststream.redis import RedisBroker

broker = RedisBroker()
app = FastStream(broker)

@broker.subscriber(channel="test-channel")
async def handle_channel(msg: str) -> str:
    return msg

@broker.subscriber(list="test-list")
async def handle_list(msg: str) -> str:
    return msg

@broker.subscriber(stream="test-stream")
async def handle_stream(msg: str) -> str:
    return msg

@app.after_startup
async def test():
    # Channel RPC
    msg = await broker.publish("Hello, channel!", channel="test-channel", rpc=True)
    assert msg == "Hello, channel!"

    # List RPC
    msg = await broker.publish("Hello, list!", list="test-list", rpc=True, rpc_timeout=1)
    assert msg == "Hello, list!"

    # Stream RPC
    msg = await broker.publish("Hello, stream!", stream="test-stream", rpc=True)
    assert msg == "Hello, stream!"
```

----------------------------------------

TITLE: FastStream Kafka RPC Request Publication and Response Await
DESCRIPTION: This snippet shows how to send an RPC request using `broker.publish`. It generates a unique `correlation_id`, creates a `Future` object, and stores it in the `responses` context. The message is published to "echo-topic" with `reply_to="responses"` and the generated `correlation_id`. The code then awaits the `Future` to receive the response.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/howto/kafka/rpc.md#_snippet_2

LANGUAGE: python
CODE:
```
@app.after_startup
async def send_request(
    responses: Annotated[
        dict[str, Future[bytes]],
        Context("responses", initial=dict),
    ],
) -> None:
    correlation_id = str(uuid4())
    future = responses[correlation_id] = Future[bytes]()

    await broker.publish(
        "echo", "echo-topic",
        reply_to="responses",
        correlation_id=correlation_id,
    )

    data: bytes = await future
    assert data == b"echo"  # returned from echo
```

----------------------------------------

TITLE: Define FastStream Publisher with Decorator
DESCRIPTION: Example of defining a FastStream publisher using a decorator for different message brokers, demonstrating a common pattern for integrating publishing logic directly into functions.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/publishing/test.md#_snippet_0

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/kafka/object.py [ln:7-12] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/confluent/object.py [ln:7-12] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/rabbit/object.py [ln:7-12] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/nats/object.py [ln:7-12] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/redis/object.py [ln:7-12] !}
```

----------------------------------------

TITLE: Reuse FastStream Application Object with ASGI Routes
DESCRIPTION: This snippet demonstrates how to create a FastStream application object and expose it as an ASGI application. It shows how to define custom ASGI routes for liveness and readiness checks using `AsgiResponse` and `make_ping_asgi`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asgi.md#_snippet_8

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.nats import NatsBroker
from faststream.asgi import make_ping_asgi, AsgiResponse

broker = NatsBroker()

@get
async def liveness_ping(scope):
    return AsgiResponse(b"", status_code=200)

app = FastStream(broker).as_asgi(
    asgi_routes=[
        ("/liveness", liveness_ping),
        ("/readiness", make_ping_asgi(broker, timeout=5.0)),
    ],
    asyncapi_path="/docs",
)
```

----------------------------------------

TITLE: Declare Local Context with Scope Manager in FastStream
DESCRIPTION: Demonstrates setting a local context field using the `context.scope` context manager, ensuring the field is available only within the message processing scope for various brokers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/custom.md#_snippet_3

LANGUAGE: Python
CODE:
```
from faststream import FastStream, context
from faststream.kafka import KafkaBroker

broker = KafkaBroker("localhost:9092")
app = FastStream(broker)

@broker.subscriber("test-topic")
async def handle_message(msg: str):
    with context.scope("request_id", "12345"):
        # 'request_id' is available here
        print(f"Local context 'request_id' inside scope: {context.get('request_id')}")
    # 'request_id' is NOT available here
    print(f"Local context 'request_id' outside scope: {context.get('request_id')}")
```

----------------------------------------

TITLE: Install FastStream with Message Broker Support
DESCRIPTION: These commands demonstrate how to install the FastStream framework along with specific message broker integrations using pip. Each command includes the necessary extra dependencies to enable FastStream to interact with a chosen messaging system, such as Kafka (via AIOKafka or Confluent), RabbitMQ, NATS, or Redis.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/faststream.md#_snippet_0

LANGUAGE: sh
CODE:
```
pip install 'faststream[kafka]'
```

LANGUAGE: sh
CODE:
```
pip install 'faststream[confluent]'
```

LANGUAGE: sh
CODE:
```
pip install 'faststream[rabbit]'
```

LANGUAGE: sh
CODE:
```
pip install 'faststream[nats]'
```

LANGUAGE: sh
CODE:
```
pip install 'faststream[redis]'
```

----------------------------------------

TITLE: Define FastStream Subscriber-Level Middleware with consume_scope
DESCRIPTION: Defines `MyMiddleware` for subscriber-level processing, implementing `consume_scope`. This method intercepts the message just before the handler function, allowing for body patching or exception handling with a fallback return value.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/middlewares/index.md#_snippet_3

LANGUAGE: python
CODE:
```
from typing import Callable, Awaitable

from faststream import BaseMiddleware
from faststream.broker.message import StreamMessage

class MyMiddleware(BaseMiddleware):
    async def consume_scope(
        self,
        call_next: Callable[[Any], Awaitable[Any]],
        msg: StreamMessage[Any],
    ) -> Any:
        return await call_next(msg)
```

----------------------------------------

TITLE: Apply Broker-Level Middleware to FastStream Broker
DESCRIPTION: Demonstrates how to register `MyMiddleware` with a `Broker` instance. This applies the middleware globally to all messages processed by this broker.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/middlewares/index.md#_snippet_1

LANGUAGE: python
CODE:
```
Broker(middlewares=[MyMiddleware])
```

----------------------------------------

TITLE: Docker Compose Setup for OpenTelemetry Collector
DESCRIPTION: This `docker-compose.yaml` file defines a service to run the `opentelemetry-collector-contrib` Docker image. It configures the container to use the `otel.yaml` file as its configuration, mounting it from the local directory. The service exposes port `4317` to allow applications to send OTLP gRPC traces to the collector, facilitating the trace conversion and export process to Sentry.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/opentelemetry/sentry.md#_snippet_3

LANGUAGE: yaml
CODE:
```
services:
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: [ "--config=/etc/otel.yaml" ]
    volumes:
      - ./otel.yaml:/etc/otel.yaml
    ports:
      - "4317:4317"
```

----------------------------------------

TITLE: FastStream Broker Connection Health Check using ping()
DESCRIPTION: Illustrates the usage of the new `ping` method available on all FastStream brokers. This method allows checking the real-time connection status to the broker, which is particularly useful for Kubernetes probes and health checks.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_13

LANGUAGE: Python
CODE:
```
is_connected: bool = await broker.ping()
```

----------------------------------------

TITLE: Create Reusable Message Schemas with Pydantic BaseModel in FastStream
DESCRIPTION: To promote reusability and maintainability, message schemas can be defined as `pydantic.BaseModel` classes. This allows a single model to be used as a type annotation for messages across different subscribers and publishers, simplifying schema management.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/pydantic.md#_snippet_2

LANGUAGE: python
CODE:
```
from faststream import FastStream, Logger
from faststream.kafka import KafkaBroker
from pydantic import BaseModel, Field

class User(BaseModel):
    name: str = Field(
        ...,
        title="User Name",
        description="The name of the user",
        examples=["John Doe"]
    )
    age: int = Field(
        ...,
        ge=0,
        lt=150,
        description="The age of the user"
    )

broker = KafkaBroker("localhost:9092")

@broker.subscriber("test-topic")
async def handle_message(user: User, logger: Logger) -> None:
    logger.info(f"Received user: {user.name}, age: {user.age}")

@broker.publisher("output-topic")
async def publish_user(user: User) -> User:
    return user
```

LANGUAGE: python
CODE:
```
from faststream import FastStream, Logger
from faststream.confluent import ConfluentKafkaBroker
from pydantic import BaseModel, Field

class User(BaseModel):
    name: str = Field(
        ...,
        title="User Name",
        description="The name of the user",
        examples=["John Doe"]
    )
    age: int = Field(
        ...,
        ge=0,
        lt=150,
        description="The age of the user"
    )

broker = ConfluentKafkaBroker("localhost:9092")

@broker.subscriber("test-topic")
async def handle_message(user: User, logger: Logger) -> None:
    logger.info(f"Received user: {user.name}, age: {user.age}")

@broker.publisher("output-topic")
async def publish_user(user: User) -> User:
    return user
```

LANGUAGE: python
CODE:
```
from faststream import FastStream, Logger
from faststream.rabbitmq import RabbitBroker
from pydantic import BaseModel, Field

class User(BaseModel):
    name: str = Field(
        ...,
        title="User Name",
        description="The name of the user",
        examples=["John Doe"]
    )
    age: int = Field(
        ...,
        ge=0,
        lt=150,
        description="The age of the user"
    )

broker = RabbitBroker("amqp://guest:guest@localhost:5672/")

@broker.subscriber("test-queue")
async def handle_message(user: User, logger: Logger) -> None:
    logger.info(f"Received user: {user.name}, age: {user.age}")

@broker.publisher("output-queue")
async def publish_user(user: User) -> User:
    return user
```

LANGUAGE: python
CODE:
```
from faststream import FastStream, Logger
from faststream.nats import NatsBroker
from pydantic import BaseModel, Field

class User(BaseModel):
    name: str = Field(
        ...,
        title="User Name",
        description="The name of the user",
        examples=["John Doe"]
    )
    age: int = Field(
        ...,
        ge=0,
        lt=150,
        description="The age of the user"
    )

broker = NatsBroker("nats://localhost:4222")

@broker.subscriber("test-subject")
async def handle_message(user: User, logger: Logger) -> None:
    logger.info(f"Received user: {user.name}, age: {user.age}")

@broker.publisher("output-subject")
async def publish_user(user: User) -> User:
    return user
```

LANGUAGE: python
CODE:
```
from faststream import FastStream, Logger
from faststream.redis import RedisBroker
from pydantic import BaseModel, Field

class User(BaseModel):
    name: str = Field(
        ...,
        title="User Name",
        description="The name of the user",
        examples=["John Doe"]
    )
    age: int = Field(
        ...,
        ge=0,
        lt=150,
        description="The age of the user"
    )

broker = RedisBroker("redis://localhost:6379")

@broker.subscriber("test-channel")
async def handle_message(user: User, logger: Logger) -> None:
    logger.info(f"Received user: {user.name}, age: {user.age}")

@broker.publisher("output-channel")
async def publish_user(user: User) -> User:
    return user
```

----------------------------------------

TITLE: Integrate TelemetryMiddleware with FastStream Brokers
DESCRIPTION: Demonstrates how to add `TelemetryMiddleware` to various FastStream broker instances (AIOKafka, Confluent, RabbitMQ, NATS, Redis) to enable automatic tracing for message processing and distributed observability.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/opentelemetry/index.md#_snippet_2

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/opentelemetry/kafka_telemetry.py!}
```

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/opentelemetry/confluent_telemetry.py!}
```

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/opentelemetry/rabbit_telemetry.py!}
```

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/opentelemetry/nats_telemetry.py!}
```

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/opentelemetry/redis_telemetry.py!}
```

----------------------------------------

TITLE: Configure SASLPlaintext Authentication with SSL/TLS in FastStream Kafka
DESCRIPTION: The `SASLPlaintext` object enables SASL plaintext authentication, allowing the provision of a username and password for secure communication with FastStream Kafka brokers, typically combined with SSL/TLS encryption.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/security.md#_snippet_1

LANGUAGE: python
CODE:
```
from faststream.kafka import KafkaBroker
from faststream.security import SASLPlaintext
import ssl

# Configure SSL/TLS context (optional, but recommended with SASL)
ssl_context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
ssl_context.load_verify_locations("path/to/ca.pem")

# Create SASLPlaintext object
security = SASLPlaintext(
    username="your_username",
    password="your_password",
    ssl_context=ssl_context
)

# Initialize KafkaBroker with SASLPlaintext
broker = KafkaBroker("localhost:9092", security=security)

# Example usage:
@broker.subscriber("input_topic")
async def handle_message(msg: str):
    print(f"Received message: {msg}")
```

----------------------------------------

TITLE: Testing FastStream Lifespan Hooks with TestApp
DESCRIPTION: Demonstrates how to use `TestApp` as an async context manager to trigger and test `FastStream` application's `on_startup` and `on_shutdown` lifespan hooks within your test suite. This ensures that any setup or teardown logic defined in these hooks is properly executed and tested, simulating a real application lifecycle.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/lifespan/test.md#_snippet_0

LANGUAGE: Python
CODE:
```
import pytest
from faststream import FastStream
from faststream.kafka import KafkaBroker # For AIOKafka
from faststream.testing import TestApp

@pytest.mark.asyncio
async def test_app_lifespan_hooks():
    broker = KafkaBroker("localhost:9092")
    app = FastStream(broker)

    @app.on_startup
    async def on_startup_hook():
        # This hook will be triggered when TestApp starts
        print("App startup hook executed!")

    @app.on_shutdown
    async def on_shutdown_hook():
        # This hook will be triggered when TestApp shuts down
        print("App shutdown hook executed!")

    async with TestApp(app): # TestApp context triggers lifespan hooks
        # Your test logic here
        assert app.is_running
        print("App is running within TestApp context.")

    assert not app.is_running # App is shut down after context exit
    print("App is shut down after TestApp context.")
```

LANGUAGE: Python
CODE:
```
import pytest
from faststream import FastStream
from faststream.confluent import ConfluentBroker # For Confluent
from faststream.testing import TestApp

@pytest.mark.asyncio
async def test_app_lifespan_hooks():
    broker = ConfluentBroker("localhost:9092")
    app = FastStream(broker)

    @app.on_startup
    async def on_startup_hook():
        # This hook will be triggered when TestApp starts
        print("App startup hook executed!")

    @app.on_shutdown
    async def on_shutdown_hook():
        # This hook will be triggered when TestApp shuts down
        print("App shutdown hook executed!")

    async with TestApp(app): # TestApp context triggers lifespan hooks
        # Your test logic here
        assert app.is_running
        print("App is running within TestApp context.")

    assert not app.is_running # App is shut down after context exit
    print("App is shut down after TestApp context.")
```

LANGUAGE: Python
CODE:
```
import pytest
from faststream import FastStream
from faststream.rabbitmq import RabbitBroker # For RabbitMQ
from faststream.testing import TestApp

@pytest.mark.asyncio
async def test_app_lifespan_hooks():
    broker = RabbitBroker("amqp://guest:guest@localhost:5672/")
    app = FastStream(broker)

    @app.on_startup
    async def on_startup_hook():
        # This hook will be triggered when TestApp starts
        print("App startup hook executed!")

    @app.on_shutdown
    async def on_shutdown_hook():
        # This hook will be triggered when TestApp shuts down
        print("App shutdown hook executed!")

    async with TestApp(app): # TestApp context triggers lifespan hooks
        # Your test logic here
        assert app.is_running
        print("App is running within TestApp context.")

    assert not app.is_running # App is shut down after context exit
    print("App is shut down after TestApp context.")
```

LANGUAGE: Python
CODE:
```
import pytest
from faststream import FastStream
from faststream.nats import NatsBroker # For NATS
from faststream.testing import TestApp

@pytest.mark.asyncio
async def test_app_lifespan_hooks():
    broker = NatsBroker("nats://localhost:4222")
    app = FastStream(broker)

    @app.on_startup
    async def on_startup_hook():
        # This hook will be triggered when TestApp starts
        print("App startup hook executed!")

    @app.on_shutdown
    async def on_shutdown_hook():
        # This hook will be triggered when TestApp shuts down
        print("App shutdown hook executed!")

    async with TestApp(app): # TestApp context triggers lifespan hooks
        # Your test logic here
        assert app.is_running
        print("App is running within TestApp context.")

    assert not app.is_running # App is shut down after context exit
    print("App is shut down after TestApp context.")
```

LANGUAGE: Python
CODE:
```
import pytest
from faststream import FastStream
from faststream.redis import RedisBroker # For Redis
from faststream.testing import TestApp

@pytest.mark.asyncio
async def test_app_lifespan_hooks():
    broker = RedisBroker("redis://localhost:6379")
    app = FastStream(broker)

    @app.on_startup
    async def on_startup_hook():
        # This hook will be triggered when TestApp starts
        print("App startup hook executed!")

    @app.on_shutdown
    async def on_shutdown_hook():
        # This hook will be triggered when TestApp shuts down
        print("App shutdown hook executed!")

    async with TestApp(app): # TestApp context triggers lifespan hooks
        # Your test logic here
        assert app.is_running
        print("App is running within TestApp context.")

    assert not app.is_running # App is shut down after context exit
    print("App is shut down after TestApp context.")
```

----------------------------------------

TITLE: Broadcasting Messages with Multiple Publisher Decorators
DESCRIPTION: This example demonstrates how to use multiple `@broker.publisher` decorators on a single handler function. When a message is processed by the subscriber, the function's return value is broadcasted (sent as a copy) to all specified output topics or channels. This is useful for scenarios where a single processing outcome needs to be distributed to multiple downstream consumers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/publishing/decorator.md#_snippet_1

LANGUAGE: python
CODE:
```
@broker.subscriber("in")
@broker.publisher("first-out")
@broker.publisher("second-out")
async def handle(msg) -> str:
    return "Response"
```

----------------------------------------

TITLE: Accessing FastStream Broker Object using FastAPI Depends
DESCRIPTION: Shows how to inject the FastStream broker object into FastAPI endpoints or dependencies using `fastapi.Depends`. This allows for flexible access to the broker across different parts of the application.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/fastapi/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/kafka/depends.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/confluent/depends.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/rabbit/depends.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/nats/depends.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/redis/depends.py !}
```

----------------------------------------

TITLE: Complete FastStream Kafka Batch Consuming Example
DESCRIPTION: A comprehensive example demonstrating how to set up a FastStream application for batch message consumption from a Kafka topic. This includes the full application structure, broker configuration, message model, the batch subscriber, and the consuming function.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/Subscriber/batch_subscriber.md#_snippet_2

LANGUAGE: Python
CODE:
```
from faststream import FastStream, KafkaBroker
from pydantic import BaseModel
from typing import List

broker = KafkaBroker("localhost:9092")
app = FastStream(broker)

class Message(BaseModel):
    value: str

@broker.subscriber("test_batch", batch=True)
async def handle_batch(msg: List[Message]):
    for m in msg:
        print(f"Received: {m.value}")
    print(f"Processed batch of {len(msg)} messages")

@app.on_startup
async def startup():
    await broker.connect()

@app.on_shutdown
async def shutdown():
    await broker.disconnect()
```

----------------------------------------

TITLE: Interrupt FastStream Message Processing with AckMessage or NackMessage
DESCRIPTION: This snippet illustrates how to interrupt message processing at any point in the call stack by raising `faststream.exceptions.AckMessage` or `faststream.exceptions.NackMessage`. Raising `AckMessage` immediately acknowledges the message, while `NackMessage` prevents the commit, allowing for immediate control over message status without completing the handler function.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/ack.md#_snippet_2

LANGUAGE: Python
CODE:
```
from faststream.exceptions import AckMessage, NackMessage

@broker.subscriber("test")
async def handler_with_interrupt(body: str):
    if "error" in body:
        raise NackMessage()
    elif "success" in body:
        raise AckMessage()
    # Further processing
```

----------------------------------------

TITLE: Create Kafka Consumer Function with @broker.subscriber
DESCRIPTION: Defines an asynchronous function decorated with `@broker.subscriber` to listen for messages on the 'hello_world' Kafka topic. The function's typed argument (`msg: HelloWorld`) automatically handles message parsing based on the defined Pydantic model.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/confluent/Subscriber/index.md#_snippet_4

LANGUAGE: python
CODE:
```
@broker.subscriber("hello_world")
async def on_hello_world(msg: HelloWorld):
    print(f"Received message: {msg.name} - {msg.message}")
```

----------------------------------------

TITLE: Sending a Blocking RPC Request with FastStream NATS
DESCRIPTION: Demonstrates how to send a synchronous RPC request over NATS using `broker.request`. This method allows you to publish a message to a subject and immediately await its response, mimicking a blocking call similar to common HTTP request libraries.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/rpc.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream.nats import NatsMessage

msg: NatsMessage = await broker.request("Hello, NATS!", subject="test")
```

----------------------------------------

TITLE: Integrating FastStream with FastAPI using StreamRouter
DESCRIPTION: FastStream can be seamlessly integrated into a FastAPI application as a plugin. By importing a StreamRouter, message handlers can be declared using `@router.subscriber(...)` and `@router.publisher(...)` decorators. When used this way, FastStream leverages FastAPI's dependency and serialization system, allowing the use of FastAPI tools like `Depends` and `BackgroundTasks`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/faststream.md#_snippet_7

LANGUAGE: Python
CODE:
```
Placeholder for Python code from docs_src/integrations/fastapi/kafka/base.py
```

LANGUAGE: Python
CODE:
```
Placeholder for Python code from docs_src/integrations/fastapi/confluent/base.py
```

LANGUAGE: Python
CODE:
```
Placeholder for Python code from docs_src/integrations/fastapi/rabbit/base.py
```

LANGUAGE: Python
CODE:
```
Placeholder for Python code from docs_src/integrations/fastapi/nats/base.py
```

LANGUAGE: Python
CODE:
```
Placeholder for Python code from docs_src/integrations/fastapi/redis/base.py
```

----------------------------------------

TITLE: Integrate FastStream RedisRouter with FastAPI Context
DESCRIPTION: This Python code demonstrates how to integrate a FastStream RedisRouter with a FastAPI application, leveraging FastAPI's lifespan context. It sets up a Redis subscriber that logs incoming messages using FastStream's Logger, ensuring proper lifecycle management within the FastAPI framework.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_49

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from faststream.redis.fastapi import RedisRouter, Logger

router = RedisRouter()

@router.subscriber("test")
async def handler(msg, logger: Logger):
    logger.info(msg)

app = FastAPI(lifespan=router.lifespan_context)
app.include_router(router)
```

----------------------------------------

TITLE: Integrate FastStream with Litestar
DESCRIPTION: This snippet demonstrates how to integrate FastStream with the Litestar framework. It shows how to initialize the FastStream broker at application startup and close it gracefully during shutdown, leveraging Litestar's lifecycle hooks.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/frameworks/index.md#_snippet_1

LANGUAGE: python
CODE:
```
{!> docs_src/integrations/http_frameworks_integrations/litestar.py !}
```

----------------------------------------

TITLE: FastStream Consumer with Django ORM Access (CLI Entrypoint)
DESCRIPTION: Illustrates how to configure and initialize Django (`django.setup()`) in a `serve_faststream.py` file, allowing a FastStream consumer (using RabbitMQ) to access the Django ORM, including asynchronous ORM queries.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/django/index.md#_snippet_9

LANGUAGE: python
CODE:
```
# serve_faststream.py
# ruff: noqa: E402
###############################################################################
import os

import django

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "app.settings")
django.setup()
# These lines are necessary to set up Django, call them before any Django Related imports.
###############################################################################
from django.contrib.auth.models import User  # This line must be after django.setup()

from faststream import FastStream
from faststream.rabbit import RabbitBroker


broker = RabbitBroker("amqp://guest:guest@localhost:5672")

@broker.subscriber("demo")
async def faststream_django_orm_demo_handler(message: str):
    """
    This demonstrates how to access Django ORM from within a FastStream consumer.
    """
    qs = User.objects.all()
    async for user in qs:  # async django ORM is accessible
        print(user)
    print(message)

app = FastStream(broker)
```

----------------------------------------

TITLE: Declaring RabbitMQ Queues and Exchanges with FastStream
DESCRIPTION: FastStream subscribers automatically declare RabbitMQ objects, but manual declaration is possible using `RabbitBroker`. This snippet demonstrates how to declare queues and exchanges using `declare_queue` and `declare_exchange` methods, which return low-level aio-pika robust objects. These methods are idempotent, ensuring objects are created only once.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/declare.md#_snippet_0

LANGUAGE: Python
CODE:
```
{! docs_src/rabbit/declare.py !}
```

----------------------------------------

TITLE: Manually Acknowledge Redis Stream Messages in FastStream
DESCRIPTION: This snippet demonstrates how to explicitly control message acknowledgement in FastStream for Redis streams. It shows how to use `msg.ack(redis)` to mark a message as processed and `msg.nack()` to indicate a processing failure, allowing for potential reprocessing by the same or another consumer.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/streams/ack.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream.redis.annotations import RedisMessage, Redis

# Setup broker and faststream app
...

@broker.subscriber(StreamSub("test-stream", group="test-group", consumer="1"))
async def base_handler(body: dict, msg: RedisMessage, redis: Redis):
    # Process the message
    ...

    # Manually acknowledge the message
    await msg.ack(redis)
    # or, if processing fails and you want to reprocess later
    await msg.nack()
```

----------------------------------------

TITLE: Creating and Using a Reusable FastStream Publisher Object
DESCRIPTION: Demonstrates how to create and use a reusable Publisher object in FastStream for direct message publication across various brokers. This method provides flexibility for sending messages to different outputs and integrates with FastStream's context.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/publishing/direct.md#_snippet_0

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/kafka/direct.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/confluent/direct.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/rabbit/direct.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/nats/direct.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/redis/direct.py !}
```

----------------------------------------

TITLE: Extracting Correlation ID with FastStream Context (Python)
DESCRIPTION: This snippet illustrates how to define a custom type `CorrelationId` using `Annotated` and `Context` to automatically inject the `message.correlation_id` into a subscriber function's argument. This pattern simplifies accessing message-specific metadata. The Python 3.9+ version uses `types.Annotated`, while the Python 3.6+ version requires `typing_extensions.Annotated`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/includes/message/annotated.md#_snippet_0

LANGUAGE: Python 3.9+
CODE:
```
from types import Annotated
from faststream import Context

CorrelationId = Annotated[str, Context("message.correlation_id")]

@broker.subscriber("test")
async def base_handler(
    body: str,
    cor_id: CorrelationId,
):
    print(cor_id)
```

LANGUAGE: Python 3.6+
CODE:
```
from typing_extensions import Annotated
from faststream import Context

CorrelationId = Annotated[str, Context("message.correlation_id")]

@broker.subscriber("test")
async def base_handler(
    body: str,
    cor_id: CorrelationId,
):
    print(cor_id)
```

----------------------------------------

TITLE: Interrupt FastStream Message Processing with Ack/Nack Exceptions
DESCRIPTION: This example illustrates how to instantly halt message processing in FastStream and control its acknowledgement status by raising specific exceptions. Raising `AckMessage` acknowledges the message immediately, while `NackMessage` prevents acknowledgement, potentially leading to its subsequent reprocessing by the same or a different consumer.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/streams/ack.md#_snippet_1

LANGUAGE: python
CODE:
```
from faststream.redis.annotations import RedisMessage, Redis
from faststream.exceptions import AckMessage, NackMessage

# Setup broker and faststream app
# For example:
# from faststream import FastStream, RedisBroker
# broker = RedisBroker("redis://localhost:6379")
# app = FastStream(broker)

@broker.subscriber(StreamSub("test-stream", group="test-group", consumer="1"))
async def error_handler(body: dict, msg: RedisMessage, redis: Redis):
    # Simulate some processing logic
    if body.get("error_condition"): # Example condition to trigger interrupt
        print("Error detected, acknowledging message and stopping processing.")
        raise AckMessage() # Acknowledge and stop processing
    elif body.get("reprocess_condition"): # Example condition to trigger nack
        print("Reprocessing required, nacking message.")
        raise NackMessage() # Nack and allow reprocessing
    else:
        print("Message processed successfully without interruption.")
```

----------------------------------------

TITLE: Assert Published Message Content
DESCRIPTION: Shows how to verify the content of messages published by a FastStream publisher using the publisher.mock.assert_called_once_with() method. The TestBroker captures outgoing messages for inspection.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/publishing/test.md#_snippet_3

LANGUAGE: Python
CODE:
```
publisher.mock.assert_called_once_with("Hi!")
```

----------------------------------------

TITLE: Configure Graceful Shutdown Timeout for FastStream Broker
DESCRIPTION: This snippet demonstrates how to configure a `graceful_timeout` for the FastStream `Broker` instance. This setting allows the application to wait for a specified duration (e.g., 30 seconds) for consumed messages to be processed correctly before initiating a shutdown, ensuring message processing completion during application termination.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_50

LANGUAGE: Python
CODE:
```
Broker(graceful_timeout=30.0)
```

----------------------------------------

TITLE: Configure FastStream Subscriber for Indefinite Retries
DESCRIPTION: Setting the `retry` flag to `True` in a FastStream subscriber causes the message to be 'nack'ed and placed back in the queue each time an error occurs. This allows the message to be processed again by the same or another consumer indefinitely.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/ack.md#_snippet_1

LANGUAGE: Python
CODE:
```
@broker.subscriber("test", retry=True)  # try again indefinitely
async def base_handler(body: str):
    ...
```

----------------------------------------

TITLE: Sending a Request to an RPC Subscriber
DESCRIPTION: This example shows how a client sends a request to an RPC subscriber using `broker.request` and asserts the received response, demonstrating the client-side interaction for an RPC call.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/rpc.md#_snippet_5

LANGUAGE: Python
CODE:
```
from faststream.redis import RedisMessage

msg: RedisMessage = await broker.request(
    "Hello, Redis!",
    channel="test-channel",
)
assert await msg.decode() == "Received: Hello, Redis!"
```

----------------------------------------

TITLE: Implement NATS JetStream Key-Value Store Watching and Publishing in FastStream
DESCRIPTION: This example illustrates how to use FastStream's new NATS Key-Value store features. It sets up a subscriber that watches a specific key within a bucket and an `after_startup` hook to put a value into that key-value store. This enables reactive processing of key-value updates.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_16

LANGUAGE: python
CODE:
```
from faststream import FastStream, Logger
from faststream.nats import NatsBroker

broker = NatsBroker()
app = FastStream(broker)

@broker.subscriber("some-key", kv_watch="bucket")
async def handler(msg: int, logger: Logger):
    logger.info(msg)

@app.after_startup
async def test():
    kv = await broker.key_value("bucket")
    await kv.put("some-key", b"1")
```

----------------------------------------

TITLE: Accessing FastStream Broker Object from FastAPI Application State
DESCRIPTION: Demonstrates how to retrieve the FastStream broker object from the FastAPI application's `request.state`. This method is available if the `StreamRouter`'s `setup_state` option is not explicitly disabled.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/fastapi/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import Request

@app.get("/")
def main(request: Request):
    broker = request.state.broker
```

----------------------------------------

TITLE: Define Pydantic Message Structure for Kafka
DESCRIPTION: This snippet defines a Pydantic `BaseModel` for the `HelloWorld` message, specifying its expected fields (`msg` and `name`). This structure is used by FastStream to automatically parse incoming Kafka messages into a structured format.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/Subscriber/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
class HelloWorld(BaseModel):
    msg: str
    name: str
```

----------------------------------------

TITLE: Sending Redis RPC Messages and Awaiting Responses
DESCRIPTION: This example shows how to send RPC messages using `broker.publish` with the `rpc=True` flag for Redis channels, lists, and streams. It also demonstrates how to set a `rpc_timeout` for awaiting responses, ensuring a synchronous request-response flow.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/rpc.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.after_startup
async def test():
    # Channel RPC
    msg = await broker.publish("Hello, channel!", channel="test-channel", rpc=True)
    assert msg == "Hello, channel!"

    # List RPC
    msg = await broker.publish("Hello, list!", list="test-list", rpc=True, rpc_timeout=1)
    assert msg == "Hello, list!"

    # Stream RPC
    msg = await broker.publish("Hello, stream!", stream="test-stream", rpc=True)
    assert msg == "Hello, stream!"
```

----------------------------------------

TITLE: Set Up Function for Redis Stream Data Processing and Publishing
DESCRIPTION: Implement an asynchronous function decorated with both `@broker.subscriber` and `@broker.publisher`. This function consumes messages from an 'input-stream', processes them, and publishes the transformed result to an 'output-stream', creating a seamless data pipeline within Redis streams.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/streams/publishing.md#_snippet_3

LANGUAGE: python
CODE:
```
@broker.subscriber("input-stream")
@broker.publisher("output-stream")
async def process_message(msg: Message) -> Message:
    print(f"Received: {msg.content}")
    return Message(id=msg.id + 1, content=f"Processed: {msg.content}")
```

----------------------------------------

TITLE: Define Basic Custom Message Parser Signature in FastStream
DESCRIPTION: This snippet shows the basic signature for a custom message parser function in FastStream. The parser takes a raw message object from a specific broker framework (e.g., AIOKafka, Confluent, RabbitMQ, NATS, Redis) and returns a FastStream-specific message object (e.g., KafkaMessage, RabbitMessage, NatsMessage, RedisMessage). This function is responsible for converting the raw bytes into a structured `StreamMessage`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/serialization/parser.md#_snippet_0

LANGUAGE: Python
CODE:
```
from aiokafka import ConsumerRecord
from faststream.kafka import KafkaMessage

def parser(msg: ConsumerRecord) -> KafkaMessage:
    ...
```

LANGUAGE: Python
CODE:
```
from confluent_kafka import Message
from faststream.confluent import KafkaMessage

def parser(msg: Message) -> KafkaMessage:
    ...
```

LANGUAGE: Python
CODE:
```
from aio_pika import IncomingMessage
from faststream.rabbit import RabbitMessage

def parser(msg: IncomingMessage) -> RabbitMessage:
    ...
```

LANGUAGE: Python
CODE:
```
from nats.aio.msg import Msg
from faststream.nats import NatsMessage

def parser(msg: Msg) -> NatsMessage:
    ...
```

LANGUAGE: Python
CODE:
```
from faststream.redis import RedisMessage
from faststream.redis.message import PubSubMessage

def parser(msg: PubSubMessage) -> RedisMessage:
    ...
```

----------------------------------------

TITLE: Direct Access to FastStream Broker Object in FastAPI
DESCRIPTION: Illustrates how to directly access the broker object embedded within the `StreamRouter` to send messages to the message queue. This method provides immediate access to broker functionalities.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/fastapi/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/kafka/send.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/confluent/send.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/rabbit/send.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/nats/send.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/redis/send.py !}
```

----------------------------------------

TITLE: Declaring Subscriber Dependencies with FastStream Parameter
DESCRIPTION: Shows the more suitable way to declare dependencies for a FastStream subscriber using the `dependencies` parameter, improving readability and maintainability.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/dependencies/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
@broker.subscriber("test", dependencies=[Depends(...)])
def method(): ...
```

----------------------------------------

TITLE: Inject Custom Logger into FastStream Handler
DESCRIPTION: Shows how to receive the custom `Logger` instance directly as a type-hinted parameter within a FastStream broker subscriber handler function, enabling handler-specific logging with the configured logger.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/logging.md#_snippet_8

LANGUAGE: Python
CODE:
```
from faststream import Logger

@broker.subscriber(...)
async def handler(
    msg,
    logger: Logger,
):
    logger.info(msg)
```

----------------------------------------

TITLE: Consume and Modify FastStream Baggage with CurrentBaggage
DESCRIPTION: This example illustrates how to interact with OpenTelemetry Baggage at the consumption level using FastStream's CurrentBaggage object. It shows how baggage is automatically injected, and how to retrieve, remove, set, and clear baggage items across a chain of message handlers, demonstrating context modification and propagation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/opentelemetry/baggage.md#_snippet_1

LANGUAGE: python
CODE:
```
from faststream.opentelemetry import CurrentBaggage

@broker.subscriber("first")
@broker.publisher("second")
async def response_handler_first(msg: str, baggage: CurrentBaggage):
    print(baggage.get_all())  # {'hello': 'world'}
    baggage.remove("hello")
    baggage.set("user-id", 1)
    baggage.set("request-id", "UUID")
    print(baggage.get("user-id"))  # 1
    return msg


@broker.subscriber("second")
@broker.publisher("third")
async def response_handler_second(msg: str, baggage: CurrentBaggage):
    print(baggage.get_all())  # {'user-id': '1', 'request-id': 'UUID'}
    baggage.clear()
    return msg


@broker.subscriber("third")
async def response_handler_third(msg: str, baggage: CurrentBaggage):
    print(baggage.get_all())  # {}
```

----------------------------------------

TITLE: RabbitMQ Topic Exchange Full Example
DESCRIPTION: This snippet provides a complete example demonstrating the setup and usage of a RabbitMQ Topic Exchange. It includes the declaration of exchanges and queues, consumer subscriptions, and the logic for message publishing and distribution.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/examples/topic.md#_snippet_0

LANGUAGE: Python
CODE:
```
{! docs_src/rabbit/subscription/topic.py !}
```

----------------------------------------

TITLE: Configure Multiple FastStream Routers within FastAPI Integration
DESCRIPTION: This demonstrates how to use multiple FastStream routers within a FastAPI application, similar to how regular HTTP routers are managed. It shows how to include regular FastStream routers into the FastAPI integration, allowing for clear logic separation and endpoint reuse across your application.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/fastapi/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/kafka/router.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/confluent/router.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/rabbit/router.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/nats/router.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/redis/router.py !}
```

----------------------------------------

TITLE: Complete FastStream NATS Direct Subject Application
DESCRIPTION: A comprehensive FastStream application demonstrating NATS Direct Subject routing. This example includes setting up the NATS broker, defining multiple consumers with queue groups for load balancing, and publishing messages to different subjects to illustrate message distribution.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/examples/direct.md#_snippet_1

LANGUAGE: python
CODE:
```
from faststream import FastStream, NatsBroker

broker = NatsBroker("nats://localhost:4222")

@broker.handler("test-subj-1")
async def handler1(msg: str):
    print(f"Handler 1 received: {msg}")

@broker.handler("test-subj-1", queue="test-queue")
async def handler2(msg: str):
    print(f"Handler 2 received: {msg}")

@broker.handler("test-subj-2")
async def handler3(msg: str):
    print(f"Handler 3 received: {msg}")

# Message distribution part
await broker.publish("1", subject="test-subj-1")
await broker.publish("2", subject="test-subj-1")
await broker.publish("3", subject="test-subj-2")
```

----------------------------------------

TITLE: Publishing a message with FastStream NatsBroker
DESCRIPTION: Demonstrates how to send a message to a NATS subject using the FastStream NatsBroker's publish method within an asynchronous context.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/publishing/index.md#_snippet_0

LANGUAGE: python
CODE:
```
import asyncio
from faststream.nats import NatsBroker

async def pub():
    async with NatsBroker() as broker:
        await broker.publish(
            "Hi!",
            subject="test",
        )

asyncio.run(pub())
```

----------------------------------------

TITLE: Run FastStream Application Programmatically
DESCRIPTION: Python code demonstrating how to manually start and run a FastStream application as a standard asynchronous function, useful for integrating FastStream into existing async frameworks or custom scripts.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/index.md#_snippet_7

LANGUAGE: python
CODE:
```
import asyncio

async def main():
    app = FastStream(...)
    await app.run()  # blocking method

if __name__ == "__main__":
    asyncio.run(main())
```

----------------------------------------

TITLE: Interrupt FastStream Message Processing with Exceptions
DESCRIPTION: To immediately interrupt message processing at any point in the call stack and acknowledge, nack, or reject the message, FastStream provides custom exceptions: `AckMessage`, `NackMessage`, and `RejectMessage`. Raising one of these exceptions will cause FastStream to perform the corresponding acknowledgement action and stop further processing of the current message.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/ack.md#_snippet_4

LANGUAGE: Python
CODE:
```
from faststream import FastStream, RabbitBroker
from faststream.exceptions import AckMessage, NackMessage, RejectMessage

broker = RabbitBroker("amqp://guest:guest@localhost:5672/")
app = FastStream(broker)

@broker.subscriber("test_queue")
async def handle_message(message: str):
    if "ack" in message:
        raise AckMessage()
    elif "nack" in message:
        raise NackMessage()
    elif "reject" in message:
        raise RejectMessage()
    print(f"Processed: {message}")
```

----------------------------------------

TITLE: Specify .env File for Application Startup
DESCRIPTION: Commands demonstrating how to explicitly choose which `.env` file to use when starting a FastStream application or running tests. This is done by setting the `ENV` environment variable, allowing for easy switching between different configuration environments (e.g., local, production, test).
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/config/index.md#_snippet_6

LANGUAGE: Bash
CODE:
```
ENV=.local.env faststream run serve:app
ENV=.production.env faststream run serve:app
ENV=.test.env pytest
```

----------------------------------------

TITLE: FastStream In-Memory Testing with TestClient
DESCRIPTION: Explains how to use FastStream's `TestClient` for efficient in-memory testing of message handlers, eliminating the need for a real message broker. It acts as an async context manager, routing published messages internally without external dependencies.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/test.md#_snippet_2

LANGUAGE: Python
CODE:
```
// External file: docs_src/getting_started/subscription/kafka/testing.py [ln:1-4,8-12]
```

LANGUAGE: Python
CODE:
```
// External file: docs_src/getting_started/subscription/confluent/testing.py [ln:1-4,8-12]
```

LANGUAGE: Python
CODE:
```
// External file: docs_src/getting_started/subscription/rabbit/testing.py [ln:1-4,8-12]
```

LANGUAGE: Python
CODE:
```
// External file: docs_src/getting_started/subscription/nats/testing.py [ln:1-4,8-12]
```

LANGUAGE: Python
CODE:
```
// External file: docs_src/getting_started/subscription/redis/testing.py [ln:1-4,8-12]
```

----------------------------------------

TITLE: Complete `RPCWorker` Class Definition with Lifecycle Methods
DESCRIPTION: Provides the full `RPCWorker` class definition, including `__init__`, `start`, `stop`, `_handle_responses`, and `request` methods. This comprehensive example shows how to manage the worker's entire lifecycle for Kafka RPC.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/howto/kafka/rpc.md#_snippet_8

LANGUAGE: python
CODE:
```
from uuid import uuid4
from asyncio import Future, wait_for

from faststream.types import SendableMessage
from faststream.kafka import KafkaMessage

class RPCWorker:
    responses: dict[str, Future[bytes]]

    def __init__(self, broker: KafkaBroker, reply_topic: str) -> None:
        self.responses = {}
        self.broker = broker
        self.reply_topic = reply_topic

        self.subscriber = broker.subscriber(reply_topic)
        self.subscriber(self._handle_responses)

    async def start(self) -> None:
        self.broker.setup_subscriber(self.subscriber)
        await self.subscriber.start()

    async def stop(self) -> None:
        await self.subscriber.close()

    def _handle_responses(self, msg: KafkaMessage) -> None:
        if (future := self.responses.pop(msg.correlation_id, None)):
            future.set_result(msg.body)

    async def request(
        self,
        data: SendableMessage,
        topic: str,
        timeout: float = 10.0,
    ) -> bytes:
        correlation_id = str(uuid4())
        future = self.responses[correlation_id] = Future[bytes]()

        await broker.publish(
            data, topic,
            reply_to=self.reply_topic,
            correlation_id=correlation_id,
        )

        try:
            response: bytes = await wait_for(future, timeout=timeout)
        except TimeoutError:
            self.responses.pop(correlation_id, None)
            raise
        else:
            return response
```

----------------------------------------

TITLE: Connecting to Kafka and Processing Messages with FastStream
DESCRIPTION: This example demonstrates how to initialize a FastStream KafkaBroker instance, define a message processing function, and connect it to Kafka topics using `@broker.subscriber` and `@broker.publisher` decorators. It illustrates a basic message flow from an 'in_topic' to an 'out_topic', showcasing FastStream's simplified approach to Kafka integration.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
from faststream import FastStream
from faststream.kafka import KafkaBroker

broker = KafkaBroker("localhost:9092")
app = FastStream(broker)

@broker.subscriber("in_topic")
@broker.publisher("out_topic")
async def handle_message(message: str) -> str:
    print(f"Received message: {message}")
    return f"Processed: {message}"
```

----------------------------------------

TITLE: Testing FastStream Handlers as Regular Functions
DESCRIPTION: Illustrates how a FastStream message handler can be tested like a standard asynchronous Python function using `pytest.mark.asyncio`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/test.md#_snippet_1

LANGUAGE: Python
CODE:
```
@pytest.mark.asyncio
async def test_handler():
    await handle("John", 1)
```

----------------------------------------

TITLE: Run FastStream Pytest Tests Excluding Broker Dependencies
DESCRIPTION: Executes Pytest tests that do not require external message broker instances (RabbitMQ, Kafka, NATS, Redis, Confluent) to be running. This is useful for isolated testing environments.
SOURCE: https://github.com/ag2ai/faststream/blob/main/CONTRIBUTING.md#_snippet_7

LANGUAGE: bash
CODE:
```
pytest -m 'not rabbit and not kafka and not nats and not redis and not confluent'
```

----------------------------------------

TITLE: Running FastStream Application via CLI
DESCRIPTION: Provides the command-line instruction to start a FastStream application, specifying the entry point module and application instance.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/django/index.md#_snippet_10

LANGUAGE: bash
CODE:
```
faststream run serve_faststream:app
```

----------------------------------------

TITLE: Execute FastStream application tests with pytest
DESCRIPTION: This command runs all tests located in the `tests/` directory using `pytest`, ensuring that code changes are validated and the application functions as expected.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/template/index.md#_snippet_5

LANGUAGE: bash
CODE:
```
pytest
```

----------------------------------------

TITLE: Sending a Blocking RPC Request over RabbitMQ
DESCRIPTION: Demonstrates how to send a synchronous RPC request over RabbitMQ using FastStream's `broker.request` method. It leverages RabbitMQ's Direct Reply-To feature, eliminating the need for a separate response queue and providing a simple, `requests`-like syntax.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/rpc.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream.rabbit import RabbitMessage

msg: RabbitMessage = await broker.request("Hello, RabbitMQ!", queue="test")
```

----------------------------------------

TITLE: Initialize and Propagate FastStream Baggage
DESCRIPTION: This snippet demonstrates how to initialize OpenTelemetry Baggage in FastStream by creating a Baggage object with custom key-value pairs and converting it into headers for message propagation. This allows context to be passed across service boundaries.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/opentelemetry/baggage.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream.opentelemetry import Baggage

headers = Baggage({"hello": "world"}).to_headers()
await broker.publish("hello", "first", headers=headers)
```

----------------------------------------

TITLE: Return FastStream Response Object for Custom Message Parameters
DESCRIPTION: This snippet demonstrates how to return a `Response` object from a FastStream handler. This allows users to set specific outgoing message parameters such as the body and headers, providing more control over the message sent back to the broker. It requires importing the `Response` class from `faststream`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_15

LANGUAGE: python
CODE:
```
from faststream import Response

@broker.subscriber("in")
@broker.subscriber("out")
async def handler():
    return Response(body=b"", headers={})
```

----------------------------------------

TITLE: Install FastStream with Broker-Specific Dependencies
DESCRIPTION: This snippet demonstrates how to install FastStream using pip, specifying the desired message broker as an extra dependency. Users can choose between Kafka, RabbitMQ, NATS, or Redis support based on their project requirements. This ensures that only necessary dependencies are installed.
SOURCE: https://github.com/ag2ai/faststream/blob/main/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
pip install 'faststream[kafka]'
# or
pip install 'faststream[rabbit]'
# or
pip install 'faststream[nats]'
# or
pip install 'faststream[redis]'
```

----------------------------------------

TITLE: Accessing Specific Message Fields using FastStream Context
DESCRIPTION: This example illustrates how to use FastStream's `Context` feature to directly inject specific message fields, such as headers, into a subscriber function's arguments. This approach simplifies access by allowing you to specify the desired field path, avoiding the need to access the full message object.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/message.md#_snippet_2

LANGUAGE: python
CODE:
```
from faststream import Context

@broker.subscriber("test")
async def base_handler(
    body: str,
    headers: str = Context("message.headers"),
):
    print(headers)
```

----------------------------------------

TITLE: Publishing a Basic Message with FastStream RabbitBroker
DESCRIPTION: Demonstrates how to publish a simple string message to a specified queue and exchange using `RabbitBroker.publish`. It shows the basic asynchronous setup and execution for sending a message.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/publishing.md#_snippet_0

LANGUAGE: python
CODE:
```
import asyncio
from faststream.rabbit import RabbitBroker

async def pub():
    async with RabbitBroker() as broker:
        await broker.publish(
            "Hi!",
            queue="test",
            exchange="test"
        )

asyncio.run(pub())
```

----------------------------------------

TITLE: Using FastStream Subscriber Object for Filtering
DESCRIPTION: Demonstrates the new behavior where `broker.subscriber()` and `router.subscriber()` functions return a `Subscriber` object. This object can then be used to register handlers, including applying filters directly to the subscriber instance, which is the new preferred syntax.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_38

LANGUAGE: python
CODE:
```
subscriber = broker.subscriber("test")

@subscriber(filter = lambda msg: msg.content_type == "application/json")
async def handler(msg: dict[str, Any]):
    ...

@subscriber()
async def handler(msg: dict[str, Any]):
    ...
```

----------------------------------------

TITLE: FastStream Confluent KafkaBroker Connection Example
DESCRIPTION: This example outlines the process of establishing a connection to Kafka using FastStream's KafkaBroker module. It involves initializing the broker, defining message processing logic, and decorating the function to subscribe to an input topic and publish to an output topic, simplifying message routing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/confluent/index.md#_snippet_1

LANGUAGE: python
CODE:
```
{! docs_src/index/confluent/basic.py!}
```

----------------------------------------

TITLE: Include Broker Router into Main FastStream Broker
DESCRIPTION: This snippet shows the final step of integrating a configured `BrokerRouter` into the main `FastStream` application's broker. This makes all handlers and publishers defined on the router active within the application's message flow.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/routers/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
broker.include_router(router)
```

----------------------------------------

TITLE: basic.py
DESCRIPTION: An example Python application using FastStream that consumes data from a topic, increments the value, and outputs the data to another topic. This application is saved as `basic.py` and serves as the base for generating AsyncAPI documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asyncapi/export.md#_snippet_0

LANGUAGE: Python
CODE:
```
{! docs_src/kafka/basic/basic.py!}
```

----------------------------------------

TITLE: FastStream Redis Stream Basic Subscriber Application
DESCRIPTION: This complete FastStream application demonstrates how to set up a Redis broker and subscribe to a 'test-stream' to consume incoming messages. The `handle` function processes messages, logging their content.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/streams/subscription.md#_snippet_0

LANGUAGE: Python
CODE:
```
from faststream import FastStream
from faststream.redis import RedisBroker

broker = RedisBroker()
app = FastStream(broker)

@broker.subscriber("test-stream")
async def handle(msg: str):
    print(f"Received message: {msg}")
```

----------------------------------------

TITLE: Client Verifying FastStream Response Object Properties
DESCRIPTION: Illustrates how a client receives and verifies the body, headers, and correlation ID from a response sent using the `Response` class. It demonstrates accessing the structured metadata attached to the RPC reply, ensuring all custom properties are correctly transmitted.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/rpc.md#_snippet_5

LANGUAGE: python
CODE:
```
from faststream.rabbit import RabbitMessage

msg: RabbitMessage = await broker.request("Hello, RabbitMQ!", queue="test")
assert msg.body == b"Processed: Hello, RabbitMQ!"
assert msg.headers == {"x-token": "some-token"}
assert msg.correlation_id == "some-correlation-id"
```

----------------------------------------

TITLE: Subscribe to NATS Key-Value Changes in FastStream
DESCRIPTION: Demonstrates how to use `KvWatch` with a FastStream NatsBroker subscriber to listen for changes to a specific key in NATS key-value storage. The received value is then used to update a global context variable, enabling dynamic configuration updates.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/howto/nats/dynaconf.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.nats import NatsBroker, KvWatch

broker = NatsBroker()
app = FastStream(broker)

@broker.subscriber("create_sell", kv_watch=KvWatch("order_service"))
async def watch_kv_order_service(new_value: bool):
    app.context.set_global("create_sell", new_value)
```

----------------------------------------

TITLE: RabbitMQ Fanout Exchange and Queue Announcement
DESCRIPTION: This code demonstrates how to declare a Fanout exchange and bind multiple queues to it, setting up the basic infrastructure for message broadcasting in RabbitMQ.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/examples/fanout.md#_snippet_1

LANGUAGE: python
CODE:
```
{! docs_src/rabbit/subscription/fanout.py [ln:7-10] !}
```

----------------------------------------

TITLE: Disable FastStream Automatic Message Acknowledgement in Python
DESCRIPTION: This snippet demonstrates how to disable FastStream's default message acknowledgement mechanism for a subscriber. By setting `no_ack=True` in the `@broker.subscriber` decorator, you take full responsibility for explicitly acknowledging, negatively acknowledging, or terminating the message processing yourself.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/includes/en/no_ack.md#_snippet_0

LANGUAGE: Python
CODE:
```
@broker.subscriber(..., no_ack=True)
```

----------------------------------------

TITLE: Define Application Settings in a .env File
DESCRIPTION: An example of a `.env` file, a common practice for storing environment-specific configuration variables. This file contains key-value pairs that can be loaded by the application, such as connection URLs and queue names.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/config/index.md#_snippet_4

LANGUAGE: Bash
CODE:
```
URL="amqp://guest:guest@localhost:5672"
QUEUE="test-queue"
```

----------------------------------------

TITLE: Run Local Kafka Broker for Testing
DESCRIPTION: Docker command to start a local Kafka broker container for development and testing purposes. This setup is compatible with both AIOKafka and Confluent FastStream integrations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/index.md#_snippet_1

LANGUAGE: bash
CODE:
```
docker run -d --rm -p 9092:9092 --name test-mq \
-e KAFKA_ENABLE_KRAFT=yes \
-e KAFKA_CFG_NODE_ID=1 \
-e KAFKA_CFG_PROCESS_ROLES=broker,controller \
-e KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER \
-e KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093 \
-e KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT \
-e KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092 \
-e KAFKA_BROKER_ID=1 \
-e KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@localhost:9093 \
-e ALLOW_PLAINTEXT_LISTENER=yes \
bitnami/kafka:3.5.0
```

----------------------------------------

TITLE: Defining Redis RPC Subscriber Handlers
DESCRIPTION: This section illustrates how to define subscriber handlers for different Redis data types (channel, list, stream) that can process incoming messages and return responses, enabling RPC functionality across various Redis communication patterns.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/rpc.md#_snippet_1

LANGUAGE: Python
CODE:
```
@broker.subscriber(channel="test-channel")
async def handle_channel(msg: str) -> str:
    return msg

@broker.subscriber(list="test-list")
async def handle_list(msg: str) -> str:
    return msg

@broker.subscriber(stream="test-stream")
async def handle_stream(msg: str) -> str:
    return msg
```

----------------------------------------

TITLE: FastStream Subscriber Object Usage and Message Filtering
DESCRIPTION: This snippet demonstrates the new behavior where `broker.subscriber()` and `router.subscriber()` functions return a `Subscriber` object. This allows for a more flexible and preferred syntax for applying filters to incoming messages, replacing older filtering methods.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_31

LANGUAGE: python
CODE:
```
subscriber = broker.subscriber("test")

@subscriber(filter = lambda msg: msg.content_type == "application/json")
async def handler(msg: dict[str, Any]):
    ...

@subscriber()
async def handler(msg: dict[str, Any]):
    ...
```

----------------------------------------

TITLE: Example FastStream Logging Configuration Files (JSON, TOML, YAML)
DESCRIPTION: Presents example configurations for FastStream logging in JSON, TOML, and YAML formats, demonstrating how to define formatters, handlers, and loggers for an application.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/logging.md#_snippet_5

LANGUAGE: json
CODE:
```
{
    "version": 1,
    "disable_existing_loggers": false,
    "formatters": {
        "app": {
            "format": "JSON: %(message)s"
        }
    },
    "handlers": {
        "app": {
            "class": "logging.StreamHandler",
            "formatter": "app",
            "level": "INFO"
        }
    },
    "loggers": {
        "app": {
            "level": "INFO",
            "handlers": ["app"]
        }

    }
}
```

LANGUAGE: toml
CODE:
```
version = 1
disable_existing_loggers = false

[formatters]

[formatters.app]
format = "TOML - %(message)s"

[handlers]

[handlers.app]
class = "logging.StreamHandler"
formatter = "app"
level = "INFO"

[loggers]

[loggers.app]
level = "INFO"
handlers = ["app"]
```

LANGUAGE: yaml
CODE:
```
version: 1
disable_existing_loggers: false
formatters:
  app:
    format: "YAML - %(message)s"
handlers:
  app:
    class: "logging.StreamHandler"
    formatter: "app"
    level: "INFO"
loggers:
  app:
    level: "INFO"
    handlers: ["app"]
```

----------------------------------------

TITLE: Decorating Functions for FastStream Kafka Publishing and AsyncAPI
DESCRIPTION: Illustrates the use of the Publisher Decorator in FastStream for Kafka message publishing. This method provides an AsyncAPI representation and is ideal for rapid application development, creating a structured DataPipeline unit with input and output components. It relies on accurate return type annotations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/confluent/Publisher/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from faststream import FastStream
from faststream.kafka import KafkaBroker
from pydantic import BaseModel

# 1. Initialize the KafkaBroker instance
broker = KafkaBroker("kafka://localhost:9092")
app = FastStream(broker)

# 2. Prepare your publisher object to use later as a decorator
output_publisher = broker.publisher("output_topic")

# 3. Create your processing logic
# 4. Decorate your processing function
@output_publisher
@broker.subscriber("input_topic")
async def process_message(message: str) -> str:
    """
    Consumes messages from 'input_topic' and publishes processed messages
    to 'output_topic'.
    """
    print(f"Received message: {message}")
    return f"Processed: {message.upper()}"

@app.on_startup
async def startup():
    await broker.start()
    print("Broker started")

@app.on_shutdown
async def shutdown():
    await broker.stop()
    print("Broker stopped")
```

LANGUAGE: Python
CODE:
```
from faststream.kafka import KafkaBroker

broker = KafkaBroker("kafka://localhost:9092")
```

LANGUAGE: Python
CODE:
```
output_publisher = broker.publisher("output_topic")
```

LANGUAGE: Python
CODE:
```
async def process_message(message: str) -> str:
    return f"Processed: {message.upper()}"
```

LANGUAGE: Python
CODE:
```
@broker.publisher("output_topic")
@broker.subscriber("input_topic")
async def process_message(message: str) -> str:
    return f"Processed: {message.upper()}"
```

----------------------------------------

TITLE: Accessing NATS JetStream Object in FastStream
DESCRIPTION: This Python example demonstrates how to access the NATS JetStream object within a FastStream application context. It leverages the underlying `nats-py` library to interact with JetStream's advanced features, including message persistence and stream management. The `JStream` object in FastStream attempts to create or update a stream by default; to prevent this and simply retrieve an existing stream, use the `JStream(..., declare=False)` option.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/jetstream/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
from faststream import FastStream, NatsBroker
from faststream.nats import JStream

broker = NatsBroker("nats://localhost:4222")
app = FastStream(broker)

@app.on_startup
async def setup_jetstream():
    # Access the JetStream object from the broker's context
    js = broker.nats.jetstream()
    print("NATS JetStream object accessed.")

    # Example: Using JStream to declare/get a stream
    # To declare a new stream or update an existing one:
    # stream = JStream("my_stream", subjects=["my_subject"])
    # await broker.declare_stream(stream)

    # To just get an already created stream without declaring:
    # stream_to_get = JStream("existing_stream", declare=False)
    # await broker.declare_stream(stream_to_get) # This will just retrieve if declare=False
```

----------------------------------------

TITLE: Create and Use a RedisBroker Publisher Object
DESCRIPTION: Illustrates a more structured approach to publishing by creating a dedicated publisher object. This method is recommended for better organization and automatic inclusion in AsyncAPI documentation. It shows broker initialization, publisher instance creation, and message publishing via the publisher object.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/pubsub/publishing.md#_snippet_1

LANGUAGE: python
CODE:
```
from faststream.redis import RedisBroker

broker = RedisBroker("redis://localhost:6379")
```

LANGUAGE: python
CODE:
```
publisher = broker.publisher("test_channel")
```

LANGUAGE: python
CODE:
```
await publisher.publish("my_message")
```

----------------------------------------

TITLE: Run Local Redis Broker for Testing
DESCRIPTION: Docker command to start a local Redis server container, used as a message broker for FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/index.md#_snippet_4

LANGUAGE: bash
CODE:
```
bash docker run -d --rm -p 6379:6379 --name test-mq redis
```

----------------------------------------

TITLE: Accessing Raw Message Fields with FastStream Context
DESCRIPTION: Demonstrates how to use FastStream's `Context` to access fields directly from the `raw_message` object. This provides granular control and allows retrieval of properties from the native broker message using a simplified syntax.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/message.md#_snippet_3

LANGUAGE: python
CODE:
```
from faststream import Context

@broker.subscriber("test")
async def base_handler(
    body: str,
    cor_id: str = Context("message.raw_message.correlation_id"),
):
    print(cor_id)
```

----------------------------------------

TITLE: Apply Middleware to a Specific FastStream Subscriber
DESCRIPTION: Shows how to apply a middleware function directly to an individual subscriber using the `@broker.subscriber` decorator. This provides granular control, allowing the middleware to intercept messages only for that specific handler.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/middlewares/index.md#_snippet_5

LANGUAGE: python
CODE:
```
async def subscriber_middleware(
    call_next: Callable[[Any], Awaitable[Any]],
    msg: StreamMessage[Any],
) -> Any:
    return await call_next(msg)


@broker.subscriber(
    ...,
    middlewares=[subscriber_middleware],
)
async def handler():
    ...
```

----------------------------------------

TITLE: Configure FastStream Subscriber for No Retries
DESCRIPTION: By default, FastStream subscribers do not retry messages on error. If an error occurs during message processing, the message can still be retrieved from the queue, but it will not be automatically re-queued by FastStream.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/ack.md#_snippet_0

LANGUAGE: Python
CODE:
```
@broker.subscriber("test", retry=False) # don't handle exceptions
async def base_handler(body: str):
    ...
```

----------------------------------------

TITLE: Install FastStream Development Dependencies
DESCRIPTION: Installs all project dependencies, including development-specific ones, and the local FastStream package in editable mode (`-e`) for live code changes.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/contributing/CONTRIBUTING.md#_snippet_3

LANGUAGE: bash
CODE:
```
pip install -e ".[dev]"
```

----------------------------------------

TITLE: Start Local Kafka Broker for FastStream
DESCRIPTION: This command initiates a local Kafka Docker container, which is a necessary prerequisite for running the FastStream application. Ensure Kafka is fully operational before starting the FastStream container.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/template/index.md#_snippet_11

LANGUAGE: bash
CODE:
```
./scripts/start_kafka_broker_locally.sh
```

----------------------------------------

TITLE: Accessing Dictionary Keys with FastStream Context
DESCRIPTION: Demonstrates how to access inner dictionary keys within a message's context using `Context("message.headers.user_id", cast=True)` in a FastStream handler. This allows direct extraction and casting of nested values from message headers or other dictionary-like structures.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_65

LANGUAGE: python
CODE:
```
# headers is a `dict`
async def handler(
  user_id: int = Context("message.headers.user_id", cast=True),
): ...
```

----------------------------------------

TITLE: Define Message Schema with Pydantic Field in FastStream Handlers
DESCRIPTION: FastStream uses Pydantic `Field` annotations in handler arguments to collect application schema information and generate AsyncAPI schema. This also allows adding extra validations and details like title, description, and examples to message fields.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/pydantic.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream import FastStream, Logger
from faststream.kafka import KafkaBroker
from pydantic import Field

broker = KafkaBroker("localhost:9092")

@broker.subscriber("test-topic")
async def handle_message(
    name: str = Field(
        ...,
        title="User Name",
        description="The name of the user",
        examples=["John Doe"]
    ),
    age: int = Field(
        ...,
        ge=0,
        lt=150,
        description="The age of the user"
    ),
    logger: Logger
) -> None:
    logger.info(f"Received user: {name}, age: {age}")
```

LANGUAGE: python
CODE:
```
from faststream import FastStream, Logger
from faststream.confluent import ConfluentKafkaBroker
from pydantic import Field

broker = ConfluentKafkaBroker("localhost:9092")

@broker.subscriber("test-topic")
async def handle_message(
    name: str = Field(
        ...,
        title="User Name",
        description="The name of the user",
        examples=["John Doe"]
    ),
    age: int = Field(
        ...,
        ge=0,
        lt=150,
        description="The age of the user"
    ),
    logger: Logger
) -> None:
    logger.info(f"Received user: {name}, age: {age}")
```

LANGUAGE: python
CODE:
```
from faststream import FastStream, Logger
from faststream.rabbitmq import RabbitBroker
from pydantic import Field

broker = RabbitBroker("amqp://guest:guest@localhost:5672/")

@broker.subscriber("test-queue")
async def handle_message(
    name: str = Field(
        ...,
        title="User Name",
        description="The name of the user",
        examples=["John Doe"]
    ),
    age: int = Field(
        ...,
        ge=0,
        lt=150,
        description="The age of the user"
    ),
    logger: Logger
) -> None:
    logger.info(f"Received user: {name}, age: {age}")
```

LANGUAGE: python
CODE:
```
from faststream import FastStream, Logger
from faststream.nats import NatsBroker
from pydantic import Field

broker = NatsBroker("nats://localhost:4222")

@broker.subscriber("test-subject")
async def handle_message(
    name: str = Field(
        ...,
        title="User Name",
        description="The name of the user",
        examples=["John Doe"]
    ),
    age: int = Field(
        ...,
        ge=0,
        lt=150,
        description="The age of the user"
    ),
    logger: Logger
) -> None:
    logger.info(f"Received user: {name}, age: {age}")
```

LANGUAGE: python
CODE:
```
from faststream import FastStream, Logger
from faststream.redis import RedisBroker
from pydantic import Field

broker = RedisBroker("redis://localhost:6379")

@broker.subscriber("test-channel")
async def handle_message(
    name: str = Field(
        ...,
        title="User Name",
        description="The name of the user",
        examples=["John Doe"]
    ),
    age: int = Field(
        ...,
        ge=0,
        lt=150,
        description="The age of the user"
    ),
    logger: Logger
) -> None:
    logger.info(f"Received user: {name}, age: {age}")
```

----------------------------------------

TITLE: Accessing FastStream RabbitMessage Object
DESCRIPTION: Demonstrates how to access the `RabbitMessage` object directly within a FastStream subscriber function. This object provides a wrapper around the native broker message, allowing retrieval of metadata like `correlation_id`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/message.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream.rabbit import RabbitMessage

@broker.subscriber("test")
async def base_handler(
    body: str,
    msg: RabbitMessage,
):
    print(msg.correlation_id)
```

----------------------------------------

TITLE: Define `RPCWorker` Class for Kafka RPC Requests
DESCRIPTION: This class encapsulates Kafka RPC logic, allowing services to send requests and receive responses. It manages correlation IDs and uses `asyncio.Future` for handling asynchronous replies. The `_handle_responses` method processes incoming messages, and the `request` method sends data and waits for a response.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/howto/kafka/rpc.md#_snippet_4

LANGUAGE: python
CODE:
```
from uuid import uuid4
from asyncio import Future, wait_for

from faststream.types import SendableMessage
from faststream.kafka import KafkaMessage

class RPCWorker:
    def __init__(self, broker: KafkaBroker, reply_topic: str) -> None:
        self.responses: dict[str, Future[bytes]] = {}
        self.broker = broker
        self.reply_topic = reply_topic

        self.subscriber = broker.subscriber(reply_topic)
        self.subscriber(self._handle_responses)

    def _handle_responses(self, msg: KafkaMessage) -> None:
        """Our replies subscriber."""
        if (future := self.responses.pop(msg.correlation_id, None)):
            future.set_result(msg.body)

    async def request(
        self,
        data: SendableMessage,
        topic: str,
        timeout: float = 10.0,
    ) -> bytes:
        correlation_id = str(uuid4())
        future = self.responses[correlation_id] = Future[bytes]()

        await broker.publish(
            data, topic,
            reply_to=self.reply_topic,
            correlation_id=correlation_id,
        )

        try:
            response: bytes = await wait_for(future, timeout=timeout)
        except TimeoutError:
            self.responses.pop(correlation_id, None)
            raise
        else:
            return response
```

----------------------------------------

TITLE: Simplify NATS JetStream Pull Subscription Configuration in FastStream
DESCRIPTION: This example shows the simplified way to configure NATS JetStream pull subscriptions in FastStream by using `pull_sub=True`. Previously, `PullSub()` was required for basic cases. This change streamlines the setup for consuming messages from a stream using a pull-based approach.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_18

LANGUAGE: python
CODE:
```
from faststream import FastStream, Logger
from faststream.nats import NatsBroker

broker = NatsBroker()
app = FastStream(broker)

@broker.subscriber("test", stream="stream", pull_sub=True)
async def handler(msg, logger: Logger):
    logger.info(msg)
```

----------------------------------------

TITLE: Access Global Context Parameter in FastStream Subscriber
DESCRIPTION: Illustrates how to retrieve a dynamically updated configuration parameter from the FastStream global context within a subscriber function. It uses `faststream.Context` to inject the `create_sell` boolean value, allowing conditional logic based on the current configuration.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/howto/nats/dynaconf.md#_snippet_1

LANGUAGE: python
CODE:
```
from faststream import FastStream, Context
from faststream.nats import NatsBroker, NatsMessage

broker = NatsBroker()
app = FastStream(broker)

@broker.subscriber("order_service.order.filled.buy")
async def handle_filled_buy(
    message: NatsMessage,
    create_sell: bool = Context("create_sell"),
):
    if create_sell:
        await broker.publish(b"", "order_service.order.create.sell")
```

----------------------------------------

TITLE: Apply Subscriber-Level Middleware to FastStream Broker
DESCRIPTION: Illustrates applying a `consume_scope`-based middleware, `MyMiddleware`, to a `Broker`. This middleware will execute at the handler function call for all subscribers managed by this broker.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/middlewares/index.md#_snippet_4

LANGUAGE: python
CODE:
```
Broker(middlewares=[MyMiddleware])
```

----------------------------------------

TITLE: Apply a Publisher Middleware to a Specific Publisher in FastStream
DESCRIPTION: This Python example illustrates how to define a standalone asynchronous function `publisher_middleware` with the `publish_scope` signature. This function is then applied directly to a specific `@broker.publisher` decorator, allowing for targeted message processing for that particular publisher.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/middlewares/index.md#_snippet_7

LANGUAGE: python
CODE:
```
async def publisher_middleware(
    call_next: Callable[..., Awaitable[Any]],
    msg: Any,
    **options: Any,
) -> Any:
    return await call_next(msg, **options)


@broker.subscriber(...)
@broker.publisher(
    ...,
    middlewares=[publisher_middleware],
)
async def handler():
    ...
```

----------------------------------------

TITLE: Using FastStream Publisher Object with Router
DESCRIPTION: Illustrates the new capability where `router.publisher()` now returns a `Publisher` object. This allows for publishing messages using the returned object within a subscriber handler after the broker has started.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_39

LANGUAGE: python
CODE:
```
publisher = router.publisher("test")

@router.subscriber("in")
async def handler():
    await publisher.publish("msg")
```

----------------------------------------

TITLE: Retrieve Log Context from FastStream
DESCRIPTION: Illustrates how to access the `log_context` dictionary directly from `faststream.context` to retrieve current request-specific logging information anywhere within your application code.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/logging.md#_snippet_7

LANGUAGE: Python
CODE:
```
from faststream import context
log_context: dict[str, str] = context.get_local("log_context")
```

----------------------------------------

TITLE: Configure Structlog for Development and Production
DESCRIPTION: Provides a comprehensive example of setting up `structlog` with different processors for development (console output) and production (JSON output), ensuring flexible and production-ready logging.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/logging.md#_snippet_9

LANGUAGE: Python
CODE:
```
import sys
import structlog

shared_processors = (
    structlog.processors.add_log_level,
    structlog.processors.StackInfoRenderer(),
    structlog.dev.set_exc_info,
    structlog.processors.TimeStamper(fmt="iso"),
)

if sys.stderr.isatty():
    # terminal session
    processors = [
        *shared_processors,
        structlog.dev.ConsoleRenderer(),
    ]
else:
    # Docker container session
    processors = [
        *shared_processors,
        structlog.processors.dict_tracebacks,
        structlog.processors.JSONRenderer(),
    ]

structlog.configure(
    processors=processors,
    logger_factory=structlog.PrintLoggerFactory(),
    cache_logger_on_first_use=False,
)

logger = structlog.get_logger()
```

----------------------------------------

TITLE: Enable Pydantic Settings to Load from .env File
DESCRIPTION: Updates the Pydantic `Settings` class to enable automatic loading of configuration values from a `.env` file. This is achieved by configuring `model_config` (Pydantic v2) or `Config` (Pydantic v1) with the `env_file` parameter, requiring the `python-dotenv` library.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/config/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings, SettingsConfigDict

class Settings(BaseSettings):
    model_config = SettingsConfigDict(env_file=".env")

    app_name: str = "FastStream"
    items_per_user: int = 50
    url: str
    queue: str = "test-queue"
```

----------------------------------------

TITLE: Setup Basic FastStream Application for AsyncAPI Docs
DESCRIPTION: This snippet provides the foundational Python code for a simple FastStream application, serving as a prerequisite to demonstrate initial AsyncAPI documentation generation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asyncapi/custom.md#_snippet_0

LANGUAGE: python
CODE:
```
{! docs_src/getting_started/asyncapi/asyncapi_customization/basic.py !}
```

----------------------------------------

TITLE: Client Receiving Response with Metadata
DESCRIPTION: This example demonstrates how a client receives and accesses the body, headers, and correlation ID from a `RedisMessage` object when the RPC subscriber uses the `Response` class to send metadata.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/rpc.md#_snippet_7

LANGUAGE: Python
CODE:
```
from faststream.redis import RedisMessage

msg: RedisMessage = await broker.request(
    "Hello, Redis!",
    channel="test-channel",
)
assert msg.body == b"Processed: Hello, Redis!"
assert msg.headers == {"x-token": "some-token"}
assert msg.correlation_id == "some-correlation-id"
```

----------------------------------------

TITLE: Accessing and Validating Message Headers with FastStream Header Class
DESCRIPTION: This snippet illustrates using the `Header` class in FastStream for more convenient and Pydantic-validated access to message headers. It acts as a shortcut to `Context` with default validation, simplifying header retrieval and ensuring data integrity.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/includes/message/headers.md#_snippet_1

LANGUAGE: python
CODE:
```
from faststream import Header

@broker.subscriber("test")
async def base_handler(
    body: str,
    user: str = Header(),
):
    ...
```

----------------------------------------

TITLE: Accessing Specific Message Fields with FastStream Context
DESCRIPTION: Shows how to use FastStream's `Context` feature to directly inject specific message fields, such as `correlation_id`, into a subscriber function's arguments. This simplifies access to individual metadata without needing the full message object.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/message.md#_snippet_2

LANGUAGE: python
CODE:
```
from faststream import Context

@broker.subscriber("test")
async def base_handler(
    body: str,
    cor_id: str = Context("message.correlation_id"),
):
    print(cor_id)
```

----------------------------------------

TITLE: Define FastStream Kafka Publisher for Decorator
DESCRIPTION: This example shows how to prepare a publisher object that can be used as a decorator on a function. This approach simplifies publishing by linking the function's return value directly to a Kafka topic.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/Publisher/index.md#_snippet_7

LANGUAGE: python
CODE:
```
to_output_data = broker.publisher("output_data")
```

----------------------------------------

TITLE: Initialize FastStream Broker Router for Various Brokers
DESCRIPTION: This snippet demonstrates how to import the `BrokerRouter` and its corresponding `Broker` from FastStream for different message queue systems (AIOKafka, Confluent, RabbitMQ, NATS, Redis) and instantiate the router, optionally with a `prefix` that will be applied to all its subscribers and publishers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/routers/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
from faststream import FastStream
from faststream.kafka import KafkaBroker, KafkaRouter

broker = KafkaBroker("localhost:9092")
router = KafkaRouter(prefix="my_app")
```

LANGUAGE: Python
CODE:
```
from faststream import FastStream
from faststream.confluent import KafkaBroker, KafkaRouter

broker = KafkaBroker("localhost:9092")
router = KafkaRouter(prefix="my_app")
```

LANGUAGE: Python
CODE:
```
from faststream import FastStream
from faststream.rabbit import RabbitBroker, RabbitRouter

broker = RabbitBroker("amqp://guest:guest@localhost:5672/")
router = RabbitRouter(prefix="my_app")
```

LANGUAGE: Python
CODE:
```
from faststream import FastStream
from faststream.nats import NatsBroker, NatsRouter

broker = NatsBroker("nats://localhost:4222")
router = NatsRouter(prefix="my_app")
```

LANGUAGE: Python
CODE:
```
from faststream import FastStream
from faststream.redis import RedisBroker, RedisRouter

broker = RedisBroker("redis://localhost:6379")
router = RedisRouter(prefix="my_app")
```

----------------------------------------

TITLE: Publishing with a Custom Reply-To Queue for Permanent RPC
DESCRIPTION: Illustrates how to establish a permanent request-reply data flow by specifying a `reply_to` queue in `broker.publish`. This ensures responses are automatically routed to a designated queue, suitable for long-lived communication patterns.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/rpc.md#_snippet_1

LANGUAGE: python
CODE:
```
@broker.subscriber("response-queue")
async def consume_responses(msg):
    ...

await broker.publish(
    "Hello, RabbitMQ!",
    queue="test",
    reply_to="response-queue",
)
```

----------------------------------------

TITLE: Implementing a Basic RPC Subscriber in FastStream
DESCRIPTION: Shows how to create a FastStream subscriber that handles RPC requests. Decorated with `@broker.subscriber`, it processes incoming messages and returns a simple string response, which is then automatically sent back to the client.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/rpc.md#_snippet_2

LANGUAGE: python
CODE:
```
from faststream.rabbit import RabbitBroker

broker = RabbitBroker()

@broker.subscriber("test")
async def handle(msg):
    return f"Received: {msg}"
```

----------------------------------------

TITLE: Integrate OpenTelemetry Middleware with FastStream NATS Broker
DESCRIPTION: Illustrates the process of adding the `NatsTelemetryMiddleware` to a FastStream NATS broker. This setup enables native OpenTelemetry tracing and metrics collection for messages processed by the broker.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_22

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.nats import NatsBroker
from faststream.nats.opentelemetry import NatsTelemetryMiddleware

broker = NatsBroker(
    middlewares=(
        NatsTelemetryMiddleware(),
    )
)
app = FastStream(broker)
```

----------------------------------------

TITLE: Run All Pytest Tests with 'all' Mark
DESCRIPTION: Executes all tests, including those marked as 'slow' or specific broker-dependent tests, by using the 'all' pytest mark.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/contributing/CONTRIBUTING.md#_snippet_6

LANGUAGE: bash
CODE:
```
pytest -m 'all'
```

----------------------------------------

TITLE: Accessing Topic Pattern Variables with FastStream Path
DESCRIPTION: Explains how to extract dynamic values from topic patterns (e.g., `logs.{level}`) using FastStream's `Path` object. This allows subscriber functions to receive specific parts of the routing key as arguments, enabling flexible topic-based routing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/message.md#_snippet_4

LANGUAGE: python
CODE:
```
from faststream import Path
from faststream import RabbitQueue, RabbitExchane, ExchangeType

@broker.subscriber(
    RabbitQueue(
        "test-queue",
        routing_key="logs.{level}",
    ),
    RabbitExchange(
        "test-exchange",
        type=ExchangeType.TOPIC,
    )
)
async def base_handler(
    body: str,
    level: str = Path(),
):
    ...
```

----------------------------------------

TITLE: Integrate FastStream with Aiogram
DESCRIPTION: This snippet demonstrates how to integrate FastStream with the Aiogram framework. It shows how to initialize the FastStream broker at application startup and close it gracefully during shutdown, illustrating integration with non-HTTP frameworks.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/frameworks/index.md#_snippet_8

LANGUAGE: python
CODE:
```
{!> docs_src/integrations/no_http_frameworks_integrations/aiogram.py !}
```

----------------------------------------

TITLE: Accessing Wildcard Subject/Topic Patterns with FastStream Path
DESCRIPTION: This Python example illustrates how to use the `Path` object in FastStream to access wildcard subject patterns in NATS or topic routing keys in RabbitMQ. It provides a convenient shortcut to `Context("message.path.")`, allowing handlers to easily extract dynamic parts of the message subject or routing key, such as the `level` in `logs.{level}`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_67

LANGUAGE: Python
CODE:
```
@nats_broker.subscriber("logs.{level}")
async def handler(
  level: str = Path(),
)
```

----------------------------------------

TITLE: Initialize FastStream with a Custom Standard Logger
DESCRIPTION: Demonstrates how to configure a FastStream application and a RabbitMQ broker to use a custom instance of Python's standard `logging.Logger`, allowing for centralized control over logging behavior.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/logging.md#_snippet_6

LANGUAGE: Python
CODE:
```
import logging
from faststream import FastStream
from faststream.rabbit import RabbitBroker

logger = logging.getLogger("my_logger")

broker = RabbitBroker(logger=logger)
app = FastStream(broker, logger=logger)
```

----------------------------------------

TITLE: FastStream KafkaMessage Object Attributes
DESCRIPTION: This section details the available attributes of the `FastStream` wrapper message object, exemplified by `aiokafka.ConsumerRecord` for Kafka. These attributes provide comprehensive metadata about an incoming message, including body, checksum, headers, key, offset, and topic.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/message.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
KafkaMessage Attributes:
  body: bytes
  checksum: int
  headers: Sequence[Tuple[str, bytes]]
  key: Optional[aiokafka.structs.KT]
  offset: int
  partition: int
  serialized_key_size: int
  serialized_value_size: int
  timestamp: int
  timestamp_type: int
  topic: str
  value: Optional[aiokafka.structs.VT]
```

----------------------------------------

TITLE: FastStream Kafka Pattern Subscription with Path Parameters
DESCRIPTION: Demonstrates the new Kafka pattern subscription feature in FastStream, allowing message handlers to subscribe to topics matching a specific pattern and extract path parameters directly into function arguments.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_12

LANGUAGE: Python
CODE:
```
from faststream import Path
from faststream.kafka import KafkaBroker

broker = KafkaBroker()

@broker.subscriber(pattern="logs.{level}")
async def base_handler(
    body: str,
    level: str = Path(),
):
    ...
```

----------------------------------------

TITLE: Configuring KafkaBroker with additional security options
DESCRIPTION: Demonstrates how to pass additional configuration values, such as a custom SSL certificate file location, to the KafkaBroker using the 'config' dictionary. This example integrates SASLPlaintext for authentication while providing a custom CA certificate.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/confluent/security.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream.confluent import KafkaBroker
from faststream.security import SASLPlaintext

security = SASLPlaintext(
    username="admin",
    password="password",
)

config = {"ssl.ca.location": "~/my_certs/CRT_cacerts.pem"}

broker = KafkaBroker("localhost:9092", security=security, config=config)
```

----------------------------------------

TITLE: FastStream Multiple Subscriptions for a Single Handler
DESCRIPTION: Shows how to subscribe a single asynchronous function to multiple message streams or topics using multiple `@broker.subscriber` decorators. This allows one handler to process messages originating from different sources or topics.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/index.md#_snippet_4

LANGUAGE: python
CODE:
```
@broker.subscriber("first_sub")
@broker.subscriber("second_sub")
async def handler(msg):
    ...
```

----------------------------------------

TITLE: Set Default Values for FastStream Context Fields
DESCRIPTION: Demonstrates how to set default values for fields in the FastStream `Context` object. This prevents `pydantic.ValidationError` exceptions when attempting to access non-existent fields by providing a fallback value.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/extra.md#_snippet_0

LANGUAGE: Python
CODE:
```
from faststream import Context, FastStream

app = FastStream()

@app.broker.subscriber("test")
async def handler(
    value: int,
    my_field: str = Context("my_field", default="default_value")
):
    print(f"my_field: {my_field}")
```

----------------------------------------

TITLE: Add Built-in Healthcheck Route to FastStream ASGI App
DESCRIPTION: Illustrates how to add a pre-built `/health` endpoint to the `AsgiFastStream` application using `make_ping_asgi`, which automatically checks the broker's status and returns HTTP 204 or 500.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asgi.md#_snippet_3

LANGUAGE: python
CODE:
```
from faststream.nats import NatsBroker
from faststream.asgi import AsgiFastStream, make_ping_asgi

broker = NatsBroker()

app = AsgiFastStream(
    broker,
    asgi_routes=[
        ("/health", make_ping_asgi(broker, timeout=5.0)),
    ]
)
```

----------------------------------------

TITLE: Retrieve Single Message from FastStream Subscriber
DESCRIPTION: This code demonstrates how to use the `broker.subscriber().get_one()` method in FastStream to imperatively fetch a single message from a subscribed topic. The call is asynchronous and can be configured with a `timeout`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_5

LANGUAGE: python
CODE:
```
subscriber = broker.subscriber("in")
...
msg = await subscriber.get_one(timeout=5.0)
```

----------------------------------------

TITLE: Accessing Pattern Data in Redis Channel Names
DESCRIPTION: This snippet demonstrates how FastStream allows accessing data encoded directly within Redis channel names when using pattern subscriptions. It shows how to define a handler function that extracts dynamic information, such as an ID, from the channel name.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/pubsub/subscription.md#_snippet_8

LANGUAGE: Python
CODE:
```
from faststream import FastStream
from faststream.redis import RedisBroker, PubSub

broker = RedisBroker()

@broker.subscriber(channel=PubSub("user.{id}.events", pattern=True))
async def handle_user_event(msg: str, id: int):
    print(f"User {id} received event: {msg}")
```

----------------------------------------

TITLE: Publish Message Using FastStream Broker Router Prefix
DESCRIPTION: This example demonstrates how to publish a message using the main broker, ensuring the topic/subject includes the prefix defined during the `BrokerRouter`'s initialization. This is crucial for messages to be correctly routed to handlers registered via the router.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/routers/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
async with broker:
    await broker.publish("Hello, FastStream!", "my_app.input_data")
```

----------------------------------------

TITLE: Watch for New Files in NATS Object Storage Bucket
DESCRIPTION: This example shows how to use FastStream's `@broker.subscriber` decorator to watch for new files being added to an object storage bucket. The `obj_watch=True` parameter configures the subscriber to receive only the filename (and metadata via `message.raw_message`) to prevent memory overflow with large files.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/jetstream/object.md#_snippet_1

LANGUAGE: Python
CODE:
```
@broker.subscriber("example-bucket", obj_watch=True)
async def handler(filename: str):
    assert filename == "file.txt"
```

----------------------------------------

TITLE: Defining a FastStream Kafka Publisher
DESCRIPTION: This snippet illustrates how to define a message publisher in a FastStream application using the @KafkaBroker.publisher(...) decorator. It configures the target Kafka topic for messages, preparing the application to send data that can later be associated with a partition key.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/Publisher/using_a_key.md#_snippet_0

LANGUAGE: Python
CODE:
```
from faststream.kafka import KafkaBroker

broker = KafkaBroker("localhost:9092")

@broker.publisher("output_data")
async def to_output_data(msg: str, key: str) -> None:
    pass
```

----------------------------------------

TITLE: Use `RPCWorker` for Kafka RPC Requests with FastStream
DESCRIPTION: Demonstrates how to instantiate and use the `RPCWorker` class within a FastStream application. The `request` method is called from an `@app.after_startup` hook to send a message and assert the response.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/howto/kafka/rpc.md#_snippet_5

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.kafka import KafkaBroker

broker = KafkaBroker()
worker = RPCWorker(broker, reply_topic="responses")
app = FastStream(broker)

@app.after_startup
async def send_request() -> None:
    data = await worker.request("echo", "echo-topic")
    assert data == "echo"
```

----------------------------------------

TITLE: Stop Local Kafka Broker for FastStream
DESCRIPTION: This script gracefully stops the local Kafka Docker container. It should be executed after the FastStream application container has been terminated to clean up the development environment.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/template/index.md#_snippet_13

LANGUAGE: bash
CODE:
```
./scripts/stop_kafka_broker_locally.sh
```

----------------------------------------

TITLE: Integrating FastStream MQBrokers with Any HTTP Framework
DESCRIPTION: FastStream's MQBrokers can be used independently of a full FastStream application. They should be explicitly started and stopped in alignment with the integrating application's lifespan. This section demonstrates how to integrate FastStream brokers with various Python HTTP frameworks.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/faststream.md#_snippet_6

LANGUAGE: Python
CODE:
```
Placeholder for Python code from docs_src/integrations/http_frameworks_integrations/litestar.py
```

LANGUAGE: Python
CODE:
```
Placeholder for Python code from docs_src/integrations/http_frameworks_integrations/aiohttp.py
```

LANGUAGE: Python
CODE:
```
Placeholder for Python code from docs_src/integrations/http_frameworks_integrations/blacksheep.py
```

LANGUAGE: Python
CODE:
```
Placeholder for Python code from docs_src/integrations/http_frameworks_integrations/falcon.py
```

LANGUAGE: Python
CODE:
```
Placeholder for Python code from docs_src/integrations/http_frameworks_integrations/quart.py
```

LANGUAGE: Python
CODE:
```
Placeholder for Python code from docs_src/integrations/http_frameworks_integrations/sanic.py
```

----------------------------------------

TITLE: Using RedisResponse in a FastStream RPC Subscriber
DESCRIPTION: This Python example demonstrates how to implement an RPC subscriber using `faststream.redis.RedisBroker` that returns a `RedisResponse`. It shows how to set the response body, custom headers, a correlation ID, and specifically the `maxlen` parameter to limit the Redis stream's length.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/rpc.md#_snippet_8

LANGUAGE: Python
CODE:
```
from faststream.redis import RedisBroker, RedisResponse

broker = RedisBroker()

@broker.subscriber(stream="test-stream")
async def handle(msg):
    return RedisResponse(
        body=f"Processed: {msg}",
        headers={"x-token": "some-token"},
        correlation_id="some-correlation-id",
        maxlen=1000,
    )
```

----------------------------------------

TITLE: Creating and Testing an RPC Subscriber in FastStream NATS
DESCRIPTION: Explains how to create an RPC subscriber that processes incoming messages and returns a response. The subscriber function is decorated with `@broker.subscriber` and can return a raw value or a `Response` object. The example also shows how a client sends a request and asserts the received response.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/rpc.md#_snippet_2

LANGUAGE: python
CODE:
```
from faststream.nats import NatsBroker

broker = NatsBroker()

@broker.subscriber("test")
async def handle(msg):
    return f"Received: {msg}"
```

LANGUAGE: python
CODE:
```
from faststream.nats import NatsMessage

msg: NatsMessage = await broker.request("Hello, NATS!", subject="test")
assert msg.body == b"Received: Hello, NATS!"
```

----------------------------------------

TITLE: Access Context in FastStream Exception Handler
DESCRIPTION: Illustrates how FastStream exception handlers can access the application Context feature, similar to regular message handlers. This example shows retrieving the consumed message within a publishing exception handler.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/middlewares/exception.md#_snippet_3

LANGUAGE: python
CODE:
```
from faststream import ExceptionMiddleware, Context

exc_middleware = ExceptionMiddleware()

@exc_middleware.add_handler(Exception, publish=True)
def base_exc_handler(
    exc: Exception,
    message = Context(),
) -> str:
    print(exc, message)
    return "default"
```

----------------------------------------

TITLE: Run FastStream Application in Docker (Host Network)
DESCRIPTION: This command starts the FastStream application within a Docker container, configured to share the host's network for seamless Kafka communication. The --rm flag ensures automatic container removal upon exit, and --name assigns 'faststream-app' for easy identification.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/template/index.md#_snippet_12

LANGUAGE: bash
CODE:
```
docker run --rm --name faststream-app --net=host ghcr.io/<username>/<repo-name>:latest
```

----------------------------------------

TITLE: Utilize NATS JetStream Object Storage API in FastStream
DESCRIPTION: This snippet demonstrates FastStream's integration with NATS Object Storage. It defines a subscriber that watches an object store for new files and a startup hook to upload a file to that store. This feature simplifies handling binary data and files within NATS.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_17

LANGUAGE: python
CODE:
```
from faststream import FastStream, Logger
from faststream.nats import NatsBroker

broker = NatsBroker()
app = FastStream(broker)

@broker.subscriber("file-bucket", obj_watch=True)
async def handler(filename: str, logger: Logger):
    logger.info(filename)

@app.after_startup
async def test():
    object_store = await broker.object_storage("file-bucket")
    await object_store.put("some-file.txt", b"1")
```

----------------------------------------

TITLE: RabbitMQ Fanout Exchange Full Example
DESCRIPTION: This snippet provides a complete, end-to-end example demonstrating the basic setup and usage of a Fanout Exchange in RabbitMQ, showing how messages are broadcast to all bound queues and handled by consumers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/examples/fanout.md#_snippet_0

LANGUAGE: python
CODE:
```
{! docs_src/rabbit/subscription/fanout.py !}
```

----------------------------------------

TITLE: Complete FastStream Redis List Batch Consumption Example
DESCRIPTION: A full example demonstrating how to set up a FastStream application to consume messages in batches from a Redis list named 'test-list'. It includes broker initialization, subscriber definition, and a simple message processing loop, along with a startup hook to publish test messages.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/list/batch.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import List
from faststream import FastStream, RedisBroker
from faststream.redis.subscriber import ListSub

broker = RedisBroker("redis://localhost:6379")
app = FastStream(broker)

@broker.subscriber(list=ListSub("test-list", batch=True))
async def on_message(msg: List[str]):
    for m in msg:
        print(f"Received: {m}")

@app.on_startup
async def publish_messages():
    await broker.publish("Hello", list="test-list")
    await broker.publish("World", list="test-list")
    await broker.publish("FastStream", list="test-list")
    await broker.publish("Batch", list="test-list")
```

----------------------------------------

TITLE: Manually Assign Confluent Kafka Topic Partitions in FastStream
DESCRIPTION: This Python example illustrates how to manually assign specific topic partitions for a Confluent Kafka subscriber in FastStream. By using `TopicPartition`, developers can gain fine-grained control over which partitions a handler consumes messages from.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_11

LANGUAGE: python
CODE:
```
from faststream.confluent import TopicPartition

@broker.subscriber(partitions=[
    TopicPartition("test-topic", partition=0),
])
async def handler():
    ...
```

----------------------------------------

TITLE: Schedule FastStream Messages with Taskiq StreamScheduler
DESCRIPTION: Demonstrates how to use `StreamScheduler` with a `BrokerWrapper` to schedule message publishing. Examples are provided for various FastStream brokers, showing how to define a cron-based schedule for a message payload.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/scheduling.md#_snippet_2

LANGUAGE: Python (AIOKafka)
CODE:
```
from taskiq_faststream import StreamScheduler
from taskiq.schedule_sources import LabelScheduleSource

taskiq_broker.task(
    message={"user": "John", "user_id": 1},
    topic="in-topic",
    schedule=[{
        "cron": "* * * * *",
    }],
)

scheduler = StreamScheduler(
    broker=taskiq_broker,
    sources=[LabelScheduleSource(taskiq_broker)],
)
```

LANGUAGE: Python (Confluent)
CODE:
```
from taskiq_faststream import StreamScheduler
from taskiq.schedule_sources import LabelScheduleSource

taskiq_broker.task(
    message={"user": "John", "user_id": 1},
    topic="in-topic",
    schedule=[{
        "cron": "* * * * *",
    }],
)

scheduler = StreamScheduler(
    broker=taskiq_broker,
    sources=[LabelScheduleSource(taskiq_broker)],
)
```

LANGUAGE: Python (RabbitMQ)
CODE:
```
from taskiq_faststream import StreamScheduler
from taskiq.schedule_sources import LabelScheduleSource

taskiq_broker.task(
    message={"user": "John", "user_id": 1},
    queue="in-queue",
    schedule=[{
        "cron": "* * * * *",
    }],
)

scheduler = StreamScheduler(
    broker=taskiq_broker,
    sources=[LabelScheduleSource(taskiq_broker)],
)
```

LANGUAGE: Python (NATS)
CODE:
```
from taskiq_faststream import StreamScheduler
from taskiq.schedule_sources import LabelScheduleSource

taskiq_broker.task(
    message={"user": "John", "user_id": 1},
    subject="in-subject",
    schedule=[{
        "cron": "* * * * *",
    }],
)

scheduler = StreamScheduler(
    broker=taskiq_broker,
    sources=[LabelScheduleSource(taskiq_broker)],
)
```

LANGUAGE: Python (Redis)
CODE:
```
from taskiq_faststream import StreamScheduler
from taskiq.schedule_sources import LabelScheduleSource

taskiq_broker.task(
    message={"user": "John", "user_id": 1},
    channel="in-channel",
    schedule=[{
        "cron": "* * * * *",
    }],
)

scheduler = StreamScheduler(
    broker=taskiq_broker,
    sources=[LabelScheduleSource(taskiq_broker)],
)
```

----------------------------------------

TITLE: Run FastStream App with Custom Reload Extensions
DESCRIPTION: Starts the FastStream application with hot reload, extending the watched file types to include `.yml` and `.yaml` files, allowing configuration changes to also trigger application restarts.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/cli/index.md#_snippet_8

LANGUAGE: shell
CODE:
```
faststream run serve:app --reload  --reload-ext .yml --realod-ext .yaml
```

----------------------------------------

TITLE: Avro Serialization Example in FastStream
DESCRIPTION: Illustrates how to integrate Avro `schemaless_reader` and `schemaless_writer` into a `FastStream` application for encoding and decoding messages. It shows the setup of custom `decoder` and `encoder` functions using the defined Avro schema.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/serialization/examples.md#_snippet_11

LANGUAGE: Python
CODE:
```
import asyncio
import io

from fastavro import schemaless_reader, schemaless_writer
from faststream import FastStream, Logger
from faststream.kafka import KafkaBroker

broker = KafkaBroker("localhost:9092")
app = FastStream(broker)

schema = {
    "type": "record",
    "name": "Person",
    "fields": [
        {"name": "name", "type": "string"},
        {"name": "age", "type": "int"},
    ],
}

def custom_decoder(raw_msg: bytes) -> dict:
    bytes_reader = io.BytesIO(raw_msg)
    return schemaless_reader(bytes_reader, schema)


def custom_encoder(msg: dict) -> bytes:
    bytes_writer = io.BytesIO()
    schemaless_writer(bytes_writer, schema, msg)
    return bytes_writer.getvalue()


@broker.publisher("in", encoder=custom_encoder)
@broker.subscriber("in", decoder=custom_decoder)
async def handle_msg(msg: dict, logger: Logger) -> dict:
    logger.info(msg)
    return {"name": "John", "age": 25}


@app.on_startup
async def startup():
    await broker.start()
    await handle_msg({"name": "John", "age": 25})


@app.on_shutdown
async def shutdown():
    await broker.close()
```

----------------------------------------

TITLE: Initialize FastStream RedisBroker Instance
DESCRIPTION: This code demonstrates how to create an instance of `RedisBroker` and pass it to the `FastStream` object. This setup prepares the application for launch using the FastStream CLI.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/pubsub/subscription.md#_snippet_2

LANGUAGE: Python
CODE:
```
broker = RedisBroker()
```

----------------------------------------

TITLE: Run FastStream with Hot Reload Feature
DESCRIPTION: Command to run a FastStream application with the hot reload feature enabled. This improves the development experience by automatically restarting the application when code changes are detected, eliminating manual restarts.
SOURCE: https://github.com/ag2ai/faststream/blob/main/README.md#_snippet_8

LANGUAGE: shell
CODE:
```
faststream run basic:app --reload
```

----------------------------------------

TITLE: FastStream NatsBroker publish method parameters
DESCRIPTION: Detailed documentation for the parameters accepted by the FastStream NatsBroker's `publish` method, including basic message arguments, message headers, and NatsJS specific options.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/publishing/index.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
NatsBroker.publish(
  message: str = "",
  subject: str,
  headers: dict[str, str] | None = None,
  correlation_id: str | None = None,
  stream: str | None = None,
  timeout: float | None = None
)
  message: Message to send.
  subject: Subject where the message will be sent.
  headers: Headers of the message being sent (used by consumers).
  correlation_id: Message id, which helps to match the original message with the reply to it (generated automatically).
  stream: Validate that the subject is in the stream.
  timeout: Wait for the NATS server response.
```

----------------------------------------

TITLE: Create NATS Object Storage Bucket and Put File
DESCRIPTION: This snippet demonstrates how to initialize a FastStream NatsBroker, create an object storage bucket, and then put a file (represented as BytesIO) into that bucket. The `broker.object_storage` method is idempotent, ensuring efficient bucket management.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/jetstream/object.md#_snippet_0

LANGUAGE: Python
CODE:
```
from faststream.nats import NatsBroker
from io import BytesIO

broker = NatsBroker("nats://localhost:4222")

@broker.after_startup
async def create_bucket(broker: NatsBroker):
    object_storage = broker.object_storage(bucket="example-bucket")
    await object_storage.put("file.txt", BytesIO(b"Hello FastStream!"))
```

----------------------------------------

TITLE: Creating a Simple Redis RPC Subscriber
DESCRIPTION: This snippet demonstrates how to create a basic RPC subscriber using `@broker.subscriber` that processes an incoming message and returns a string response. It highlights the core mechanism for handling RPC requests.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/rpc.md#_snippet_4

LANGUAGE: Python
CODE:
```
from faststream.redis import RedisBroker

broker = RedisBroker()

@broker.subscriber(channel="test-channel")
async def handle(msg):
    return f"Received: {msg}"
```

----------------------------------------

TITLE: Declare Global Context Field in FastStream
DESCRIPTION: Demonstrates how to declare an application-level global context field using `context.set_global` for various messaging brokers. This field will be accessible throughout the application lifecycle.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/custom.md#_snippet_0

LANGUAGE: Python
CODE:
```
from faststream import FastStream, context
from faststream.kafka import KafkaBroker

broker = KafkaBroker("localhost:9092")
app = FastStream(broker)

# ... (lines 6-14 are omitted by the range)

@app.on_startup
async def setup_global_context():
    context.set_global("my_secret", "super_secret_value")
    print("Global context 'my_secret' set.")
```

----------------------------------------

TITLE: Define Data Model for Redis Stream Messages
DESCRIPTION: Define a Pydantic `BaseModel` to structure the data being sent and received through Redis streams. This ensures type safety, facilitates data validation, and provides a clear schema for messages.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/streams/publishing.md#_snippet_2

LANGUAGE: python
CODE:
```
from pydantic import BaseModel

class Message(BaseModel):
    id: int
    content: str
```

----------------------------------------

TITLE: Using FastStream `Response` Class for RPC with Headers
DESCRIPTION: Demonstrates how to use the generic `Response` class within an RPC subscriber to attach additional metadata, such as headers and a correlation ID, to the response message. This provides a structured way to send richer information back to the client.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/rpc.md#_snippet_3

LANGUAGE: python
CODE:
```
from faststream import Response
from faststream.nats import NatsBroker

broker = NatsBroker()

@broker.subscriber("test")
async def handle(msg):
    return Response(
        body=f"Processed: {msg}",
        headers={"x-token": "some-token"},
        correlation_id="some-correlation-id",
    )
```

LANGUAGE: python
CODE:
```
from faststream.nats import NatsMessage

msg: NatsMessage = await broker.request("Hello, NATS!", subject="test")
assert msg.body == b"Processed: Hello, NATS!"
assert msg.headers == {"x-token": "some-token"}
assert msg.correlation_id == "some-correlation-id"
```

----------------------------------------

TITLE: Using FastStream Context in Regular Functions with @apply_types
DESCRIPTION: Shows how to use FastStream's Context in regular Python functions by applying the `@apply_types` decorator, allowing implicit access to context-provided arguments like a logger, demonstrating compatibility.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
# Python code from docs_src/getting_started/context/nested.py (lines 1-5, 10-13, 15-17)
# Actual content not provided in input.
```

----------------------------------------

TITLE: Define FastStream Kafka Publisher with Key Support
DESCRIPTION: This snippet illustrates how to define a message publisher in a FastStream application using the `@KafkaBroker.publisher` decorator. It sets up the target Kafka topic and implicitly allows for a partition key to be passed during publishing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/confluent/Publisher/using_a_key.md#_snippet_0

LANGUAGE: python
CODE:
```
@broker.publisher("output_data")
async def to_output_data(message: str, key: str):
    pass
```

----------------------------------------

TITLE: Run Pytest Tests Excluding Broker Dependencies
DESCRIPTION: Command to run tests that do not require active RabbitMQ, Kafka, NATS, Redis, or Confluent broker instances, useful for local development without full setup.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/contributing/CONTRIBUTING.md#_snippet_7

LANGUAGE: bash
CODE:
```
pytest -m 'not rabbit and not kafka and not nats and not redis and not confluent'
```

----------------------------------------

TITLE: Creating Explicit FastStream Kafka Publisher Objects
DESCRIPTION: Explains how to create dedicated publisher objects with `KafkaBroker`. This approach is recommended for comprehensive services as it allows publishers to be parsed and documented in AsyncAPI specifications, unlike one-off messages.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/confluent/Publisher/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from faststream.kafka import KafkaBroker

broker = KafkaBroker("kafka://localhost:9092")
```

LANGUAGE: Python
CODE:
```
my_publisher = broker.publisher("my_documented_topic")
```

LANGUAGE: Python
CODE:
```
await my_publisher.publish("Message via publisher object")
await my_publisher.publish({"status": "success", "id": 123})
```

----------------------------------------

TITLE: Implement FastStream Kafka Batch Consuming Function
DESCRIPTION: Creates an asynchronous consuming function that accepts a list of messages. The @broker.subscriber(...) decorator automatically collects and groups messages into batches based on the partition before calling this function.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/Subscriber/batch_subscriber.md#_snippet_1

LANGUAGE: Python
CODE:
```
@broker.subscriber("test_batch", batch=True)
async def handle_batch(msg: List[Message]):
```

----------------------------------------

TITLE: FastStream Publisher Object Usage
DESCRIPTION: This example illustrates how the `router.publisher()` function now returns a `Publisher` object. This object can be used to publish messages after the broker has successfully started, providing a consistent way to manage message publishing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_32

LANGUAGE: python
CODE:
```
publisher = router.publisher("test")

@router.subscriber("in")
async def handler():
    await publisher.publish("msg")
```

----------------------------------------

TITLE: Complete FastStream Batch Consuming Example
DESCRIPTION: A comprehensive example demonstrating how to configure a FastStream application to consume messages in batches from the "test_batch" topic. This includes the necessary imports, broker setup, and the batch processing function designed to handle high volumes of data efficiently.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/confluent/Subscriber/batch_subscriber.md#_snippet_2

LANGUAGE: python
CODE:
```
from faststream import KafkaBroker
from typing import List

broker = KafkaBroker("localhost:9092")

@broker.subscriber("test_batch", batch=True)
async def on_batch_msg(msg: List[str]):
    for m in msg:
        print(f"Received: {m}")
    print(f"Processed a batch of {len(msg)} messages.")
```

----------------------------------------

TITLE: Install FastStream OpenTelemetry Dependencies
DESCRIPTION: Installs the FastStream library with OpenTelemetry support and the OTLP gRPC exporter, which are necessary packages for collecting and exporting telemetry data.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/opentelemetry/index.md#_snippet_0

LANGUAGE: shell
CODE:
```
pip install "faststream[otel]" opentelemetry-exporter-otlp
```

----------------------------------------

TITLE: Configure OTLPSpanExporter for Trace Export in Python
DESCRIPTION: This Python code configures the `OTLPSpanExporter` to send traces to a specified OTLP endpoint (e.g., `http://127.0.0.1:4317`). It then creates a `BatchSpanProcessor` with this exporter and adds it to the previously configured `tracer_provider`. This setup ensures that collected spans are batched and asynchronously exported to the tracing backend.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/opentelemetry/tracing.md#_snippet_4

LANGUAGE: python
CODE:
```
from opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter
from opentelemetry.sdk.trace.export import BatchSpanProcessor

exporter = OTLPSpanExporter(endpoint="http://127.0.0.1:4317")
processor = BatchSpanProcessor(exporter)
tracer_provider.add_span_processor(processor)
```

----------------------------------------

TITLE: Configure SASL SCRAM-256/512 Authentication with SSL/TLS in FastStream Kafka
DESCRIPTION: The `SASLScram256` and `SASLScram512` objects provide authentication using the Salted Challenge Response Authentication Mechanism (SCRAM) for FastStream Kafka, typically combined with SSL/TLS encryption.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/security.md#_snippet_2

LANGUAGE: python
CODE:
```
from faststream.kafka import KafkaBroker
from faststream.security import SASLScram256
import ssl

# Configure SSL/TLS context
ssl_context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
ssl_context.load_verify_locations("path/to/ca.pem")

# Create SASLScram256 object
security = SASLScram256(
    username="your_username",
    password="your_password",
    ssl_context=ssl_context
)

# Initialize KafkaBroker with SASLScram256
broker = KafkaBroker("localhost:9092", security=security)

# Example usage:
@broker.subscriber("input_topic")
async def handle_message(msg: str):
    print(f"Received message: {msg}")
```

LANGUAGE: python
CODE:
```
from faststream.kafka import KafkaBroker
from faststream.security import SASLScram512
import ssl

# Configure SSL/TLS context
ssl_context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
ssl_context.load_verify_locations("path/to/ca.pem")

# Create SASLScram512 object
security = SASLScram512(
    username="your_username",
    password="your_password",
    ssl_context=ssl_context
)

# Initialize KafkaBroker with SASLScram512
broker = KafkaBroker("localhost:9092", security=security)

# Example usage:
@broker.subscriber("input_topic")
async def handle_message(msg: str):
    print(f"Received message: {msg}")
```

----------------------------------------

TITLE: Configure SASLOAuthBearer Authentication with SSL/TLS in FastStream Kafka
DESCRIPTION: The `SASLOAuthBearer` object enables OAUTHBEARER SASL mechanism for authentication in FastStream Kafka. It typically requires a custom `sasl_oauth_token_provider` for completing the authentication flow, such as with AWS MSK IAM SASL signer.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/security.md#_snippet_3

LANGUAGE: python
CODE:
```
from faststream.kafka import KafkaBroker
from faststream.security import SASLOAuthBearer
import ssl
from aiokafka.abc import AbstractTokenProvider # Required for custom token provider

# Define a custom token provider (e.g., for AWS MSK IAM)
class CustomTokenProvider(AbstractTokenProvider):
    async def token(self) -> str:
        # Your logic to fetch the OAuth token
        print("Fetching OAuth token...")
        return "your_actual_oauth_token"

# Configure SSL/TLS context
ssl_context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
ssl_context.load_verify_locations("path/to/ca.pem")

# Create SASLOAuthBearer object
security = SASLOAuthBearer(
    ssl_context=ssl_context,
    sasl_oauth_token_provider=CustomTokenProvider()
)

# Initialize KafkaBroker with SASLOAuthBearer
broker = KafkaBroker("localhost:9092", security=security)

# Example usage:
@broker.subscriber("input_topic")
async def handle_message(msg: str):
    print(f"Received message: {msg}")
```

----------------------------------------

TITLE: Utilize FastStream @after_startup Hook with FastAPI StreamRouter
DESCRIPTION: The `@after_startup` hook in FastStream allows executing operations with your message broker immediately after the connection is established. This feature is highly convenient for managing broker-specific objects or sending initial messages, and it's fully supported within your FastAPI StreamRouter.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/fastapi/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/kafka/startup.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/confluent/startup.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/rabbit/startup.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/nats/startup.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/integrations/fastapi/redis/startup.py !}
```

----------------------------------------

TITLE: Install Pydantic Settings Library
DESCRIPTION: Instructions to install the `pydantic-settings` package, which provides utilities for managing application settings from environment variables. This package is separate from Pydantic v2.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/config/index.md#_snippet_0

LANGUAGE: Bash
CODE:
```
pip install pydantic-settings
```

----------------------------------------

TITLE: Configure NATS Concurrent Subscriber with FastStream
DESCRIPTION: This snippet illustrates how to enable concurrent message processing for a NATS subscriber in FastStream. By setting `max_workers` on the `broker.subscriber` decorator, you can configure an async tasks pool to process multiple messages from the same subject simultaneously, overcoming the default block-per-subject behavior.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_48

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.nats import NatsBroker

broker = NatsBroker()
app = FastStream()

@broker.subscriber("test-subject", max_workers=10)
async def handler(...):
   """Can process up to 10 messages in the same time."""
```

----------------------------------------

TITLE: Integrate FastStream with Rocketry for Scheduled Messaging
DESCRIPTION: This snippet illustrates how to integrate a FastStream application with the Rocketry scheduling library. It sets up a Rocketry application to run FastStream's NATS broker, allowing scheduled tasks to publish messages using the FastStream broker instance.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/scheduling.md#_snippet_7

LANGUAGE: python
CODE:
```
import asyncio

from rocketry import Rocketry
from rocketry.args import Arg

from faststream.nats import NatsBroker

app = Rocketry(execution="async")

broker = NatsBroker()      # regular broker
app.params(broker=broker)

async def start_app():
    async with broker:     # connect broker
        await app.serve()  # run rocketry

@app.task("every 1 second", execution="async")
async def publish(br: NatsBroker = Arg("broker")):
    await br.publish("Hi, Rocketry!", "test")

if __name__ == "__main__":
    asyncio.run(start_app())
```

----------------------------------------

TITLE: Import FastStream and KafkaBroker
DESCRIPTION: This snippet demonstrates the necessary imports for building a FastStream application with Kafka. It includes `FastStream` for the application core, `KafkaBroker` for Kafka-specific functionalities, and `BaseModel` from Pydantic for message structure definition.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/Subscriber/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from faststream import FastStream, KafkaBroker
from pydantic import BaseModel
```

----------------------------------------

TITLE: Define Redis Channel Message Handler Function
DESCRIPTION: This snippet illustrates how to define a Python function decorated with `@broker.subscriber('test')` to act as a consumer for messages from the 'test' Redis channel. The function uses a logger to output the message content.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/pubsub/subscription.md#_snippet_3

LANGUAGE: Python
CODE:
```
@broker.subscriber("test")
async def handle_message(msg: str):
    print(f"Received: {msg}")
```

----------------------------------------

TITLE: Initialize FastStream Application with KafkaBroker
DESCRIPTION: Shows the instantiation of `KafkaBroker` to connect to a Kafka cluster and its integration into a `FastStream` application. This setup is crucial for managing message consumption and production within the FastStream framework.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/confluent/Subscriber/index.md#_snippet_3

LANGUAGE: python
CODE:
```
broker = KafkaBroker("localhost:9092")
app = FastStream(broker)
```

----------------------------------------

TITLE: Scale FastStream ASGI Application with CLI Workers
DESCRIPTION: This Bash command illustrates how to use the FastStream CLI to launch an ASGI application with a specified number of workers. This feature allows for easy scaling of your FastStream ASGI applications to handle increased load.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_2

LANGUAGE: bash
CODE:
```
faststream run main:asgi --workers 2
```

----------------------------------------

TITLE: Install OpenTelemetry OTLP Exporter for Python
DESCRIPTION: This command installs the `opentelemetry-exporter-otlp` package, which is required to export OpenTelemetry traces using the OpenTelemetry Protocol (OTLP). OTLP supports both gRPC and HTTP for sending trace data to compatible backend systems like Jaeger or Grafana Tempo.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/opentelemetry/tracing.md#_snippet_3

LANGUAGE: shell
CODE:
```
pip install opentelemetry-exporter-otlp
```

----------------------------------------

TITLE: Set Initial Values for FastStream Context Without Global Call
DESCRIPTION: Illustrates how to set an initial base value for the FastStream `Context` using the `initial` option. This allows defining a starting context value directly within the dependency, bypassing the need for a prior `set_global` call.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/extra.md#_snippet_3

LANGUAGE: Python
CODE:
```
from faststream import Context, FastStream

app = FastStream()

@app.broker.subscriber("test")
async def handler(
    value: int,
    my_field: str = Context("my_field", initial="initial_value")
):
    print(f"my_field: {my_field}")
```

----------------------------------------

TITLE: Accessing Specific Message Fields using FastStream Context
DESCRIPTION: This snippet illustrates how to directly extract specific message fields, such as `correlation_id`, using FastStream's `Context` dependency injection. This approach simplifies access to common metadata without needing to handle the full message object.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/message.md#_snippet_2

LANGUAGE: python
CODE:
```
from faststream import Context

@broker.subscriber("test")
async def base_handler(
    body: str,
    cor_id: str = Context("message.correlation_id"),
):
    print(cor_id)
```

----------------------------------------

TITLE: Importing FastStream Redis Pipeline Annotation
DESCRIPTION: This snippet shows how to import the `Pipeline` annotation from `faststream.redis.annotations`. This annotation is used to inject a Redis pipeline object into FastStream subscribers, allowing for delayed execution of Redis commands.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/pipeline.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream.redis.annotations import Pipeline
```

----------------------------------------

TITLE: FastStream: Wrap Callable for FastAPI Compatibility
DESCRIPTION: This function is designed to adapt a given callable (e.g., an asynchronous function or method) to be compatible with FastAPI's routing mechanisms. It typically handles the necessary transformations to allow FastStream message handlers to be exposed as FastAPI endpoints, ensuring proper request and response handling.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/fastapi/route/wrap_callable_to_fastapi_compatible.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.broker.fastapi.route.wrap_callable_to_fastapi_compatible(
  callable_obj: Callable,
  *args,
  **kwargs
) -> Callable
```

----------------------------------------

TITLE: Extracting Subject Pattern Values with FastStream Path
DESCRIPTION: This snippet shows how to extract dynamic values from NATS subject patterns (e.g., `logs.{level}`) using FastStream's `Path` object. It allows subscriber functions to easily access the matched wildcard segments as function arguments.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/message.md#_snippet_4

LANGUAGE: python
CODE:
```
from faststream import Path

@broker.subscriber("logs.{level}")
async def base_handler(
    body: str,
    level: str = Path(),
):
    ...
```

----------------------------------------

TITLE: FastStream Application Core Metrics
DESCRIPTION: Detailed documentation for the key metrics exported by FastStream applications, covering message reception, processing, and publishing. Each metric includes its type, a comprehensive description, and relevant labels for filtering and analysis.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/prometheus.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Metric: received_messages_total
  Type: Counter
  Description: The metric is incremented each time the application receives a message. This is necessary to count messages that the application has received but has not yet started processing.
  Labels: app_name, broker, handler

Metric: received_messages_size_bytes
  Type: Histogram
  Description: The metric is filled with the sizes of received messages. When a message is received, the size of its body in bytes is calculated and written to the metric. Useful for analyzing the sizes of incoming messages, also in cases when the application receives messages of unexpected sizes.
  Labels: app_name, broker, handler

Metric: received_messages_in_process
  Type: Gauge
  Description: The metric is incremented when the message processing starts and decremented when the processing ends. It is necessary to count the number of messages that the application processes. Such a metric will help answer the question: is there a need to scale the service?
  Labels: app_name, broker, handler

Metric: received_processed_messages_total
  Type: Counter
  Description: The metric is incremented after a message is processed, regardless of whether the processing ended with a success or an error. This metric allows you to analyze the number of processed messages and their statuses.
  Labels: app_name, broker, handler, status

Metric: received_processed_messages_duration_seconds
  Type: Histogram
  Description: The metric is filled with the message processing time regardless of whether the processing ended with a success or an error. Time stamps are recorded just before and immediately after the processing. Then the metric is filled with their difference (in seconds).
  Labels: app_name, broker, handler

Metric: received_processed_messages_exceptions_total
  Type: Counter
  Description: The metric is incremented if any exception occurred while processing a message (except AckMessage, NackMessage, RejectMessage and SkipMessage). It can be used to draw conclusions about how many and what kind of exceptions occurred while processing messages.
  Labels: app_name, broker, handler, exception_type

Metric: published_messages_total
  Type: Counter
  Description: The metric is incremented when messages are sent, regardless of whether the sending was successful or not.
  Labels: app_name, broker, destination, status

Metric: published_messages_duration_seconds
  Type: Histogram
  Description: The metric is filled with the time the message was sent, regardless of whether the sending was successful or failed. Timestamps are written immediately before and immediately after sending. Then the metric is filled with their difference (in seconds).
  Labels: app_name, broker, destination

Metric: published_messages_exceptions_total
  Type: Counter
  Description: The metric increases if any exception occurred while sending a message. You can draw conclusions about how many and what exceptions occurred while sending messages.
  Labels: app_name, broker, destination, exception_type
```

----------------------------------------

TITLE: Allow Publisher Creation with Running Broker
DESCRIPTION: FastStream now supports creating a `@broker.publisher(...)` decorator even when the broker instance is already running. This enhancement provides more flexibility in application setup and dynamic publisher registration.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_56

LANGUAGE: APIDOC
CODE:
```
@broker.publisher(...)
  description: Can be used with an already running broker
```

----------------------------------------

TITLE: Implement FastStream Kafka Message Processing Logic
DESCRIPTION: This snippet defines the core processing function that will consume messages from an input topic and produce a response. The function's return type annotation is crucial for proper message interpretation and publishing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/Publisher/index.md#_snippet_8

LANGUAGE: python
CODE:
```
from pydantic import BaseModel

class InputMessage(BaseModel):
    message: str

class OutputMessage(BaseModel):
    response: str

async def handle_msg(msg: InputMessage) -> OutputMessage:
    return OutputMessage(response=f"Processed: {msg.message}")
```

----------------------------------------

TITLE: Integrate FastStream with Blacksheep
DESCRIPTION: This snippet demonstrates how to integrate FastStream with the Blacksheep framework. It shows how to initialize the FastStream broker at application startup and close it gracefully during shutdown, leveraging Blacksheep's lifecycle hooks.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/frameworks/index.md#_snippet_3

LANGUAGE: python
CODE:
```
{!> docs_src/integrations/http_frameworks_integrations/blacksheep.py !}
```

----------------------------------------

TITLE: Integrate FastStream with Quart
DESCRIPTION: This snippet demonstrates how to integrate FastStream with the Quart framework. It shows how to initialize the FastStream broker at application startup and close it gracefully during shutdown, leveraging Quart's lifecycle hooks.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/frameworks/index.md#_snippet_5

LANGUAGE: python
CODE:
```
{!> docs_src/integrations/http_frameworks_integrations/quart.py !}
```

----------------------------------------

TITLE: Declaring Broker-Level Dependencies in FastStream
DESCRIPTION: Illustrates how to define dependencies that apply globally to all handlers associated with a FastStream broker instance.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/dependencies/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
broker = RabbitBroker(dependencies=[Depends(...)])
```

----------------------------------------

TITLE: Publish Basic Messages to Redis Channels with RedisBroker
DESCRIPTION: Demonstrates how to initialize a `RedisBroker` instance and directly publish a simple message to a specified Redis channel using the `publish` method. This is the most straightforward approach for sending data.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/pubsub/publishing.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream.redis import RedisBroker

broker = RedisBroker("redis://localhost:6379")
```

LANGUAGE: python
CODE:
```
await broker.publish("my_message", channel="test_channel")
```

----------------------------------------

TITLE: Initialize FastStream Application with ASGI Support
DESCRIPTION: Demonstrates the basic initialization of a FastStream application with `AsgiFastStream` to enable ASGI capabilities, allowing it to be run by standard ASGI servers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asgi.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream.nats import NatsBroker
from faststream.asgi import AsgiFastStream

broker = NatsBroker()
app = AsgiFastStream(broker)
```

----------------------------------------

TITLE: FastStream Kafka: Manual Message Acknowledgement (ack/nack)
DESCRIPTION: This example illustrates how to manually acknowledge or negatively acknowledge a Kafka message in FastStream. By injecting the `KafkaMessage` object into the handler, developers can explicitly call `await msg.ack()` to commit the offset or `await msg.nack()` to prevent commitment, allowing another consumer in the group to reprocess the message.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/confluent/ack.md#_snippet_1

LANGUAGE: Python
CODE:
```
from faststream.confluent.annotations import KafkaMessage


@broker.subscriber(
    "test", group_id="group", auto_commit=False
)
async def base_handler(body: str, msg: KafkaMessage):
    await msg.ack()
    # or
    await msg.nack()
```

----------------------------------------

TITLE: Define FastStream Redis Batch Subscriber
DESCRIPTION: Configure a FastStream subscriber to consume messages in batches from a Redis list. This involves using the `@broker.subscriber` decorator with a `ListSub` object where the `batch` parameter is set to `True`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/list/batch.md#_snippet_0

LANGUAGE: Python
CODE:
```
@broker.subscriber(list=ListSub("test-list", batch=True))
```

----------------------------------------

TITLE: SASLPlaintext Object with SSL/TLS for Authentication
DESCRIPTION: The `SASLPlaintext` object is used for authentication in SASL (Simple Authentication and Security Layer) plaintext mode. It allows you to provide a username and password for authentication, optionally combined with an `ssl.SSLContext` for secure transport.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/security.md#_snippet_1

LANGUAGE: Python
CODE:
```
import ssl
from faststream.rabbit import RabbitBroker, SASLPlaintext

# Create an SSLContext object (optional, but described with SSL/TLS)
ssl_context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
ssl_context.load_verify_locations("path/to/ca_certificate.pem")

# Create SASLPlaintext object with username and password
security = SASLPlaintext(
    username="my_user",
    password="my_password",
    ssl_context=ssl_context # Can be None if no SSL/TLS
)

# Use it in the broker
broker = RabbitBroker("amqps://localhost:5671", security=security)
```

----------------------------------------

TITLE: Install FastStream with Prometheus Client
DESCRIPTION: Instructions to install the necessary FastStream package with Prometheus support using pip.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/prometheus.md#_snippet_0

LANGUAGE: shell
CODE:
```
pip install 'faststream[prometheus]'
```

----------------------------------------

TITLE: Declare Multiple FastStream NATS Direct Subject Consumers
DESCRIPTION: Illustrates the declaration of multiple FastStream consumers for NATS Direct Subjects. This snippet highlights how different handlers can subscribe to the same or different subjects, utilizing queue groups for message load balancing among consumers listening to the same subject.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/examples/direct.md#_snippet_2

LANGUAGE: python
CODE:
```
@broker.handler("test-subj-1")
async def handler1(msg: str):
    print(f"Handler 1 received: {msg}")

@broker.handler("test-subj-1", queue="test-queue")
async def handler2(msg: str):
    print(f"Handler 2 received: {msg}")

@broker.handler("test-subj-2")
async def handler3(msg: str):
    print(f"Handler 3 received: {msg}")
```

----------------------------------------

TITLE: Implement NATS Subject Pattern Access with Path and PullSub
DESCRIPTION: This code illustrates the improved Path feature for NATS subject pattern access, now compatible with PullSub batch subscriptions. It demonstrates how to define a subscriber that extracts a 'level' parameter from the subject pattern 'logs.{level}' and processes messages in batches using a pull subscription.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_30

LANGUAGE: Python
CODE:
```
from faststream import NatsBroker, PullSub

broker = NastBroker()

@broker.subscriber(
    "logs.{level}",
    steam="test-stream",
    pull_sub=PullSub(batch=True),
)
async def base_handler(
    ...,
    level: str = Path(),
):
  ...
```

----------------------------------------

TITLE: Watch NATS Key-Value Changes with FastStream Subscriber
DESCRIPTION: This snippet demonstrates how to subscribe to changes for a specific key in a NATS Key-Value bucket using the standard `@broker.subscriber` decorator. It allows an application to react to updates on a key-value pair, treating key changes as regular messages.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/jetstream/key-value.md#_snippet_1

LANGUAGE: python
CODE:
```
from faststream.nats import NatsBroker

broker = NatsBroker("nats://localhost:4222")

@broker.subscriber("key")
async def handler(msg: str):
    print(f"Received message: {msg}")
```

----------------------------------------

TITLE: Install FastStream with Confluent Kafka Support
DESCRIPTION: This command installs the FastStream library along with the necessary dependencies for integrating with Confluent Kafka, ensuring you have the correct version (0.4.0 or newer) for the new features.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_45

LANGUAGE: sh
CODE:
```
pip install "faststream[confluent]>=0.4.0"
```

----------------------------------------

TITLE: Initialize FastStream Exception Middleware
DESCRIPTION: Demonstrates the basic initialization of the FastStream ExceptionMiddleware and its registration with a Broker instance to enable top-level exception handling.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/middlewares/exception.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream import ExceptionMiddleware

exception_middleware = ExceptionMiddleware()

Broker(middlewares=[exception_middleware])
```

----------------------------------------

TITLE: FastStream Kafka Echo Subscriber Handler
DESCRIPTION: This snippet defines a simple FastStream `echo_handler` that subscribes to the "echo-topic". It processes incoming messages and returns them, implicitly publishing responses to the `reply_to` header, demonstrating a basic message processing pattern.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/howto/kafka/rpc.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.kafka import KafkaBroker

broker = KafkaBroker()
app = FastStream(broker)

@broker.subscriber("echo-topic")
async def echo_handler(msg: Any) -> Any:
    return msg
```

----------------------------------------

TITLE: Serve AsyncAPI Documentation via FastStream CLI
DESCRIPTION: This section demonstrates how to serve AsyncAPI documentation using the FastStream command-line interface. It requires an internet connection to fetch the AsyncAPI HTML via CDN. The documentation can be served from a Python module, or directly from `asyncapi.json` or `asyncapi.yaml` files.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asyncapi/hosting.md#_snippet_0

LANGUAGE: shell
CODE:
```
faststream run docs_src.getting_started.asyncapi.serve:app
```

LANGUAGE: shell
CODE:
```
faststream run asyncapi.json
```

LANGUAGE: shell
CODE:
```
faststream run asyncapi.yaml
```

----------------------------------------

TITLE: Publishing Basic Messages with FastStream KafkaBroker
DESCRIPTION: Demonstrates the fundamental way to send messages using the `KafkaBroker`'s `publish` method. It shows how to initialize the broker and then send simple Python primitives or Pydantic models to a specified Kafka topic.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/confluent/Publisher/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
from faststream.kafka import KafkaBroker

broker = KafkaBroker("kafka://localhost:9092")
```

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel

class User(BaseModel):
    name: str
    age: int

# Example publishing various types
await broker.publish("Hello, FastStream!", topic="test_topic_str")
await broker.publish({"key": "value"}, topic="test_topic_dict")
await broker.publish(User(name="John Doe", age=30), topic="test_topic_pydantic")
```

----------------------------------------

TITLE: Propagate Trace Context with CurrentSpan in FastStream
DESCRIPTION: This snippet demonstrates how to propagate OpenTelemetry trace context across service calls using FastStream's `CurrentSpan` object. It shows injecting the current span's context into HTTP headers, which can then be used by an external client to continue the trace. This is crucial for end-to-end observability in distributed systems.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/opentelemetry/tracing.md#_snippet_5

LANGUAGE: python
CODE:
```
from opentelemetry import trace, propagate
from faststream.opentelemetry import CurrentSpan

@broker.subscriber("symbol")
async def handler(
    msg: str,
    span: CurrentSpan,
) -> None:
    headers = {}
    propagate.inject(headers, context=trace.set_span_in_context(span))
    price = await exchange_client.get_symbol_price(
        msg,
        headers=headers,
    )
```

----------------------------------------

TITLE: Configure FastStream Subscriber for Limited Retries
DESCRIPTION: When the `retry` flag is set to an integer, the message will be placed back in the queue upon error, and the number of retries will be limited to the specified integer value. This provides controlled re-processing attempts.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/ack.md#_snippet_2

LANGUAGE: Python
CODE:
```
@broker.subscriber("test", retry=3)     # make up to 3 attempts
async def base_handler(body: str):
    ...
```

----------------------------------------

TITLE: Integrate FastStream AsyncAPI Docs with FastAPI (Option 2: ASGI Mount)
DESCRIPTION: This alternative integration method demonstrates mounting FastStream's AsyncAPI ASGI application directly into a FastAPI application. It leverages `make_asyncapi_asgi` to create a dedicated ASGI application for the documentation, which is then mounted at a specific path within the FastAPI instance.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asyncapi/hosting.md#_snippet_3

LANGUAGE: python
CODE:
```
from typing import AsyncIterator
from contextlib import asynccontextmanager

from fastapi import FastAPI
from faststream import FastStream
from faststream.asgi import make_asyncapi_asgi
from faststream.kafka import KafkaBroker

broker = KafkaBroker()
fs_app = FastStream(broker)

@broker.subscriber('topic')
async def my_handler(msg: str) -> None:
    print(msg)

@asynccontextmanager
async def broker_lifespan(app: FastAPI) -> AsyncIterator[None]:
    async with broker:
        await broker.start()
        yield

app = FastAPI(lifespan=broker_lifespan)
app.mount("/docs/asyncapi", make_asyncapi_asgi(fs_app))
```

----------------------------------------

TITLE: Serving Django with Gunicorn and Uvicorn Workers
DESCRIPTION: Command-line instruction to deploy the Django ASGI application using Gunicorn, specifying Uvicorn workers for efficient process management and ASGI compatibility.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/django/index.md#_snippet_2

LANGUAGE: Bash
CODE:
```
gunicorn asgi:app --workers 4 --worker-class uvicorn.workers.UvicornWorker
```

----------------------------------------

TITLE: FastStream Message Object Attributes
DESCRIPTION: Defines the core attributes available on a message object processed by FastStream applications, including raw body, decoded content, metadata, and routing information. These attributes provide access to various parts of an incoming message.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/includes/message/attrs.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
body: bytes
decoded_body: Any
content_type: str
reply_to: str
headers: dict[str, Any]
path: dict[str, Any]
message_id: str
correlation_id: str
```

----------------------------------------

TITLE: Access Message Attributes with FastStream KafkaMessage
DESCRIPTION: Demonstrates how to access message attributes such as headers, key, offset, partition, timestamp, topic, and value using the `KafkaMessage` object, which acts as a unified FastStream wrapper around native broker library messages. This example specifically shows how to print message headers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/confluent/message.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
headers(): Sequence[Tuple[str, bytes]]
key(): Optional[Union[str, bytes]]
offset(): int
partition(): int
timestamp(): Tuple[int, int]
topic(): str
value(): Optional[Union[str, bytes]]
```

LANGUAGE: python
CODE:
```
from faststream.confluent import KafkaMessage

@broker.subscriber("test")
async def base_handler(
    body: str,
    msg: KafkaMessage,
):
    print(msg.headers)
```

----------------------------------------

TITLE: RabbitMQ Header Exchange: Complete Example
DESCRIPTION: Provides a comprehensive example demonstrating the setup of a Header Exchange in RabbitMQ, including the declaration of the exchange and associated queues, consumer subscriptions, and the publishing of messages to illustrate routing logic.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/examples/headers.md#_snippet_0

LANGUAGE: python
CODE:
```
{! docs_src/rabbit/subscription/header.py !}
```

----------------------------------------

TITLE: NATS Pattern Example Initialization
DESCRIPTION: Demonstrates the complete setup for a FastStream application using NATS, including broker initialization and the definition of multiple consumers subscribed to different subject patterns (`*.info`, `*.error`) with a shared queue group for load balancing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/examples/pattern.md#_snippet_0

LANGUAGE: Python
CODE:
```
from faststream import FastStream
from faststream.nats import NatsBroker

broker = NatsBroker("nats://localhost:4222")
app = FastStream(broker)

@broker.subscriber("*.info", queue="test-queue")
async def handler1(msg: str):
    print(f"handler1: {msg}")

@broker.subscriber("*.info", queue="test-queue")
async def handler2(msg: str):
    print(f"handler2: {msg}")

@broker.subscriber("*.error")
async def handler3(msg: str):
    print(f"handler3: {msg}")
```

----------------------------------------

TITLE: NATS Message Distribution to Info Pattern (2)
DESCRIPTION: Shows the continued distribution of messages to consumers listening to the `*.info` pattern. This example reinforces how messages are load-balanced among handlers within the same queue group.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/examples/pattern.md#_snippet_3

LANGUAGE: Python
CODE:
```
await broker.publish("Hello!", subject="user.info")
```

----------------------------------------

TITLE: NATS Consumer Pattern Announcement
DESCRIPTION: Highlights the declaration of NATS consumers, showing how they subscribe to subject patterns like `*.info` and `*.error`. It emphasizes the use of `queue_group` to emulate load balancing among consumers listening to the same pattern within a service.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/examples/pattern.md#_snippet_1

LANGUAGE: Python
CODE:
```
@broker.subscriber("*.info", queue="test-queue")
async def handler1(msg: str):
    print(f"handler1: {msg}")

@broker.subscriber("*.info", queue="test-queue")
async def handler2(msg: str):
    print(f"handler2: {msg}")

@broker.subscriber("*.error")
async def handler3(msg: str):
    print(f"handler3: {msg}")
```

----------------------------------------

TITLE: Publish Message 2 to NATS Direct Subject 'test-subj-1'
DESCRIPTION: Demonstrates publishing the second message to the 'test-subj-1' NATS Direct Subject. Similar to the first message, it will be distributed to one of the available consumers (handler1 or handler2) in the queue group.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/examples/direct.md#_snippet_4

LANGUAGE: python
CODE:
```
await broker.publish("2", subject="test-subj-1")
```

----------------------------------------

TITLE: Subscribing Consumers to Topic Exchange
DESCRIPTION: This snippet demonstrates how to subscribe multiple consumers to the previously created Topic exchange using the advertised queues. It highlights how different handlers can share a queue, emulating load balancing among several consumers within a service.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/examples/topic.md#_snippet_2

LANGUAGE: Python
CODE:
```
{! docs_src/rabbit/subscription/topic.py [ln:13-25]!}
```

----------------------------------------

TITLE: Disable Automatic Type Casting in FastStream Brokers
DESCRIPTION: This snippet demonstrates how to disable automatic type casting, `Depends`, and `Context` by setting `apply_types=False` during broker initialization. This is useful when integrating FastStream with other frameworks that have their own dependency systems. If only type casting needs to be disabled, `validate=False` should be used instead.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/dependencies/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
from faststream.kafka import KafkaBroker
broker = KafkaBroker(..., apply_types=False)
```

LANGUAGE: Python
CODE:
```
from faststream.confluent import KafkaBroker
broker = KafkaBroker(..., apply_types=False)
```

LANGUAGE: Python
CODE:
```
from faststream.rabbit import RabbitBroker
broker = RabbitBroker(..., apply_types=False)
```

LANGUAGE: Python
CODE:
```
from faststream.nats import NatsBroker
broker = NatsBroker(..., apply_types=False)
```

LANGUAGE: Python
CODE:
```
from faststream.redis import RedisBroker
broker = RedisBroker(..., apply_types=False)
```

----------------------------------------

TITLE: Configure RabbitBroker with Public AsyncAPI URL
DESCRIPTION: Demonstrates how to initialize a `RabbitBroker` instance, providing both the actual connection URL and a separate `asyncapi_url` to hide sensitive connection secrets in the public AsyncAPI schema. This allows for a more secure public representation of the broker's connection.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_63

LANGUAGE: python
CODE:
```
broker = RabbitBroker(
    "amqp://guest:guest@localhost:5672/",  # Connection URL
    asyncapi_url="amqp://****:****@localhost:5672/",  # Public schema URL
)
```

----------------------------------------

TITLE: FastStream CLI Flag Interpretation Rules
DESCRIPTION: Illustrates how FastStream CLI interprets various command-line flags, converting them into `bool`, `str`, or `list[str]` types within the application context. Examples include boolean flags, key-value pairs, and multiple values for a single key.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/cli/index.md#_snippet_10

LANGUAGE: shell
CODE:
```
faststream run app:app --flag             # flag = True
faststream run app:app --no-flag          # flag = False
faststream run app:app --my-flag          # my_flag = True
faststream run app:app --key value        # key = "value"
faststream run app:app --key 1 2          # key = ["1", "2"]
faststream run app:app --key 1 --key 2    # key = ["1", "2"]
```

----------------------------------------

TITLE: Accessing Message Headers with FastStream Context
DESCRIPTION: This snippet demonstrates how to access a specific header field, such as 'user', from a message using `Context` in FastStream. It allows direct retrieval of header values within a subscriber function by specifying the header path.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/includes/message/headers.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream import Context

@broker.subscriber("test")
async def base_handler(
    body: str,
    user: str = Context("message.headers.user"),
):
    ...
```

----------------------------------------

TITLE: Accessing Kafka Message Headers using KafkaMessage Object
DESCRIPTION: This snippet demonstrates how to access the full `KafkaMessage` object within a FastStream subscriber function. It shows how to retrieve message headers, which are part of the `KafkaMessage` object, providing direct access to all native broker message attributes.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/message.md#_snippet_1

LANGUAGE: python
CODE:
```
from faststream.kafka import KafkaMessage

@broker.subscriber("test")
async def base_handler(
    body: str,
    msg: KafkaMessage,
):
    print(msg.headers)
```

----------------------------------------

TITLE: Configure Redis Stream Batch Processing with FastStream
DESCRIPTION: This Python code demonstrates how to configure a FastStream Redis subscriber to process messages in batches. It uses `StreamSub` with `batch=True` and `max_records=3` to limit the number of messages processed in a single batch, ensuring that the `on_input_data` function receives a list of strings.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_43

LANGUAGE: Python
CODE:
```
@broker.subscriber(stream=StreamSub("input", batch=True, max_records=3))
async def on_input_data(msgs: list[str]):
    assert len(msgs) <= 3
```

----------------------------------------

TITLE: Install Protobuf Dependencies
DESCRIPTION: Instructions to install `grpcio-tools` for working with Protobuf in Python. This is a prerequisite for defining and generating Protobuf messages.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/serialization/examples.md#_snippet_0

LANGUAGE: console
CODE:
```
pip install grpcio-tools
```

----------------------------------------

TITLE: Integrate FastStream with Falcon
DESCRIPTION: This snippet demonstrates how to integrate FastStream with the Falcon framework. It shows how to initialize the FastStream broker at application startup and close it gracefully during shutdown, leveraging Falcon's lifecycle hooks.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/frameworks/index.md#_snippet_4

LANGUAGE: python
CODE:
```
{!> docs_src/integrations/http_frameworks_integrations/falcon.py !}
```

----------------------------------------

TITLE: RabbitMQ Header Exchange: Announcing Exchange and Queues
DESCRIPTION: Illustrates the process of declaring a Header exchange and binding multiple queues to it. The `x-match` argument is used to specify whether queue binding arguments should match message headers entirely or partially.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/examples/headers.md#_snippet_1

LANGUAGE: python
CODE:
```
{! docs_src/rabbit/subscription/header.py [ln:7-23] !}
```

----------------------------------------

TITLE: Importing RabbitMQ Specific Context Annotations
DESCRIPTION: Illustrates how to import `Annotated` aliases specific to RabbitMQ from `faststream.rabbit.annotations`. These aliases, including `Logger`, `ContextRepo`, `RabbitMessage`, `RabbitBroker`, `RabbitProducer`, and `NoCast`, facilitate type-hinted access to RabbitMQ-related context objects.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/existed.md#_snippet_5

LANGUAGE: Python
CODE:
```
from faststream.rabbit.annotations import (
    Logger, ContextRepo, RabbitMessage,
    RabbitBroker, RabbitProducer, NoCast,
)
```

----------------------------------------

TITLE: Serving Django with Uvicorn ASGI Server
DESCRIPTION: Command-line instruction to run the Django ASGI application using the Uvicorn server, configured with 4 worker processes for concurrent request handling.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/django/index.md#_snippet_1

LANGUAGE: Bash
CODE:
```
uvicorn asgi:app --workers 4
```

----------------------------------------

TITLE: Enable SSL/TLS with BaseSecurity Object in FastStream Redis
DESCRIPTION: The `BaseSecurity` object wraps an `ssl.SSLContext` object, enabling SSL/TLS encryption for secure communication between FastStream services and Redis. This ensures data integrity and confidentiality for message broker interactions.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/security.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream.redis import RedisBroker
from faststream.security import BaseSecurity
import ssl

broker = RedisBroker(
    host="localhost",
    port=6379,
    security=BaseSecurity(
        ssl_context=ssl.create_default_context(),
    ),
)
```

----------------------------------------

TITLE: Publishing Multiple Responses from a FastStream Subscriber
DESCRIPTION: Illustrates how to use multiple publisher objects within a FastStream subscriber function to send different messages to distinct outputs. This example shows a subscriber handling an incoming message and publishing two separate responses using pre-configured publisher instances.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/publishing/direct.md#_snippet_1

LANGUAGE: Python
CODE:
```
@broker.subscriber("in")
async def handle(msg) -> str:
    await publisher1.publish("Response-1")
    await publisher2.publish("Response-2")
```

----------------------------------------

TITLE: Run FastStream Code Linting and Formatting
DESCRIPTION: This script automatically applies code formatting and fixes common linting issues, ensuring adherence to project coding standards. It is crucial to run this after making any code changes to maintain consistent code quality.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/template/index.md#_snippet_14

LANGUAGE: bash
CODE:
```
./scripts/lint.sh
```

----------------------------------------

TITLE: Example: Redefine `message_id` with Custom Header using FastStream Parser
DESCRIPTION: This example demonstrates a complete implementation of a custom message parser in FastStream. It shows how to redefine the `message_id` by extracting it from a custom header within the incoming message. The parser integrates with a specific broker (e.g., Kafka, RabbitMQ, NATS, Redis) and modifies the `StreamMessage` before further processing. This allows for custom message routing or tracking based on application-specific headers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/serialization/parser.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Callable, Awaitable
from aiokafka import ConsumerRecord
from faststream.kafka import KafkaBroker, KafkaMessage, KafkaRouter

broker = KafkaBroker("localhost:9092")
router = KafkaRouter(broker)

class CustomKafkaMessage(KafkaMessage):
    @classmethod
    async def parse_message(
        cls,
        message: ConsumerRecord,
        original_parser: Callable[[ConsumerRecord], Awaitable[KafkaMessage]],
    ) -> "CustomKafkaMessage":
        parsed_message = await original_parser(message)
        custom_id_bytes = next(
            (v for k, v in message.headers if k == "x-message-id"),
            None
        )
        if custom_id_bytes:
            parsed_message.message_id = custom_id_bytes.decode()
        return cls(**parsed_message.dict())

@router.subscriber("test-topic", parser=CustomKafkaMessage.parse_message)
async def handle_message(msg: str, message_id: str):
    print(f"Received message: {msg} with ID: {message_id}")

@router.publisher("test-topic")
async def publish_message(msg: str, custom_id: str):
    await router.broker.publish(
        msg, "test-topic", headers=[("x-message-id", custom_id.encode())]
    )
```

LANGUAGE: Python
CODE:
```
from typing import Callable, Awaitable
from confluent_kafka import Message
from faststream.confluent import KafkaBroker, KafkaMessage, KafkaRouter

broker = KafkaBroker("localhost:9092")
router = KafkaRouter(broker)

class CustomConfluentMessage(KafkaMessage):
    @classmethod
    async def parse_message(
        cls,
        message: Message,
        original_parser: Callable[[Message], Awaitable[KafkaMessage]],
    ) -> "CustomConfluentMessage":
        parsed_message = await original_parser(message)
        custom_id_bytes = next(
            (v for k, v in message.headers() if k == "x-message-id"),
            None
        )
        if custom_id_bytes:
            parsed_message.message_id = custom_id_bytes.decode()
        return cls(**parsed_message.dict())

@router.subscriber("test-topic", parser=CustomConfluentMessage.parse_message)
async def handle_message(msg: str, message_id: str):
    print(f"Received message: {msg} with ID: {message_id}")

@router.publisher("test-topic")
async def publish_message(msg: str, custom_id: str):
    await router.broker.publish(
        msg, "test-topic", headers=[("x-message-id", custom_id.encode())]
    )
```

LANGUAGE: Python
CODE:
```
from typing import Callable, Awaitable
from aio_pika import IncomingMessage
from faststream.rabbit import RabbitBroker, RabbitMessage, RabbitRouter

broker = RabbitBroker("amqp://guest:guest@localhost:5672/")
router = RabbitRouter(broker)

class CustomRabbitMessage(RabbitMessage):
    @classmethod
    async def parse_message(
        cls,
        message: IncomingMessage,
        original_parser: Callable[[IncomingMessage], Awaitable[RabbitMessage]],
    ) -> "CustomRabbitMessage":
        parsed_message = await original_parser(message)
        custom_id = message.headers.get("x-message-id")
        if custom_id:
            parsed_message.message_id = custom_id
        return cls(**parsed_message.dict())

@router.subscriber("test-queue", parser=CustomRabbitMessage.parse_message)
async def handle_message(msg: str, message_id: str):
    print(f"Received message: {msg} with ID: {message_id}")

@router.publisher("test-queue")
async def publish_message(msg: str, custom_id: str):
    await router.broker.publish(
        msg, "test-queue", headers={"x-message-id": custom_id}
    )
```

LANGUAGE: Python
CODE:
```
from typing import Callable, Awaitable
from nats.aio.msg import Msg
from faststream.nats import NatsBroker, NatsMessage, Nats
```

----------------------------------------

TITLE: RabbitMQ Header Exchange: Subscribing Consumers
DESCRIPTION: Demonstrates how to subscribe multiple consumers to the declared Header exchange using the announced queues. This setup emulates the work of several consumers and shows how messages are load-balanced between them, even if subscribed to the same queue within a single service.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/examples/headers.md#_snippet_2

LANGUAGE: python
CODE:
```
{! docs_src/rabbit/subscription/header.py [ln:26-43] !}
```

----------------------------------------

TITLE: Consuming NATS JetStream Messages with Pull Subscriber in FastStream
DESCRIPTION: This snippet demonstrates how to configure a FastStream subscriber to use a NATS JetStream Pull consumer. The `pull_sub` argument allows specifying a `batch_size` (number of messages to request per pull) and a `timeout` (how long to wait for the batch to fill). Messages are processed individually by the handler, even when pulled in batches, unless `batch=True` is explicitly set in `PullSub` to receive a list of messages.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/jetstream/pull.md#_snippet_0

LANGUAGE: Python
CODE:
```
from faststream import FastStream, NatsBroker
from faststream.nats.annotations import NatsMessage
from faststream.nats.pull_sub import PullSub

broker = NatsBroker("nats://localhost:4222")
app = FastStream(broker)

@broker.subscriber(
    "my_subject",
    pull_sub=PullSub(batch_size=10, timeout=5)
)
async def handle_message(msg: NatsMessage):
    print(f"Received message: {msg.data.decode()}")

# Example for consuming a list of messages in a batch
@broker.subscriber(
    "my_batch_subject",
    pull_sub=PullSub(batch_size=5, batch=True)
)
async def handle_batch_messages(msgs: list[NatsMessage]):
    print(f"Received {len(msgs)} messages in batch:")
    for msg in msgs:
        print(f"  - {msg.data.decode()}")
```

----------------------------------------

TITLE: Configure AsyncAPI Documentation for FastStream FastAPI Routers
DESCRIPTION: When FastStream is used as a router for FastAPI, it automatically registers endpoints to host AsyncAPI documentation. This snippet demonstrates how to configure the `schema_url` and `include_in_schema` parameters for various message broker routers to control the documentation generation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/fastapi/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
from faststream.kafka.fastapi import KafkaRouter

router = KafkaRouter(
    ...,
    schema_url="/asyncapi",
    include_in_schema=True,
)
```

LANGUAGE: Python
CODE:
```
from faststream.confluent.fastapi import KafkaRouter

router = KafkaRouter(
    ...,
    schema_url="/asyncapi",
    include_in_schema=True,
)
```

LANGUAGE: Python
CODE:
```
from faststream.rabbit.fastapi import RabbitRouter

router = RabbitRouter(
    ...,
    schema_url="/asyncapi",
    include_in_schema=True,
)
```

LANGUAGE: Python
CODE:
```
from faststream.nats.fastapi import NatsRouter

router = NatsRouter(
    ...,
    schema_url="/asyncapi",
    include_in_schema=True,
)
```

LANGUAGE: Python
CODE:
```
from faststream.redis.fastapi import RedisRouter

router = RedisRouter(
    ...,
    schema_url="/asyncapi",
    include_in_schema=True,
)
```

----------------------------------------

TITLE: Install FastStream CLI
DESCRIPTION: Provides the shell command to install the FastStream command-line interface. This installation includes necessary dependencies to enable CLI functionality for managing FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/README.md#_snippet_5

LANGUAGE: shell
CODE:
```
pip install "faststream[cli]"
```

----------------------------------------

TITLE: Initialize FastStream KafkaBroker
DESCRIPTION: This snippet shows how to create a `KafkaBroker` instance, connecting to a Kafka server at `localhost:9092`. The broker is then wrapped into a `FastStream` application object, enabling application startup and management via CLI.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/Subscriber/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
broker = KafkaBroker("localhost:9092")
app = FastStream(broker)
```

----------------------------------------

TITLE: Import FastStream and KafkaBroker for Consumer Setup
DESCRIPTION: Essential imports for setting up a FastStream application with Kafka. This snippet includes `FastStream` for the core application and `KafkaBroker` to interact with Kafka, along with `BaseModel` from Pydantic for data validation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/confluent/Subscriber/index.md#_snippet_1

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.kafka import KafkaBroker
from pydantic import BaseModel
```

----------------------------------------

TITLE: Apply Router-Level Middleware to FastStream BrokerRouter
DESCRIPTION: Shows how to apply `MyMiddleware` to a `BrokerRouter`. Middlewares at this level only affect subscribers and objects created by that specific router.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/middlewares/index.md#_snippet_2

LANGUAGE: python
CODE:
```
BrokerRouter(middlewares=[MyMiddleware])
```

----------------------------------------

TITLE: Test FastStream Applications with Real Message Brokers
DESCRIPTION: To test FastStream applications against a real message broker, pass the `with_real` parameter to the `TestClient` context manager. This approach allows utilizing all testing features while interacting with an unpatched broker. Note that in this mode, you must manually wait for message consumption using `handler.wait_call(timeout)`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/test.md#_snippet_6

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/subscription/kafka/real_testing.py [ln:1-5,9-25] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/subscription/confluent/real_testing.py [ln:1-5,9-25] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/subscription/rabbit/real_testing.py [ln:1-5,9-25] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/subscription/nats/real_testing.py [ln:1-5,9-25] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/subscription/redis/real_testing.py [ln:1-5,9-25] !}
```

----------------------------------------

TITLE: Publish Message with Specific Partition Key in FastStream
DESCRIPTION: This snippet demonstrates how to explicitly include a partition key when publishing a message through a FastStream publisher. The `key` parameter is crucial for directing the message to a specific partition within the Kafka topic.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/confluent/Publisher/using_a_key.md#_snippet_1

LANGUAGE: python
CODE:
```
await to_output_data.publish(message, key="my-partition-key")
```

----------------------------------------

TITLE: Importing Redis Specific Context Annotations
DESCRIPTION: Illustrates how to import `Annotated` aliases specific to Redis from `faststream.redis.annotations`. These aliases, including `Logger`, `ContextRepo`, `RedisMessage`, `RedisBroker`, `Redis`, and `NoCast`, facilitate type-hinted access to Redis-related context objects.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/existed.md#_snippet_9

LANGUAGE: Python
CODE:
```
from faststream.redis.annotations import (
    Logger, ContextRepo, RedisMessage,
    RedisBroker, Redis, NoCast,
)
```

----------------------------------------

TITLE: Define FastStream Publisher with Direct Call
DESCRIPTION: Example of defining and using a FastStream publisher via a direct method call, providing an alternative to the decorator approach for various message brokers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/publishing/test.md#_snippet_1

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/kafka/direct.py [ln:7-11] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/confluent/direct.py [ln:7-11] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/rabbit/direct.py [ln:7-11] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/nats/direct.py [ln:7-11] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/redis/direct.py [ln:7-11] !}
```

----------------------------------------

TITLE: Set FastStream Application Logging Level via CLI
DESCRIPTION: Explains how to adjust the logging level for the entire FastStream application and its broker using the --log-level flag with the faststream run command.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/logging.md#_snippet_1

LANGUAGE: console
CODE:
```
faststream run serve:app --log-level debug
```

----------------------------------------

TITLE: FastStream CLI `run` Reload Extension Option
DESCRIPTION: The `faststream run` command supports a `--reload-extension` option to watch for changes in specified file types, such as `.env` files. This allows the application to automatically reload upon relevant file modifications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_61

LANGUAGE: APIDOC
CODE:
```
faststream run --reload-extension .env
  description: Watch for changes in specified file types (e.g., .env)
```

----------------------------------------

TITLE: Run Local NATS Broker for Testing
DESCRIPTION: Docker command to start a local NATS server container with JetStream enabled, suitable for testing FastStream applications integrated with NATS.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/index.md#_snippet_3

LANGUAGE: bash
CODE:
```
bash docker run -d --rm -p 4222:4222 --name test-mq nats -js
```

----------------------------------------

TITLE: Run Local RabbitMQ Broker for Testing
DESCRIPTION: Docker command to start a local RabbitMQ broker container, providing a test environment for FastStream applications using RabbitMQ.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/index.md#_snippet_2

LANGUAGE: bash
CODE:
```
docker run -d --rm -p 5672:5672 --name test-mq rabbitmq:alpine
```

----------------------------------------

TITLE: Merge RabbitBroker Connection URL with Keyword Arguments
DESCRIPTION: Illustrates how `RabbitBroker` merges connection parameters, allowing the main connection data to be defined as a URL string while customizing specific details like the host using keyword arguments. The final URL is automatically constructed from these combined inputs.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_64

LANGUAGE: python
CODE:
```
broker = RabbitBroker(
    "amqp://guest:guest@localhost:5672/",
    host="127.0.0.1",
)

# amqp://guest:guest@127.0.0.1:5672/ - The final URL
```

----------------------------------------

TITLE: Manually Retrieve File Content from NATS Object Storage
DESCRIPTION: This snippet illustrates how to manually retrieve the content of a file from a NATS Object Storage bucket. It uses the `ObjectStorage` annotation to access the current bucket and then calls the `get` method to retrieve the file's content as a readable object, which can then be read into bytes.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/jetstream/object.md#_snippet_2

LANGUAGE: Python
CODE:
```
from faststream.nats.annotations import ObjectStorage
from io import BytesIO

@broker.after_startup
async def get_file_content(bucket: ObjectStorage):
    content = await bucket.get("file.txt")
    assert content.read() == b"Hello FastStream!"
```

----------------------------------------

TITLE: RabbitMQ Fanout Message Publishing
DESCRIPTION: This snippet illustrates how messages are published to a Fanout exchange. It highlights that all messages sent to a Fanout exchange are broadcast to every subscribed queue, regardless of routing keys or queue arguments.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/examples/fanout.md#_snippet_3

LANGUAGE: python
CODE:
```
{! docs_src/rabbit/subscription/fanout.py [ln:30.5,31.5,32.5,33.5] !}
```

----------------------------------------

TITLE: FastStream RabbitBroker Constructor Options
DESCRIPTION: Details new constructor options for `RabbitBroker` allowing fine-grained control over channel settings, including the channel number, enabling publisher confirms, and configuring error handling for returned messages.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_24

LANGUAGE: APIDOC
CODE:
```
RabbitBroker(
  channel_number: int,
  publisher_confirms: bool,
  on_return_raises: bool
)
  channel_number: int - The specific channel number to use for the broker's operations.
  publisher_confirms: bool - If True, enables publisher confirms for reliable message delivery.
  on_return_raises: bool - If True, an exception will be raised when a message is returned by the broker.
```

----------------------------------------

TITLE: Publishing with FastStream RabbitQueue and RabbitExchange Objects
DESCRIPTION: Illustrates how to use `RabbitQueue` and `RabbitExchange` objects directly as arguments to the `broker.publish` method for more explicit control over queue and exchange definitions, allowing the broker to create them if they don't exist.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/publishing.md#_snippet_1

LANGUAGE: python
CODE:
```
from faststream.rabbit import RabbitExchange, RabbitQueue

await broker.publish(
    "Hi!",
    queue=RabbitQueue("test"),
    exchange=RabbitExchange("test")
)
```

----------------------------------------

TITLE: Declaring a Direct Exchange in FastStream
DESCRIPTION: Demonstrates the default declaration of a Direct Exchange in FastStream using a broker subscriber, highlighting its simplicity and how it's used by default.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/examples/direct.md#_snippet_0

LANGUAGE: Python
CODE:
```
@broker.subscriber("test_queue", "test_exchange")
async def handler():
    ...
```

----------------------------------------

TITLE: Context Usage with Python Annotated Feature in FastStream
DESCRIPTION: Illustrates using FastStream's Context with Python's `Annotated` feature, providing a `pytest.fixture`-like experience for dependency injection across various messaging brokers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
# Python code from docs_src/getting_started/context/kafka/annotated.py
# Actual content not provided in input.
```

LANGUAGE: Python
CODE:
```
# Python code from docs_src/getting_started/context/confluent/annotated.py
# Actual content not provided in input.
```

LANGUAGE: Python
CODE:
```
# Python code from docs_src/getting_started/context/rabbit/annotated.py
# Actual content not provided in input.
```

LANGUAGE: Python
CODE:
```
# Python code from docs_src/getting_started/context/nats/annotated.py
# Actual content not provided in input.
```

LANGUAGE: Python
CODE:
```
# Python code from docs_src/getting_started/context/redis/annotated.py
# Actual content not provided in input.
```

----------------------------------------

TITLE: Msgpack Serialization Example in FastStream
DESCRIPTION: Demonstrates how to implement a custom Msgpack decoder and encoder within a `FastStream` application. It shows how to serialize Python dictionaries to Msgpack bytes and deserialize them back, highlighting Msgpack's schema-less nature.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/serialization/examples.md#_snippet_6

LANGUAGE: Python
CODE:
```
import asyncio
import msgpack

from faststream import FastStream, Logger
from faststream.kafka import KafkaBroker

broker = KafkaBroker("localhost:9092")
app = FastStream(broker)

def custom_decoder(raw_msg: bytes) -> dict:
    return msgpack.unpackb(raw_msg)


def custom_encoder(msg: dict) -> bytes:
    return msgpack.packb(msg)


@broker.publisher("in", encoder=custom_encoder)
@broker.subscriber("in", decoder=custom_decoder)
async def handle_msg(msg: dict, logger: Logger) -> dict:
    logger.info(msg)
    return {"name": "John", "age": 25}


@app.on_startup
async def startup():
    await broker.start()
    await handle_msg({"name": "John", "age": 25})


@app.on_shutdown
async def shutdown():
    await broker.close()
```

----------------------------------------

TITLE: Configure OpenTelemetry TracerProvider for FastStream
DESCRIPTION: Sets up the OpenTelemetry TracerProvider with a service name resource and configures a BatchSpanProcessor to export traces via OTLP gRPC. This example directs traces to a local endpoint, typically used for a collector like Grafana Tempo.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/opentelemetry/index.md#_snippet_1

LANGUAGE: python
CODE:
```
from opentelemetry import trace
from opentelemetry.sdk.resources import Resource
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter
from opentelemetry.sdk.trace.export import BatchSpanProcessor

resource = Resource.create(attributes={"service.name": "faststream"})
tracer_provider = TracerProvider(resource=resource)
trace.set_tracer_provider(tracer_provider)
exporter = OTLPSpanExporter(endpoint="http://localhost:4317")
processor = BatchSpanProcessor(exporter)
tracer_provider.add_span_processor(processor)
```

----------------------------------------

TITLE: Define Custom Decoder Reusing Original FastStream Decoder
DESCRIPTION: Illustrates how to define an asynchronous custom decoder that wraps and reuses the original FastStream decoder function. This approach allows for extending or modifying the default decoding behavior while still leveraging the built-in logic, applicable to various FastStream brokers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/serialization/decoder.md#_snippet_1

LANGUAGE: python
CODE:
```
from typing import Callable, Awaitable
from faststream.types import DecodedMessage
from faststream.kafka import KafkaMessage

async def decoder(
    msg: KafkaMessage,
    original_decoder: Callable[[KafkaMessage], Awaitable[DecodedMessage]],
) -> DecodedMessage:
    return await original_decoder(msg)
```

LANGUAGE: python
CODE:
```
from typing import Callable, Awaitable
from faststream.types import DecodedMessage
from faststream.confluent import KafkaMessage

async def decoder(
    msg: KafkaMessage,
    original_decoder: Callable[[KafkaMessage], Awaitable[DecodedMessage]],
) -> DecodedMessage:
    return await original_decoder(msg)
```

LANGUAGE: python
CODE:
```
from typing import Callable, Awaitable
from faststream.types import DecodedMessage
from faststream.rabbit import RabbitMessage

async def decoder(
    msg: RabbitMessage,
    original_decoder: Callable[[RabbitMessage], Awaitable[DecodedMessage]],
) -> DecodedMessage:
    return await original_decoder(msg)
```

LANGUAGE: python
CODE:
```
from typing import Callable, Awaitable
from faststream.types import DecodedMessage
from faststream.nats import NatsMessage

async def decoder(
    msg: NatsMessage,
    original_decoder: Callable[[NatsMessage], Awaitable[DecodedMessage]],
) -> DecodedMessage:
    return await original_decoder(msg)
```

LANGUAGE: python
CODE:
```
from typing import Callable, Awaitable
from faststream.types import DecodedMessage
from faststream.redis import RedisMessage

async def decoder(
    msg: RedisMessage,
    original_decoder: Callable[[RedisMessage], Awaitable[DecodedMessage]],
) -> DecodedMessage:
    return await original_decoder(msg)
```

----------------------------------------

TITLE: Generate Dynamic Single Message Payload in FastStream
DESCRIPTION: This snippet demonstrates how to dynamically generate a single message payload before sending it in a FastStream task. By replacing the `message` option with an async function, users can collect data from databases or external APIs to construct the payload at runtime.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/scheduling.md#_snippet_5

LANGUAGE: python
CODE:
```
async def collect_information_to_send():
    return "Message to send"

taskiq_broker.task(
    message=collect_information_to_send,
    ...
)
```

----------------------------------------

TITLE: Manual Message Acknowledgement in FastStream Nats
DESCRIPTION: For custom acknowledgement logic, you can directly access the `NatsMessage` object from the context and call `ack()`, `nack()`, or `reject()` methods. FastStream will detect manual acknowledgement and skip its default processing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/jetstream/ack.md#_snippet_1

LANGUAGE: python
CODE:
```
from faststream.nats.annotations import NatsMessage

@broker.subscriber("test")
async def base_handler(body: str, msg: NatsMessage):
    await msg.ack()
    # or
    await msg.nack()
    # or
    await msg.reject()
```

----------------------------------------

TITLE: RabbitMQ Header Exchange: Message 3 Distribution
DESCRIPTION: Presents the code for publishing Message 3. It is routed to `handler1` as it has become free, continuing the load balancing pattern.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/examples/headers.md#_snippet_5

LANGUAGE: python
CODE:
```
{! docs_src/rabbit/subscription/header.py [ln:50.5]!}
```

----------------------------------------

TITLE: Topic Exchange Message Distribution Example 2
DESCRIPTION: This snippet demonstrates the distribution of the second message. It highlights how messages are load-balanced among consumers subscribed to the same queue, with the message being sent to an available handler when another is busy.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/examples/topic.md#_snippet_4

LANGUAGE: Python
CODE:
```
{! docs_src/rabbit/subscription/topic.py [ln:31.5]!}
```

----------------------------------------

TITLE: RPC Subscriber Returning a FastStream Response Object
DESCRIPTION: Explains how to use the generic `Response` class within an RPC subscriber to return a message body along with custom metadata like headers and a correlation ID. This provides more control over the response message properties beyond just the body.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/rpc.md#_snippet_4

LANGUAGE: python
CODE:
```
from faststream import Response
from faststream.rabbit import RabbitBroker

broker = RabbitBroker()

@broker.subscriber("test")
async def handle(msg):
    return Response(
        body=f"Processed: {msg}",
        headers={"x-token": "some-token"},
        correlation_id="some-correlation-id",
    )
```

----------------------------------------

TITLE: FastStream Internal Message Filtering Logic
DESCRIPTION: Illustrates the core pseudocode logic FastStream uses to determine which handler processes an incoming message. It shows that handlers are iterated in order, and the first one whose filter returns true processes the message, otherwise a `HandlerNotFoundError` is raised.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/filtering.md#_snippet_3

LANGUAGE: Python
CODE:
```
for handler in subscriber.handlers:
    if await handler.filter(msg):
        return await handler.process(msg)

raise HandlerNotFoundError
```

----------------------------------------

TITLE: Create Python Virtual Environment with venv
DESCRIPTION: Creates an isolated Python virtual environment named 'venv' in the current directory, ensuring project dependencies do not conflict with system-wide installations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/CONTRIBUTING.md#_snippet_0

LANGUAGE: bash
CODE:
```
python -m venv venv
```

----------------------------------------

TITLE: Accessing Raw Native Broker Message in FastStream
DESCRIPTION: Illustrates how to obtain the underlying native broker message (e.g., `aio_pika.IncomingMessage` for RabbitMQ) from the `RabbitMessage` wrapper. This provides direct access to the complete, unabstracted message information.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/message.md#_snippet_1

LANGUAGE: python
CODE:
```
from aio_pika import IncomingMessage
from faststream.rabbit import RabbitMessage

@broker.subscriber("test")
async def base_handler(body: str, msg: RabbitMessage):
    raw: IncomingMessage = msg.raw_message
    print(raw)
```

----------------------------------------

TITLE: Binding a RabbitMQ Queue to an Exchange with FastStream
DESCRIPTION: This snippet demonstrates how to bind a RabbitMQ queue to an exchange. It utilizes the low-level `aio-pika` `RobustQueue.bind` method, which allows for explicit control over the routing relationship between a declared queue and an exchange.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/declare.md#_snippet_1

LANGUAGE: Python
CODE:
```
{! docs_src/rabbit/bind.py !}
```

----------------------------------------

TITLE: Applying Dependencies to Synchronous Functions with FastStream
DESCRIPTION: Illustrates how the `@apply_types` decorator can be used to enable dependency injection for regular synchronous Python functions, not just broker subscribers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/dependencies/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
from faststream import Depends, apply_types

def get_sync_value() -> int:
    return 10

@apply_types
def process_sync_data(data: int, value: int = Depends(get_sync_value)):
    return data + value
```

----------------------------------------

TITLE: Specify Redis Channel Pattern with PubSub
DESCRIPTION: This code demonstrates how to configure a `PubSub` object with a desired pattern (e.g., 'test.*') and set `pattern=True` to enable pattern-based channel subscription in FastStream.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/pubsub/subscription.md#_snippet_6

LANGUAGE: Python
CODE:
```
@broker.subscriber(channel=PubSub("test.*", pattern=True))
```

----------------------------------------

TITLE: Install PyYAML for YAML Generation
DESCRIPTION: Command to install the `PyYAML` dependency, which is necessary to generate AsyncAPI documentation in YAML format.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asyncapi/export.md#_snippet_3

LANGUAGE: Shell
CODE:
```
pip install PyYAML
```

----------------------------------------

TITLE: Access Raw Confluent Kafka Message in FastStream
DESCRIPTION: Illustrates how to access the underlying raw `confluent_kafka.Message` object directly from the FastStream `KafkaMessage` wrapper. This is useful when specific functionalities of the native broker library message are required, such as accessing its `headers()` method.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/confluent/message.md#_snippet_1

LANGUAGE: python
CODE:
```
from faststream.confluent import KafkaMessage

@broker.subscriber("test")
async def base_handler(
    body: str,
    msg: KafkaMessage,
):
    print(msg.raw_message.headers())
```

----------------------------------------

TITLE: Pull Docker Image from GitHub Container Registry
DESCRIPTION: This command pulls the built Docker image from the GitHub Container Registry to your server. Remember to replace <username> with your GitHub username and <repo-name> with the name of your repository.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/template/index.md#_snippet_20

LANGUAGE: bash
CODE:
```
docker pull ghcr.io/<username>/<repo-name>:latest
```

----------------------------------------

TITLE: Configure Concurrent Kafka Subscriber in FastStream
DESCRIPTION: This Python snippet demonstrates how to enable concurrent message processing for a FastStream Kafka subscriber. By setting the 'max_workers' option, a single subscriber can process multiple messages simultaneously, significantly improving throughput.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_1

LANGUAGE: python
CODE:
```
from faststream.kafka import KafkaBroker

broker = KafkaBroker()

@broker.subscriber("topic", max_workers=10)
async def handler():
    """Using `max_workers` option you can process up to 10 messages by one subscriber concurrently"""
```

----------------------------------------

TITLE: Consume Confluent Kafka Messages Concurrently with FastStream
DESCRIPTION: This snippet demonstrates how to consume Confluent Kafka messages concurrently using the `max_workers` option in FastStream. By setting `max_workers` to a value like 10, a single subscriber can process up to 10 messages simultaneously, enabling concurrent message processing in autocommit mode.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream.confluent import KafkaBroker

broker = KafkaBroker()

@broker.subscriber("topic", max_workers=10)
async def handler():
    """Using `max_workers` option you can process up to 10 messages by one subscriber concurrently"""
```

----------------------------------------

TITLE: Accessing Raw NATS Message in FastStream
DESCRIPTION: This snippet shows how to obtain the underlying native broker message (`nats.aio.msg.Msg` for NATS) via the `raw_message` attribute of the `NatsMessage` object. This is useful when specific information not exposed by FastStream's wrapper is needed.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/message.md#_snippet_1

LANGUAGE: python
CODE:
```
from nats.aio.msg import Msg
from faststream.nats import NatsMessage

@broker.subscriber("test")
async def base_handler(body: str, msg: NatsMessage):
    raw: Msg = msg.raw_message
    print(raw)
```

----------------------------------------

TITLE: Define Redis Pattern Channel Message Handler Function
DESCRIPTION: This snippet illustrates how to define a Python function decorated with `@broker.subscriber(channel=PubSub('test.*', pattern=True))` to act as a consumer for messages from Redis channels matching the specified pattern. It handles logging of the received messages.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/pubsub/subscription.md#_snippet_7

LANGUAGE: Python
CODE:
```
@broker.subscriber(channel=PubSub("test.*", pattern=True))
async def handle_message(msg: str):
    print(f"Received: {msg}")
```

----------------------------------------

TITLE: Publish Multiple Messages per FastStream Task Call
DESCRIPTION: This example shows how to send multiple messages from a single FastStream task by turning the message callback function into an asynchronous generator. Taskiq-FastStream will iterate over the yielded payloads and publish each one individually, enabling batch message sending.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/scheduling.md#_snippet_6

LANGUAGE: python
CODE:
```
async def collect_information_to_send():
    """Publish 10 messages per task call."""
    for i in range(10):
        yield i

taskiq_broker.task(
    message=collect_information_to_send,
    ...
)
```

----------------------------------------

TITLE: Define a FastStream Kafka Publisher Object
DESCRIPTION: This example demonstrates how to create a dedicated publisher object for a specific Kafka topic. Defining publishers explicitly ensures they are properly documented in your service's AsyncAPI specification, improving service clarity.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/Publisher/index.md#_snippet_3

LANGUAGE: python
CODE:
```
publisher = broker.publisher("another_topic")
```

----------------------------------------

TITLE: Configure SASLGSSAPI Authentication with SSL/TLS in FastStream Kafka
DESCRIPTION: The `SASLGSSAPI` object facilitates authentication using Kerberos for FastStream Kafka applications, typically combined with SSL/TLS encryption.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/security.md#_snippet_4

LANGUAGE: python
CODE:
```
from faststream.kafka import KafkaBroker
from faststream.security import SASLGSSAPI
import ssl

# Configure SSL/TLS context
ssl_context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
ssl_context.load_verify_locations("path/to/ca.pem")

# Create SASLGSSAPI object
security = SASLGSSAPI(
    principal="your_principal@YOUR.REALM",
    keytab="/path/to/your/keytab.file",
    ssl_context=ssl_context
)

# Initialize KafkaBroker with SASLGSSAPI
broker = KafkaBroker("localhost:9092", security=security)

# Example usage:
@broker.subscriber("input_topic")
async def handle_message(msg: str):
    print(f"Received message: {msg}")
```

----------------------------------------

TITLE: Initialize FastStream KafkaBroker for Decorator Usage
DESCRIPTION: This snippet initializes a `KafkaBroker` instance, which is a prerequisite for using FastStream's publisher and subscriber decorators. It establishes the connection to the Kafka cluster.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/Publisher/index.md#_snippet_6

LANGUAGE: python
CODE:
```
from faststream.kafka import KafkaBroker

broker = KafkaBroker("localhost:9092")
```

----------------------------------------

TITLE: Initialize FastStream KafkaBroker for Basic Publishing
DESCRIPTION: This snippet demonstrates how to create a basic instance of the `KafkaBroker` in FastStream. It sets up the connection to the Kafka broker, enabling subsequent message publishing operations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/Publisher/index.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream.kafka import KafkaBroker

broker = KafkaBroker("localhost:9092")
```

----------------------------------------

TITLE: RabbitMQ Header Exchange: Message 6 Distribution (Multiple Consumers)
DESCRIPTION: Presents the code for publishing Message 6. This message is routed to both `handler3` and `handler4` because its headers completely match the binding keys of both queues, demonstrating how a single message can be delivered to multiple consumers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/examples/headers.md#_snippet_8

LANGUAGE: python
CODE:
```
{! docs_src/rabbit/subscription/header.py [ln:53.5,54.5,55.5]!}
```

----------------------------------------

TITLE: Install FastStream with OpenTelemetry SDK
DESCRIPTION: This command installs the FastStream library along with its OpenTelemetry SDK dependencies. The `[otel]` extra ensures that all necessary packages for OpenTelemetry integration are included, enabling tracing capabilities within FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/opentelemetry/tracing.md#_snippet_1

LANGUAGE: shell
CODE:
```
pip install 'faststream[otel]'
```

----------------------------------------

TITLE: Perform FastStream Static Code Analysis (MyPy, Bandit)
DESCRIPTION: This script executes static analysis tools like MyPy and Bandit to identify potential issues and security vulnerabilities in the codebase. All reported errors must be resolved before submitting changes.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/template/index.md#_snippet_15

LANGUAGE: bash
CODE:
```
./scripts/static-analysis.sh
```

----------------------------------------

TITLE: Access Message Context in FastStream FastAPI Plugin
DESCRIPTION: This snippet illustrates how to access the current message object using `context.get_local("message")` when using the FastStream FastAPI plugin. This provides direct access to the consumed message, enabling further processing or inspection within FastAPI routes or dependencies.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_51

LANGUAGE: Python
CODE:
```
context.get_local("message")
```

----------------------------------------

TITLE: Accessing Raw Message Fields via FastStream Context
DESCRIPTION: This snippet demonstrates using FastStream's `Context` to access fields directly from the underlying raw message object, like `correlation_id` from `raw_message`. This provides a concise way to retrieve specific raw message attributes.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/message.md#_snippet_3

LANGUAGE: python
CODE:
```
from faststream import Context

@broker.subscriber("test")
async def base_handler(
    body: str,
    cor_id: str = Context("message.raw_message.correlation_id"),
):
    print(cor_id)
```

----------------------------------------

TITLE: Accessing Specific Redis Message Fields with FastStream Context
DESCRIPTION: Illustrates how to directly access individual fields of a Redis message, such as headers, using the `Context` object in FastStream. This approach simplifies handler functions by allowing direct injection of specific message attributes, reducing boilerplate code.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/message.md#_snippet_2

LANGUAGE: python
CODE:
```
from faststream import Context

@broker.subscriber("test-stream")
async def stream_handler(
    msg: str,
    headers: AnyDict = Context("message.headers"),
):
    print(headers)
```

----------------------------------------

TITLE: Activate Python Virtual Environment
DESCRIPTION: Command to activate the newly created virtual environment, making its Python binaries and installed packages available for use.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/contributing/CONTRIBUTING.md#_snippet_1

LANGUAGE: bash
CODE:
```
source ./venv/bin/activate
```

----------------------------------------

TITLE: Create a FastStream Redis Subscriber
DESCRIPTION: This Python example demonstrates how to set up a basic message consumer using FastStream with Redis. It initializes a RedisBroker and defines an asynchronous function that subscribes to a specified Redis channel, list, or stream, logging incoming messages.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_53

LANGUAGE: python
CODE:
```
from faststream import FastStream, Logger
from faststream.redis import RedisBroker

broker = RedisBroker()
app = FastStream(broker)

@broker.subscriber(
    channel="test",  # or
    # list="test",     or
    # stream="test",
)
async def handle(msg: str, logger: Logger):
    logger.info(msg)
```

----------------------------------------

TITLE: Define FastStream Batch Subscriber
DESCRIPTION: Configures a FastStream broker subscriber to consume messages in batches by setting the `msg` object as a list and enabling the `batch` parameter. This tells the subscriber to handle message consumption in groups.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/confluent/Subscriber/batch_subscriber.md#_snippet_0

LANGUAGE: python
CODE:
```
@broker.subscriber("test_batch", batch=True)
```

----------------------------------------

TITLE: Configure BaseSecurity Object for SSL/TLS in FastStream Kafka
DESCRIPTION: The `BaseSecurity` object wraps `ssl.SSLContext` and enables SSL/TLS encryption for secure communication between FastStream services and external components such as message brokers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/security.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream.kafka import KafkaBroker
from faststream.security import BaseSecurity
import ssl

# Configure SSL/TLS context
ssl_context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
ssl_context.load_verify_locations("path/to/ca.pem")
ssl_context.load_cert_chain("path/to/client.pem", "path/to/client.key")

# Create BaseSecurity object
security = BaseSecurity(ssl_context=ssl_context)

# Initialize KafkaBroker with BaseSecurity
broker = KafkaBroker("localhost:9092", security=security)

# Example usage:
@broker.subscriber("input_topic")
async def handle_message(msg: str):
    print(f"Received message: {msg}")
```

----------------------------------------

TITLE: Publishing Messages with FastStream Broker
DESCRIPTION: Demonstrates how to publish messages using the FastStream Broker for different messaging systems. This method is easy to use and allows broker access via FastStream's Context (Dependency Injection). It is suitable for infrequent messages like startup or shutdown events, but currently lacks AsyncAPI and full testing support.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/publishing/broker.md#_snippet_0

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/kafka/broker.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/confluent/broker.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/rabbit/broker.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/nats/broker.py !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/publishing/redis/broker.py !}
```

----------------------------------------

TITLE: Configuring Permanent Request-Reply Flow with NATS `reply_to`
DESCRIPTION: Illustrates how to establish a permanent request-reply data flow by specifying a `reply_to` subject in the `broker.publish` method. This allows FastStream to automatically send responses to a predefined, persistent subject, useful for continuous communication patterns.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/rpc.md#_snippet_1

LANGUAGE: python
CODE:
```
@broker.subscriber("response-subject")
async def consume_responses(msg):
    ...

await broker.publish(
    "Hi!",
    subject="test",
    reply_to="response-subject",
)
```

----------------------------------------

TITLE: Initialize FastStream Application with RedisBroker
DESCRIPTION: This code initializes a `RedisBroker` instance and wraps it within a `FastStream` application. This setup is crucial for managing connections and integrating with the FastStream CLI.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/streams/subscription.md#_snippet_2

LANGUAGE: Python
CODE:
```
broker = RedisBroker()
app = FastStream(broker)
```

----------------------------------------

TITLE: Create RedisBroker Instance for FastStream
DESCRIPTION: Instantiate the `RedisBroker` to establish a connection with the Redis server. This broker manages the communication for publishing and subscribing to Redis streams, acting as the core interface for Redis interactions within FastStream.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/streams/publishing.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream.redis import RedisBroker

broker = RedisBroker("redis://localhost:6379")
```

----------------------------------------

TITLE: Configuring Message Retries in FastStream Nats Subscribers
DESCRIPTION: FastStream automatically acknowledges messages, but you can customize error handling with the `retry` flag. Setting `retry=False` (default) prevents re-queuing on error, while `retry=True` nacks and re-queues the message indefinitely for reprocessing by the same or another consumer.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/jetstream/ack.md#_snippet_0

LANGUAGE: python
CODE:
```
@broker.subscriber("test", retry=False)
async def base_handler(body: str):
    ...
```

LANGUAGE: python
CODE:
```
@broker.subscriber("test", retry=True)
async def base_handler(body: str):
    ...
```

----------------------------------------

TITLE: Execute FastStream Consumer via Django Management Command
DESCRIPTION: This bash command demonstrates how to execute the FastStream consumer defined in the Django project. By running `./manage.py faststream`, the `handle` method of the `Command` class is invoked, initiating the FastStream application.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/django/index.md#_snippet_14

LANGUAGE: Bash
CODE:
```
./manage.py faststream
```

----------------------------------------

TITLE: Start Docker Containers for Test Environment
DESCRIPTION: Script to easily start all required broker dependencies as Docker containers, preparing the environment for running integration tests.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/contributing/CONTRIBUTING.md#_snippet_9

LANGUAGE: bash
CODE:
```
./scripts/start_test_env.sh
```

----------------------------------------

TITLE: Declare FastStream Handler Fields with Typing Annotated
DESCRIPTION: For Python 3.9+ users, `typing.Annotated` (or `typing_extensions.Annotated`) can be used as an alternative to `pydantic.Field` to declare handler fields, providing similar capabilities for schema generation and validation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/pydantic.md#_snippet_1

LANGUAGE: python
CODE:
```
from faststream import FastStream, Logger
from faststream.kafka import KafkaBroker
from typing import Annotated
from pydantic import Field

broker = KafkaBroker("localhost:9092")

@broker.subscriber("test-topic")
async def handle_message(
    name: Annotated[str, Field(
        title="User Name",
        description="The name of the user",
        examples=["John Doe"]
    )],
    age: Annotated[int, Field(
        ge=0,
        lt=150,
        description="The age of the user"
    )],
    logger: Logger
) -> None:
    logger.info(f"Received user: {name}, age: {age}")
```

----------------------------------------

TITLE: RPC Subscriber Returning a RabbitMQ-Specific Response
DESCRIPTION: Shows how to use the `RabbitResponse` class, which extends `Response`, to include RabbitMQ-specific message properties such as `message_id`, `priority`, and `mandatory`. This offers fine-grained control over RabbitMQ message attributes in RPC replies, useful for advanced messaging scenarios.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/rpc.md#_snippet_6

LANGUAGE: python
CODE:
```
from faststream.rabbit import RabbitBroker, RabbitResponse

broker = RabbitBroker()

@broker.subscriber("test")
async def handle(msg):
    return RabbitResponse(
        body=f"Processed: {msg}",
        headers={"x-token": "some-token"},
        correlation_id="some-correlation-id",
        message_id="unique-message-id",
        priority=1,
        mandatory=True,
    )
```

----------------------------------------

TITLE: Ignoring Dependency Results in FastStream Subscribers
DESCRIPTION: Demonstrates how to declare a dependency in a FastStream subscriber when its return value is not needed, by assigning it to an underscore variable.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/dependencies/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
@broker.subscriber("test")
def method(_ = Depends(...)): ...
```

----------------------------------------

TITLE: Install cookiecutter for FastStream project generation
DESCRIPTION: This command installs the `cookiecutter` package, a command-line utility for creating projects from project templates, which is required to generate a new FastStream project.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/template/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install cookiecutter
```

----------------------------------------

TITLE: Serve FastStream Application to View AsyncAPI Documentation
DESCRIPTION: Command to run the FastStream application and access its automatically generated AsyncAPI documentation in a web browser.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asyncapi/custom.md#_snippet_1

LANGUAGE: shell
CODE:
```
{! docs_src/getting_started/asyncapi/serve.py [ln:17] !}
```

----------------------------------------

TITLE: Managing Dependencies in FastStream
DESCRIPTION: FastStream utilizes a dependency management system inspired by pytest fixtures and FastAPI Depends. Function arguments declare the required dependencies, and a special decorator delivers them from a global Context object. This approach streamlines dependency injection within FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/faststream.md#_snippet_5

LANGUAGE: Python
CODE:
```
Placeholder for Python code from docs_src/index/dependencies.py
```

----------------------------------------

TITLE: Integrate FastStream with Tornado
DESCRIPTION: This snippet demonstrates how to integrate FastStream with the Tornado framework. It shows how to initialize the FastStream broker at application startup and close it gracefully during shutdown, even if explicit lifecycle hooks are not provided.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/frameworks/index.md#_snippet_7

LANGUAGE: python
CODE:
```
{!> docs_src/integrations/http_frameworks_integrations/tornado.py !}
```

----------------------------------------

TITLE: Run FastStream ASGI Application with Uvicorn
DESCRIPTION: This shell command demonstrates how to run a FastStream application configured with ASGI support using the Uvicorn server. It's the standard method for serving ASGI-compatible applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_10

LANGUAGE: shell
CODE:
```
uvicorn main:app
```

----------------------------------------

TITLE: Run FastStream with Multiple Workers for Scaling
DESCRIPTION: Command to scale a FastStream application horizontally using multiple worker processes. This feature leverages multiprocessing to improve concurrency and performance, allowing the application to handle more messages simultaneously.
SOURCE: https://github.com/ag2ai/faststream/blob/main/README.md#_snippet_9

LANGUAGE: shell
CODE:
```
faststream run basic:app --workers 3
```

----------------------------------------

TITLE: Install FastStream with Confluent Kafka Support
DESCRIPTION: This command installs the FastStream library with the necessary `confluent` extra, ensuring compatibility and access to Confluent Kafka features. It specifies a minimum version of `0.4.0` for Confluent support, which is required for Confluent integration.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/confluent/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install "faststream[confluent]>=0.4.0"
```

----------------------------------------

TITLE: Control FastStream Testing Mode via Environment Variable
DESCRIPTION: This tip suggests setting the `with_real` flag for `TestClient` using an environment variable. This allows you to dynamically choose between mocked and real broker testing modes directly from the command line. It provides flexibility in managing your application's testing configuration.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/test.md#_snippet_7

LANGUAGE: Bash
CODE:
```
WITH_REAL=True/False pytest ...
```

----------------------------------------

TITLE: Configure FastStream CLI Bind Options
DESCRIPTION: These commands demonstrate various ways to use the `--bind` option with `faststream run` to specify different binding addresses. Examples include binding to a Unix domain socket, a file descriptor, and multiple network addresses (IPv4 and IPv6).
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asgi.md#_snippet_11

LANGUAGE: shell
CODE:
```
faststream run main:app --bind unix:/tmp/socket.sock
```

LANGUAGE: shell
CODE:
```
faststream run main:app --bind fd://2
```

LANGUAGE: shell
CODE:
```
faststream run main:app --bind 0.0.0.0:8000 '[::]:8000'
```

----------------------------------------

TITLE: Register Publishing Exception Handlers in FastStream
DESCRIPTION: Demonstrates two methods for registering exception handlers that publish a default result in case of an error. These handlers are used when a fallback response is needed for message processing or serialization failures.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/middlewares/exception.md#_snippet_2

LANGUAGE: python
CODE:
```
exc_middleware = ExceptionMiddleware()

@exc_middleware.add_handler(Exception, publish=True)
def error_handler(exc: Exception) -> str:
    print(repr(exc))
    return "error occurred"
```

LANGUAGE: python
CODE:
```
def error_handler(exc: Exception) -> str:
    print(repr(exc))
    return "error occurred"

exc_middleware = ExceptionMiddleware(
    publish_handlers={
        Exception: error_handler
    }
)
```

----------------------------------------

TITLE: Accessing NATS Message Object in FastStream
DESCRIPTION: This snippet demonstrates how to access the full `NatsMessage` object within a FastStream subscriber function. It allows direct access to message attributes like `correlation_id` and other metadata provided by FastStream's wrapper.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/message.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream.nats import NatsMessage

@broker.subscriber("test")
async def base_handler(
    body: str,
    msg: NatsMessage,
):
    print(msg.correlation_id)
```

----------------------------------------

TITLE: Log Requests in FastStream with Broker's Access Logger
DESCRIPTION: Demonstrates how to log incoming messages using the access_logger available from the broker's context in a FastStream application. This method automatically includes request context like message ID and broker parameters.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/logging.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream import Logger
from faststream.rabbit import RabbitBroker

broker = RabbitBroker()

@broker.subscriber("test")
async def func(logger: Logger):
    logger.info("message received")
```

----------------------------------------

TITLE: Pass Environment File to FastStream CLI
DESCRIPTION: Demonstrates how to pass a custom environment file (e.g., .env.dev) to a FastStream application using the `faststream run` command. This allows the application to load configuration from the specified file.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/cli/index.md#_snippet_9

LANGUAGE: shell
CODE:
```
faststream run serve:app --env=.env.dev
```

----------------------------------------

TITLE: Create and Put Value to NATS Key-Value Storage with FastStream
DESCRIPTION: This snippet demonstrates how to initialize a NATS Key-Value storage bucket using `broker.key_value()` and then store values using the `put()` method. It illustrates the idempotent nature of `broker.key_value()` and how to add multiple revisions to a key.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/jetstream/key-value.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream.nats import NatsBroker

broker = NatsBroker("nats://localhost:4222")

@broker.after_startup
async def setup_kv():
    key_value = broker.key_value(bucket="bucket")
    await key_value.put("key", b"value")
    await key_value.put("key", b"value2")
    await key_value.put("key", b"value3")
```

----------------------------------------

TITLE: Implement Batch Consuming Function
DESCRIPTION: Defines a Python asynchronous function that accepts a list of messages. The `@broker.subscriber(...)` decorator will automatically collect and group messages into batches based on the partition before calling this function.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/confluent/Subscriber/batch_subscriber.md#_snippet_1

LANGUAGE: python
CODE:
```
@broker.subscriber("test_batch", batch=True)
async def on_batch_msg(msg: List[str]):
    # Your batch processing logic here
    pass
```

----------------------------------------

TITLE: Run FastStream ASGI App via CLI
DESCRIPTION: This command demonstrates how to run a FastStream ASGI application using the `faststream run` CLI command. It specifies the application entry point, host, port, and number of workers. Note that gunicorn and uvicorn are required dependencies for this functionality.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asgi.md#_snippet_9

LANGUAGE: shell
CODE:
```
faststream run main:app --host 0.0.0.0 --port 8000 --workers 4
```

----------------------------------------

TITLE: Register General Exception Handlers in FastStream
DESCRIPTION: Demonstrates two methods for registering general exception handlers with FastStream's ExceptionMiddleware. These handlers process all error sources for logging, cleanup, or other non-publishing actions.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/middlewares/exception.md#_snippet_1

LANGUAGE: python
CODE:
```
exc_middleware = ExceptionMiddleware()

@exc_middleware.add_handler(Exception)
def error_handler(exc: Exception) -> None:
    print(repr(exc))
```

LANGUAGE: python
CODE:
```
def error_handler(exc: Exception) -> None:
    print(repr(exc))

exc_middleware = ExceptionMiddleware(
    handlers={
        Exception: error_handler
    }
)
```

----------------------------------------

TITLE: Collecting Django Static Files
DESCRIPTION: Command to execute Django's `collectstatic` management command, which gathers all static files from installed applications and places them into the directory specified by `STATIC_ROOT`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/django/index.md#_snippet_5

LANGUAGE: Bash
CODE:
```
python manage.py collectstatic
```

----------------------------------------

TITLE: RabbitMQ Fanout Consumer Subscription
DESCRIPTION: This snippet shows how to subscribe multiple consumers to the queues bound to a Fanout exchange. It illustrates how messages are distributed among consumers listening to the same queue, emulating load balancing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/examples/fanout.md#_snippet_2

LANGUAGE: python
CODE:
```
{! docs_src/rabbit/subscription/fanout.py [ln:13-25] !}
```

----------------------------------------

TITLE: Configure NATS Key-Value Watch with KvWatch Object in FastStream
DESCRIPTION: This snippet shows how to use the `KvWatch` object to provide more detailed settings when subscribing to NATS Key-Value changes. It allows specifying the bucket and controlling declaration behavior (e.g., `declare=False`), offering fine-grained control over the watch operation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/jetstream/key-value.md#_snippet_2

LANGUAGE: python
CODE:
```
from faststream.nats import NatsBroker, KvWatch

@broker.subscriber(
    "key",
    kv_watch=KvWatch("bucket", declare=False),
)
async def handler(msg: str):
    ...
```

----------------------------------------

TITLE: Integrate FastStream AsyncAPI Docs with FastAPI (Option 1: Manual HTML)
DESCRIPTION: This option shows how to integrate FastStream's AsyncAPI documentation into an existing FastAPI application by manually generating the AsyncAPI schema and HTML. It uses `get_app_schema` and `get_asyncapi_html` to serve the documentation as an HTML response from a FastAPI endpoint.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asyncapi/hosting.md#_snippet_2

LANGUAGE: python
CODE:
```
from typing import AsyncIterator
from contextlib import asynccontextmanager

from fastapi import FastAPI, responses
from faststream import FastStream
from faststream.asyncapi import get_asyncapi_html, get_app_schema
from faststream.kafka import KafkaBroker

broker = KafkaBroker()

@broker.subscriber('topic')
async def my_handler(msg: str) -> None:
    print(msg)

@asynccontextmanager
async def broker_lifespan(app: FastAPI) -> AsyncIterator[None]:
    async with broker:
        await broker.start()
        yield

app = FastAPI(lifespan=broker_lifespan)

@app.get('/docs/asyncapi')
async def asyncapi() -> responses.HTMLResponse:
    schema = get_app_schema(FastStream(broker))
    return responses.HTMLResponse(get_asyncapi_html(schema))
```

----------------------------------------

TITLE: RabbitMQ Header Exchange: Message 1 Distribution
DESCRIPTION: Shows the code for publishing Message 1, which is routed to `handler1` because its `key` header matches the binding argument of the queue `handler1` listens to.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/examples/headers.md#_snippet_3

LANGUAGE: python
CODE:
```
{! docs_src/rabbit/subscription/header.py [ln:48.5] !}
```

----------------------------------------

TITLE: Install FastStream CLI
DESCRIPTION: This command installs the FastStream CLI tool and its dependencies using pip, enabling access to FastStream's command-line functionalities.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/cli/index.md#_snippet_0

LANGUAGE: shell
CODE:
```
pip install 'faststream[cli]'
```

----------------------------------------

TITLE: Understand Default Type Casting Behavior in FastStream Context
DESCRIPTION: Explains that FastStream `Context` fields are not automatically cast to their annotated types by default. Accessing a field with a type annotation will retrieve the raw value from the context without implicit type conversion.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/extra.md#_snippet_1

LANGUAGE: Python
CODE:
```
from faststream import Context, FastStream
from typing import Annotated

app = FastStream()

@app.broker.subscriber("test")
async def handler(
    value: int,
    my_field: Annotated[str, Context("my_field")]
):
    # If context has my_field=123, my_field will be 123 (int), not "123" (str)
    print(f"Type of my_field: {type(my_field)}")
```

----------------------------------------

TITLE: Implement FastStream Redis Batch Consuming Function
DESCRIPTION: Create an asynchronous function to process a batch of messages received from a Redis list. The function's parameter should be typed as a `List` of messages, which the FastStream broker will populate with collected messages.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/list/batch.md#_snippet_1

LANGUAGE: Python
CODE:
```
@broker.subscriber(list=ListSub("test-list", batch=True))
async def on_message(msg: List[str]):
    # Process each message in the batch
    pass
```

----------------------------------------

TITLE: Run FastStream App with Hot Reload
DESCRIPTION: Initiates the FastStream application with hot reload enabled, allowing automatic application restarts upon code changes, facilitating rapid development and iteration.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/cli/index.md#_snippet_5

LANGUAGE: shell
CODE:
```
faststream run serve:app --reload
```

----------------------------------------

TITLE: Client Verifying Basic RPC Response Body
DESCRIPTION: Demonstrates how a client receives and asserts the body of a basic RPC response. This snippet shows the `broker.request` call followed by a direct comparison of the received message body against the expected string.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/rpc.md#_snippet_3

LANGUAGE: python
CODE:
```
from faststream.rabbit import RabbitMessage

msg: RabbitMessage = await broker.request("Hello, RabbitMQ!", queue="test")
assert msg.body == b"Received: Hello, RabbitMQ!"
```

----------------------------------------

TITLE: Run FastStream application locally with specified workers
DESCRIPTION: This command starts the FastStream application locally, connecting it to the running Kafka broker. Replace `<directory-name>` with the actual project slug directory name containing `app.py`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/template/index.md#_snippet_7

LANGUAGE: bash
CODE:
```
faststream run <directory-name>.application:app --workers 1
```

----------------------------------------

TITLE: Serve FastStream AsyncAPI Documentation Locally
DESCRIPTION: This command builds and serves the AsyncAPI documentation for the FastStream application, making it accessible via a web browser at http://localhost:8000. Remember to replace <directory-name> with your project's specific directory.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/template/index.md#_snippet_16

LANGUAGE: bash
CODE:
```
faststream docs serve <directory-name>.application:app
```

----------------------------------------

TITLE: FastStream Consumer with Django ORM Access (Django Management Command)
DESCRIPTION: Shows an alternative approach for FastStream consumers to access the Django ORM by leveraging Django's management command execution, which automatically handles Django setup. Includes conditional Django setup for CLI usage.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/django/index.md#_snippet_11

LANGUAGE: python
CODE:
```
# serve_faststream.py
import sys

# From previous example, this run django.setup() only when started by FastStream CLI
# Remove this block entirely if you are not using FastStream CLI
if "bin/faststream" in sys.argv[0]:
    import os

    import django

    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "app.settings")
    django.setup()

from django.contrib.auth.models import User

from faststream import FastStream
from faststream.rabbit import RabbitBroker


broker = RabbitBroker("amqp://guest:guest@localhost:5672")

@broker.subscriber("demo")
async def faststream_django_orm_demo_handler(message: str):
    """
    This demonstrates how to access Django ORM from within a FastStream consumer.
    """
    qs = User.objects.all()
    async for user in qs:  # async django ORM is accessible
        print(user)
    print(message)

app = FastStream(broker)
```

----------------------------------------

TITLE: Running FastStream Applications with CLI
DESCRIPTION: This section provides commands for running FastStream applications using the built-in CLI. It covers installation of the CLI, basic application startup, enabling hot reload for development, and configuring multiprocessing for horizontal scaling.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/faststream.md#_snippet_4

LANGUAGE: Shell
CODE:
```
pip install "faststream[cli]"

faststream run basic:app

faststream run basic:app --reload

faststream run basic:app --workers 3
```

----------------------------------------

TITLE: Accessing Full Context Object by Name
DESCRIPTION: Demonstrates how to retrieve the entire context object by its registered name, applicable across various FastStream messaging backends.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/fields.md#_snippet_0

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/context/kafka/fields_access.py !}
```

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/context/confluent/fields_access.py !}
```

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/context/rabbit/fields_access.py !}
```

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/context/nats/fields_access.py !}
```

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/context/redis/fields_access.py !}
```

----------------------------------------

TITLE: FastStream RabbitBroker publish Method: Send Flags
DESCRIPTION: Explains the flags related to message sending confirmation and consumer readiness for the `RabbitBroker.publish` method, including `mandatory` and `immediate`, and the `timeout` for confirmation from RabbitMQ.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/publishing.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
publish method send flags:
  mandatory: bool = True - the client is waiting for confirmation that the message will be placed in some queue (if there are no queues, return it to the sender)
  immediate: bool = False - the client expects that there is a consumer ready to take the message to work "right now" (if there is no consumer, return it to the sender)
  timeout: int | float | None = None - send confirmation time from RabbitMQ
```

----------------------------------------

TITLE: FastStream FastAPI Dependant API Reference Directive
DESCRIPTION: This entry references the `get_fastapi_dependant` function, a key component within FastStream's integration with FastAPI for dependency management. The directive is used in Sphinx documentation to automatically pull and display the API documentation for this specific function.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/fastapi/get_dependant/get_fastapi_dependant.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.broker.fastapi.get_dependant.get_fastapi_dependant
```

----------------------------------------

TITLE: FastStream FastAPI Native Dependant API Reference
DESCRIPTION: API documentation reference for the `get_fastapi_native_dependant` function, which is a core component within FastStream's integration with FastAPI for managing dependencies.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/fastapi/get_dependant/get_fastapi_native_dependant.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Function: faststream.broker.fastapi.get_dependant.get_fastapi_native_dependant
Description: Retrieves a FastAPI native dependant object for FastStream broker operations.
Module: faststream.broker.fastapi.get_dependant
```

----------------------------------------

TITLE: Install FastStream with Prometheus Dependencies
DESCRIPTION: This command installs the FastStream library along with the necessary dependencies to enable Prometheus metrics collection.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_3

LANGUAGE: cmd
CODE:
```
pip install 'faststream[prometheus]'
```

----------------------------------------

TITLE: Serve AsyncAPI Documentation with FastStream's Built-in ASGI
DESCRIPTION: This example demonstrates how to use FastStream's integrated ASGI support to serve both the application and its AsyncAPI documentation. It configures a FastStream application with a Kafka broker and exposes the AsyncAPI documentation at a specified path using the `.as_asgi()` method.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asyncapi/hosting.md#_snippet_1

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.kafka import KafkaBroker

broker = KafkaBroker()

@broker.subscriber('topic')
async def my_handler(msg: str) -> None:
    print(msg)

app = FastStream(broker).as_asgi(
    asyncapi_path="/docs/asyncapi",
)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
```

----------------------------------------

TITLE: Extended FastStream Handler Input Validation Example
DESCRIPTION: This example demonstrates an extended use of `MagicMock` for validating FastStream handler inputs in test mode. It showcases how the mock receives the raw JSON message, allowing for comprehensive checks on the incoming message's structure and content. This provides a more detailed validation scenario.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/test.md#_snippet_5

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/subscription/kafka/testing.py [ln:9-16] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/subscription/confluent/testing.py [ln:9-16] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/subscription/rabbit/testing.py [ln:9-16] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/subscription/nats/testing.py [ln:9-16] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/subscription/redis/testing.py [ln:9-16] !}
```

----------------------------------------

TITLE: Initialize Taskiq-Compatible AppWrapper
DESCRIPTION: Wrap a FastStream Application object with `AppWrapper`. This allows using Taskiq scheduling while preserving the original FastStream features like AsyncAPI schema and lifespans.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/scheduling.md#_snippet_4

LANGUAGE: Python
CODE:
```
from taskiq_faststream import AppWrapper

taskiq_broker = AppWrapper(app)
```

----------------------------------------

TITLE: Initiate FastStream Application with RedisBroker
DESCRIPTION: Initialize the `FastStream` application, integrating it with the configured `RedisBroker`. This sets up the main application context, allowing FastStream to manage the lifecycle of your message processing components.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/streams/publishing.md#_snippet_1

LANGUAGE: python
CODE:
```
from faststream import FastStream

app = FastStream(broker)
```

----------------------------------------

TITLE: FastStream Broker and Endpoint-Level Middlewares
DESCRIPTION: This snippet shows the new capability to pass a list of `middlewares` directly to a `broker.publisher`. This feature allows for applying specific middleware logic to outgoing messages at the publisher level, in addition to existing broker and subscriber middlewares.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_33

LANGUAGE: python
CODE:
```
broker = Broker(..., middlewares=())

@broker.subscriber(..., middlewares=())
@broker.publisher(..., middlewares=())  # new feature
async def handler():
    ...
```

----------------------------------------

TITLE: Install FastStream CLI Tool
DESCRIPTION: Command to install the FastStream command-line interface (CLI) using pip, which is necessary for running FastStream applications from the terminal.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/index.md#_snippet_5

LANGUAGE: shell
CODE:
```
pip install "faststream[cli]"
```

----------------------------------------

TITLE: Using FastStream Response Class in RPC Subscriber
DESCRIPTION: This snippet illustrates how to use the `Response` class in an RPC subscriber to attach additional metadata like headers and correlation ID to the response message, providing more context for the client.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/rpc.md#_snippet_6

LANGUAGE: Python
CODE:
```
from faststream import Response
from faststream.redis import RedisBroker

broker = RedisBroker()

@broker.subscriber(channel="test-channel")
async def handle(msg):
    return Response(
        body=f"Processed: {msg}",
        headers={"x-token": "some-token"},
        correlation_id="some-correlation-id",
    )
```

----------------------------------------

TITLE: get_fastapi_native_dependant
DESCRIPTION: API reference for the `get_fastapi_native_dependant` function, related to native FastAPI dependency handling in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_17

LANGUAGE: APIDOC
CODE:
```
get_fastapi_native_dependant
```

----------------------------------------

TITLE: Importing Shared FastStream Context Aliases
DESCRIPTION: Demonstrates how to import common Annotated aliases such as `Logger` and `ContextRepo` directly from the `faststream` package. These aliases provide a comfortable way to access global context objects within FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/existed.md#_snippet_0

LANGUAGE: Python
CODE:
```
from faststream import Logger, ContextRepo
```

----------------------------------------

TITLE: Install Avro Dependencies
DESCRIPTION: Instructions to install the `fastavro` library, which is necessary for working with Avro encoding and decoding in Python.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/serialization/examples.md#_snippet_7

LANGUAGE: console
CODE:
```
pip install fastavro
```

----------------------------------------

TITLE: Initialize Taskiq-Compatible BrokerWrapper
DESCRIPTION: Wrap a FastStream Broker object with `BrokerWrapper` to make it compatible with Taskiq. This allows the broker to be used as an object for creating a regular Taskiq scheduler.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/scheduling.md#_snippet_1

LANGUAGE: Python
CODE:
```
from taskiq_faststream import BrokerWrapper

taskiq_broker = BrokerWrapper(broker)
```

----------------------------------------

TITLE: Catching Exceptions in FastStream Handlers with TestClient
DESCRIPTION: Demonstrates how to catch any exceptions that occur inside FastStream message handlers when using the `TestClient` for in-memory testing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/test.md#_snippet_3

LANGUAGE: Python
CODE:
```
// External file: docs_src/getting_started/subscription/kafka/testing.py [ln:18-23]
```

LANGUAGE: Python
CODE:
```
// External file: docs_src/getting_started/subscription/confluent/testing.py [ln:18-23]
```

LANGUAGE: Python
CODE:
```
// External file: docs_src/getting_started/subscription/rabbit/testing.py [ln:18-23]
```

LANGUAGE: Python
CODE:
```
// External file: docs_src/getting_started/subscription/nats/testing.py [ln:18-23]
```

LANGUAGE: Python
CODE:
```
// External file: docs_src/getting_started/subscription/redis/testing.py [ln:18-23]
```

----------------------------------------

TITLE: FastStream Broker: `add_middleware` Public API
DESCRIPTION: Introduces a new public API method `add_middleware` to append a middleware instance to an already created FastStream broker, allowing dynamic middleware management.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_23

LANGUAGE: APIDOC
CODE:
```
FastStreamBroker.add_middleware(middleware: BaseMiddleware)
  middleware: An instance of a FastStream middleware to be added to the broker's processing chain.
```

----------------------------------------

TITLE: Define Django Management Command for FastStream Consumer
DESCRIPTION: This Python snippet defines a Django `BaseCommand` subclass named `Command`. Its `handle` method is responsible for asynchronously running the FastStream application, `faststream_app`, effectively starting the FastStream consumer as a Django management command.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/django/index.md#_snippet_13

LANGUAGE: Python
CODE:
```
import asyncio

from django.core.management.base import BaseCommand
from serve_faststream import app as faststream_app


class Command(BaseCommand):
    help = "Start FastStream consumer"

    def handle(self, *args, **options):
        asyncio.run(faststream_app.run())
```

----------------------------------------

TITLE: Configure FastStream Router Inclusion with Arguments
DESCRIPTION: This snippet demonstrates how to include a router in a FastStream broker while passing additional configuration arguments. It allows setting a prefix, dependencies, middlewares, and schema inclusion at the time of router integration, providing more flexibility than configuring during router creation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_28

LANGUAGE: Python
CODE:
```
broker.include_router(
   router,
   prefix="test_",
   dependencies=[Depends(...)],
   middlewares=[BrokerMiddleware],
   include_in_schema=False,
)
```

----------------------------------------

TITLE: FastStream ASGI AsyncAPI Application Factory Reference
DESCRIPTION: This entry references the `make_asyncapi_asgi` factory function, located within the `faststream.asgi.factories` module. This function is crucial for developers looking to generate an ASGI application that automatically includes AsyncAPI documentation, streamlining API discoverability and integration.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asgi/factories/make_asyncapi_asgi.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asgi.factories.make_asyncapi_asgi
```

----------------------------------------

TITLE: Integrating Django ASGI into Starlette Application
DESCRIPTION: Demonstrates how to modify `asgi.py` to embed the existing Django ASGI application within a Starlette `Starlette` instance. This setup allows Starlette to manage routing and lifespan events, directing all incoming requests to the Django application.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/django/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "app.settings")

django_asgi = get_asgi_application()

# Starlette serving
from starlette.applications import Starlette
from starlette.routing import Mount

application = Starlette(
    routes=(
        Mount("/", django_asgi()),  # redirect all requests to Django
    ),
)
```

----------------------------------------

TITLE: OpenTelemetry Collector Configuration for Sentry Export
DESCRIPTION: This `otel.yaml` configuration file defines how the OpenTelemetry Collector receives OTLP gRPC traces and exports them to Sentry. It specifies the OTLP receiver endpoint and configures the Sentry exporter with a placeholder DSN. The service pipeline then routes received traces from OTLP to the Sentry exporter, enabling conversion and forwarding of traces to Sentry.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/opentelemetry/sentry.md#_snippet_2

LANGUAGE: yaml
CODE:
```
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317

exporters:
  sentry:
    dsn: "https://your-secret-dsn.com"

service:
  pipelines:
    traces:
      receivers: [otlp]
      exporters: [sentry]
```

----------------------------------------

TITLE: RabbitMQ Header Exchange: Message 5 Distribution
DESCRIPTION: Illustrates the publishing of Message 5, which is routed to `handler3` because its `key2` header matches the binding argument of the queue `handler3` listens to.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/examples/headers.md#_snippet_7

LANGUAGE: python
CODE:
```
{! docs_src/rabbit/subscription/header.py [ln:52.5]!}
```

----------------------------------------

TITLE: Generate Python Class from Protobuf Schema
DESCRIPTION: Command to compile the `.proto` file into Python classes (`message_pb2.py` and `message_pb2.pyi`) using `grpc_tools.protoc`. These generated classes allow Python applications to work with Protobuf messages.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/serialization/examples.md#_snippet_2

LANGUAGE: console
CODE:
```
python -m grpc_tools.protoc --python_out=. --pyi_out=. -I . message.proto
```

----------------------------------------

TITLE: Declare Basic FastStream NATS Direct Subject Handler
DESCRIPTION: Illustrates the simplest way to declare a message handler in FastStream for a NATS Direct Subject. Messages sent to 'test_subject' will be processed by this asynchronous function.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/examples/direct.md#_snippet_0

LANGUAGE: python
CODE:
```
@broker.handler("test_subject")
async def handler():
...
```

----------------------------------------

TITLE: Understanding Dependency Type Casting in FastStream
DESCRIPTION: Explains how FastStream's `FastDepends` component casts dependency return values twice: once for the dependency's declared return type and again for the input argument type of the consuming function. It also notes the caching behavior of dependency results.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/dependencies/index.md#_snippet_8

LANGUAGE: Python
CODE:
```
from faststream import Depends, apply_types

def simple_dependency(a: int, b: int = 3) -> str:
    # NOTE: This will make type-checkers unhappy,
    # it is better to avoid this pattern in production code!
    return a + b  # 'return' is cast to `str` for the first time

@apply_types
def method(a: int, d: int = Depends(simple_dependency)):
    # 'd' is cast to `int` for the second time
    return a + d

# NOTE: This will make type-checkers unhappy,
# it is better to avoid this pattern in production code!
assert method("1") == 5
```

----------------------------------------

TITLE: Navigate into the newly created FastStream project directory
DESCRIPTION: After generating the project, use this command to change the current working directory to the root of the newly created FastStream project. Remember to replace `<directory-name>` with the actual name of your project directory.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/template/index.md#_snippet_2

LANGUAGE: bash
CODE:
```
cd <directory-name>
```

----------------------------------------

TITLE: Configure Confluent Kafka Broker in FastStream
DESCRIPTION: Demonstrates how to pass a `config` dictionary to `confluent-kafka-python` via `FastStream`'s `KafkaBroker`. This allows for customizability, such as setting `topic.metadata.refresh.fast.interval.ms` to a specific value (e.g., 300ms instead of the default 100ms).
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_14

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.confluent import KafkaBroker

config = {"topic.metadata.refresh.fast.interval.ms": 300}
broker = KafkaBroker("localhost:9092", config=config)
app = FastStream(broker)
```

----------------------------------------

TITLE: Install Watchfiles for Hot Reload
DESCRIPTION: Installs the `watchfiles` library, which is required to enable the hot reload feature in FastStream applications, ensuring code changes trigger automatic application restarts.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/cli/index.md#_snippet_6

LANGUAGE: shell
CODE:
```
pip install watchfiles
```

----------------------------------------

TITLE: FastStream TelemetryMiddleware Class Reference
DESCRIPTION: References the TelemetryMiddleware class from the faststream.opentelemetry module. This class is typically used to integrate OpenTelemetry tracing and metrics into FastStream applications, providing observability features.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/opentelemetry/TelemetryMiddleware.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.opentelemetry.TelemetryMiddleware
```

----------------------------------------

TITLE: Remove Global Context Field in FastStream
DESCRIPTION: Shows how to remove a global context field using the `context.reset_global` method, making it no longer accessible application-wide.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/custom.md#_snippet_2

LANGUAGE: Python
CODE:
```
context.reset_global("my_key")
```

----------------------------------------

TITLE: FastStream Redis Pipelining API Details
DESCRIPTION: API documentation for FastStream's Redis pipelining feature, detailing the `pipeline` parameter for the `publish` method and the `Pipeline` annotation. The `pipeline` parameter delays command execution until `execute()` is called, while the `Pipeline` annotation provides a wrapped `redis.asyncio.client.Pipeline` object via dependency injection.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/pipeline.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Method: broker.publish()
  Parameters:
    pipeline: object - A Redis pipeline object. When provided, Redis commands are queued and executed only upon explicit call to `await pipe.execute()`.

Annotation: faststream.redis.annotations.Pipeline
  Type: redis.asyncio.client.Pipeline (wrapped)
  Description: A FastStream dependency that injects a Redis pipeline object, automatically available in any subscriber for batching Redis operations.
```

----------------------------------------

TITLE: Customize Handler Information in FastStream AsyncAPI Docs
DESCRIPTION: Shows how to enrich AsyncAPI documentation by adding descriptions and titles to message handlers, and specifying publishing schemas for publisher handlers, enhancing user comprehension of handler behavior.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asyncapi/custom.md#_snippet_4

LANGUAGE: python
CODE:
```
{! docs_src/getting_started/asyncapi/asyncapi_customization/custom_handler.py !}
```

----------------------------------------

TITLE: Validate FastStream Handler Input with MagicMock
DESCRIPTION: FastStream handlers in test mode are augmented with a `MagicMock` object, enabling validation of arguments and call counts. This mock receives the raw JSON message body, allowing direct validation of the incoming message structure rather than parsed Python arguments. This ensures precise testing of message content.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/test.md#_snippet_4

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/subscription/kafka/testing.py [ln:9-14] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/subscription/confluent/testing.py [ln:9-14] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/subscription/rabbit/testing.py [ln:9-14] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/subscription/nats/testing.py [ln:9-14] !}
```

LANGUAGE: Python
CODE:
```
{!> docs_src/getting_started/subscription/redis/testing.py [ln:9-14] !}
```

----------------------------------------

TITLE: Topic Exchange Message Distribution Example 1
DESCRIPTION: This example shows the routing of the first message. It illustrates how a message with a specific routing key is sent to a consumer listening to a queue with a matching pattern, demonstrating the core routing logic.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/examples/topic.md#_snippet_3

LANGUAGE: Python
CODE:
```
{! docs_src/rabbit/subscription/topic.py [ln:30.5]!}
```

----------------------------------------

TITLE: Run FastStream ASGI Application with Multiple Workers
DESCRIPTION: Provides examples of running a FastStream ASGI application with various tools like `faststream run`, `gunicorn`, `granian`, and `hypercorn` to utilize multiple workers for improved performance and reliability.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asgi.md#_snippet_2

LANGUAGE: shell
CODE:
```
faststream run main:app --workers 4
```

LANGUAGE: shell
CODE:
```
gunicorn -k uvicorn.workers.UvicornWorker main:app --workers=4
```

LANGUAGE: shell
CODE:
```
granian --interface asgi main:app --workers 4
```

LANGUAGE: shell
CODE:
```
hypercorn main:app --workers 4
```

----------------------------------------

TITLE: Configure FastStream Logging from External File via CLI
DESCRIPTION: Provides command-line examples for using faststream run with the --log-file flag to load logging configurations from external JSON, TOML, or YAML files.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/logging.md#_snippet_4

LANGUAGE: console
CODE:
```
faststream run serve:app --log-file config.json
```

LANGUAGE: console
CODE:
```
faststream run serve:app --log-file config.toml
```

LANGUAGE: console
CODE:
```
faststream run serve:app --log-file config.yaml
```

----------------------------------------

TITLE: Accessing Full Redis Message Object in FastStream
DESCRIPTION: Demonstrates how to access the `RedisMessage` object within a FastStream subscriber function. This object provides comprehensive details about the incoming Redis message, including its body, raw message, headers, and other metadata. The example shows how to print message headers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/message.md#_snippet_1

LANGUAGE: python
CODE:
```
from faststream.redis import RedisMessage

@broker.subscriber("test-stream")
async def stream_handler(msg: str, message: RedisMessage):
    print(message.headers)
```

----------------------------------------

TITLE: Example Structlog Output in FastStream
DESCRIPTION: Provides a sample of the structured log output generated by `structlog` when integrated with FastStream, showcasing timestamps, log levels, messages, and `extra` context information for debugging and monitoring.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/logging.md#_snippet_11

LANGUAGE: Shell
CODE:
```
TIMESPAMP [info     ] FastStream app starting...     extra={}
TIMESPAMP [debug    ] `Handler` waiting for messages extra={'topic': 'topic', 'group_id': 'group', 'message_id': ''}
TIMESPAMP [debug    ] `Handler` waiting for messages extra={'topic': 'topic', 'group_id': 'group2', 'message_id': ''}
TIMESPAMP [info     ] FastStream app started successfully! To exit, press CTRL+C extra={'topic': '', 'group_id': '', 'message_id': ''}
```

----------------------------------------

TITLE: Applying Middlewares to FastStream Broker Publisher
DESCRIPTION: Shows how a list of middlewares can now be passed directly to a `broker.publisher` decorator. This extends the middleware application capabilities beyond just subscribers and broker-level configurations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_40

LANGUAGE: python
CODE:
```
broker = Broker(..., middlewares=())

@broker.subscriber(..., middlewares=())
@broker.publisher(..., middlewares=())  # new feature
async def handler():
    ...
```

----------------------------------------

TITLE: Using FastStream `NatsResponse` Class for JetStream RPC
DESCRIPTION: Explains the usage of the NATS-specific `NatsResponse` class, which extends the generic `Response` class. This class adds support for specifying a `stream` parameter, ensuring the response is correctly published to a particular stream in a JetStream context.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/rpc.md#_snippet_4

LANGUAGE: python
CODE:
```
from faststream.nats import NatsBroker, NatsResponse

broker = NatsBroker()

@broker.subscriber("test", stream="stream")
async def handle(msg):
    return NatsResponse(
        body=f"Processed: {msg}",
        headers={"x-token": "some-token"},
        correlation_id="some-correlation-id",
        stream="stream",
    )
```

----------------------------------------

TITLE: NATS Message Distribution to Error Pattern
DESCRIPTION: Explains how a message published to the `*.error` subject is specifically routed to the `handler3` consumer, which is uniquely subscribed to the `*.error` pattern, demonstrating precise message targeting.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/examples/pattern.md#_snippet_4

LANGUAGE: Python
CODE:
```
await broker.publish("Error!", subject="user.error")
```

----------------------------------------

TITLE: NATS Message Distribution to Info Pattern (1)
DESCRIPTION: Illustrates the distribution of the first message to consumers subscribed to the `*.info` pattern. Messages published to a matching subject will be routed to one of the available handlers within the same queue group.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/examples/pattern.md#_snippet_2

LANGUAGE: Python
CODE:
```
await broker.publish("Hi!", subject="user.info")
```

----------------------------------------

TITLE: Configure ObjWatch for NATS Object Storage Subscriber
DESCRIPTION: This example demonstrates how to use the `ObjWatch` object to provide more detailed settings for an object storage subscriber. Here, `declare=False` is used to prevent the subscriber from attempting to declare the bucket, which is useful if the bucket is managed externally or already exists.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/jetstream/object.md#_snippet_3

LANGUAGE: Python
CODE:
```
from faststream.nats import NatsBroker, ObjWatch

@broker.subscriber(
    "example-bucket",
    obj_watch=ObjWatch(declare=False),
)
async def handler(filename: str):
    ...
```

----------------------------------------

TITLE: Publish RPC Message with FastStream Broker
DESCRIPTION: Demonstrates how to publish a message using a FastStream broker with RPC (Remote Procedure Call) enabled. This specific example is noted to fail with a timeout if no automatic response is configured, highlighting the need for a corresponding RPC handler.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_20

LANGUAGE: python
CODE:
```
msg = await broker.publish("msg", "test", rpc=True)
```

----------------------------------------

TITLE: Manually Set Local Context in FastStream
DESCRIPTION: Illustrates how to manually set a local context field, which remains within the current call stack until explicitly cleared, for different messaging brokers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/custom.md#_snippet_4

LANGUAGE: Python
CODE:
```
from faststream import FastStream, context
from faststream.kafka import KafkaBroker

broker = KafkaBroker("localhost:9092")
app = FastStream(broker)

async def process_message_with_context(msg: str):
    context.set_local("user_id", "user_abc")
    print(f"Manually set local context 'user_id': {context.get('user_id')}")
    # Do work
    context.reset_local("user_id") # Clear it when done
    print(f"Local context 'user_id' after reset: {context.get('user_id')}")

@broker.subscriber("test-topic")
async def handle_message(msg: str):
    await process_message_with_context(msg)
```

----------------------------------------

TITLE: Integrate Structlog with FastStream Application and Broker
DESCRIPTION: Demonstrates how to seamlessly integrate a configured `structlog` logger with FastStream by defining a processor to merge context variables into log events and passing the logger instance to `KafkaBroker` and `FastStream` application objects.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/logging.md#_snippet_10

LANGUAGE: Python
CODE:
```
import logging

import structlog

from faststream import FastStream, context
from faststream.kafka import KafkaBroker

def merge_contextvars(
    logger: structlog.types.WrappedLogger,
    method_name: str,
    event_dict: structlog.types.EventDict,
) -> structlog.types.EventDict:
    event_dict["extra"] = event_dict.get(
        "extra",
        context.get_local("log_context") or {},
    )
    return event_dict

shared_processors = [
    merge_contextvars,
    ...
]

...

broker = KafkaBroker(logger=logger, log_level=logging.DEBUG)
app = FastStream(broker, logger=logger)
```

----------------------------------------

TITLE: Announcing Topic Exchange Consumers and Queues
DESCRIPTION: This section illustrates how to declare a Topic exchange and multiple queues that will listen to it. It emphasizes specifying the routing key pattern for each queue, which dictates which messages they will process from the exchange.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/examples/topic.md#_snippet_1

LANGUAGE: Python
CODE:
```
{! docs_src/rabbit/subscription/topic.py [ln:7-10]!}
```

----------------------------------------

TITLE: Subscribe to a local Kafka topic for message viewing
DESCRIPTION: This optional script allows users to subscribe to a specific Kafka topic to view messages, useful for debugging and monitoring the application's message flow. Replace `<topic_name>` with the desired Kafka topic.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/template/index.md#_snippet_8

LANGUAGE: bash
CODE:
```
./scripts/subscribe_to_kafka_broker_locally.sh <topic_name>
```

----------------------------------------

TITLE: Suppress Automatic RPC and Reply-To Responses in FastStream Handlers
DESCRIPTION: This snippet demonstrates the use of the `no_reply=True` flag on a FastStream subscriber. This flag prevents the broker from automatically sending RPC or reply-to responses after the handler completes execution. It is useful for scenarios where no response is expected or a custom response mechanism is implemented.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_19

LANGUAGE: python
CODE:
```
@broker.subscriber("tests", no_reply=True)
async def handler():
    ....
```

----------------------------------------

TITLE: API Reference for faststream.opentelemetry.TelemetrySettingsProvider
DESCRIPTION: Documents the `TelemetrySettingsProvider` class within the `faststream.opentelemetry` module, likely providing settings for OpenTelemetry integration in FastStream applications. This entry serves as a direct reference to the class's API documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/opentelemetry/TelemetrySettingsProvider.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.opentelemetry.TelemetrySettingsProvider
```

----------------------------------------

TITLE: Django Management Command File Structure
DESCRIPTION: Outlines the recommended directory structure for creating a custom Django management command, which can be used to run FastStream consumers and ensure Django ORM access.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/django/index.md#_snippet_12

LANGUAGE: text
CODE:
```
project-root/
├──<your-django-app-name>/
    ├──management/
        ├──commands/
            ├── __init__.py
            ├── faststream.py
├── manage.py
├── serve_faststream.py
```

----------------------------------------

TITLE: Protobuf `NoCast` Annotation Usage
DESCRIPTION: Illustrates the use of the `NoCast` annotation to prevent a message from being included in the `pydantic` representation of a handler. This is useful for controlling how messages are processed and validated.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/serialization/examples.md#_snippet_4

LANGUAGE: Python
CODE:
```
from faststream.types import NoCast

@broker.subscriber("in", decoder=Person.FromString)
async def handle_msg(msg: Person, logger: Logger) -> NoCast[Person]:
    logger.info(msg)
    return Person(name="John", age=25)
```

----------------------------------------

TITLE: Define Protobuf Message Schema
DESCRIPTION: Defines a simple `Person` message schema using Protobuf's `proto3` syntax. This schema specifies the structure of the data to be serialized, including `name` (string) and `age` (float) fields.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/serialization/examples.md#_snippet_1

LANGUAGE: proto
CODE:
```
syntax = "proto3";

message Person {
    string name = 1;
    float age = 2;
}
```

----------------------------------------

TITLE: Add Manual `start` Method to `RPCWorker` Class
DESCRIPTION: Introduces a `start` method to the `RPCWorker` class, allowing explicit initialization of the subscriber after the application has started. This is useful for managing the worker's lifecycle independently.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/howto/kafka/rpc.md#_snippet_6

LANGUAGE: python
CODE:
```
class RPCWorker:
    async def start(self) -> None:
        self.broker.setup_subscriber(self.subscriber)
        await self.subscriber.start()
```

----------------------------------------

TITLE: RabbitMQ Header Exchange: Message 4 Distribution
DESCRIPTION: Shows the code for publishing Message 4, which is routed to `handler3` because its `key` header matches the binding argument of the queue `handler3` listens to.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/examples/headers.md#_snippet_6

LANGUAGE: python
CODE:
```
{! docs_src/rabbit/subscription/header.py [ln:51.5]!}
```

----------------------------------------

TITLE: Adjust FastStream Broker Log Level to Retain Context Logger
DESCRIPTION: Illustrates how to lower the logging level of the broker itself (e.g., to DEBUG) using the log_level parameter during RabbitBroker initialization, allowing the context logger to remain accessible while reducing default log verbosity.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/logging.md#_snippet_3

LANGUAGE: python
CODE:
```
import logging
from faststream.rabbit import RabbitBroker

# Sets the broker logs to the DEBUG level
broker = RabbitBroker(log_level=logging.DEBUG)
```

----------------------------------------

TITLE: Publish Message 3 to NATS Direct Subject 'test-subj-2'
DESCRIPTION: Demonstrates publishing the third message to the 'test-subj-2' NATS Direct Subject. This message will be received by handler3, as it is the sole consumer subscribed to this specific subject.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/examples/direct.md#_snippet_5

LANGUAGE: python
CODE:
```
await broker.publish("3", subject="test-subj-2")
```

----------------------------------------

TITLE: Customize FastStream Application Information in AsyncAPI
DESCRIPTION: Demonstrates how to modify the FastStream application's title, version, and description fields to personalize the AsyncAPI documentation, reflecting the application's identity and purpose.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asyncapi/custom.md#_snippet_2

LANGUAGE: python
CODE:
```
{! docs_src/getting_started/asyncapi/asyncapi_customization/custom_info.py !}
```

----------------------------------------

TITLE: BaseSecurity Object for SSL/TLS Encryption
DESCRIPTION: The `BaseSecurity` object wraps an `ssl.SSLContext` object and is used to enable SSL/TLS encryption for secure communication between FastStream services and external components such as message brokers. It allows configuring certificate paths and verification purposes.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/security.md#_snippet_0

LANGUAGE: Python
CODE:
```
import ssl
from faststream.rabbit import RabbitBroker, RabbitSecurity

# Create an SSLContext object
ssl_context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
ssl_context.load_verify_locations("path/to/ca_certificate.pem")
ssl_context.load_cert_chain(
    certfile="path/to/client_certificate.pem",
    keyfile="path/to/client_key.pem"
)

# Wrap it with BaseSecurity
security = RabbitSecurity(ssl_context=ssl_context)

# Use it in the broker
broker = RabbitBroker("amqps://localhost:5671", security=security)
```

----------------------------------------

TITLE: Customize Broker Information in FastStream AsyncAPI Docs
DESCRIPTION: Illustrates how to update the broker's description and `asyncapi_url` within the FastStream application to provide clearer insights into the messaging infrastructure used in the AsyncAPI documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asyncapi/custom.md#_snippet_3

LANGUAGE: python
CODE:
```
{! docs_src/getting_started/asyncapi/asyncapi_customization/custom_broker.py !}
```

----------------------------------------

TITLE: KafkaTelemetryMiddleware Class Reference
DESCRIPTION: This entry provides the API reference for `KafkaTelemetryMiddleware`, a component designed to integrate OpenTelemetry tracing with Kafka operations in FastStream applications. It enables automatic instrumentation of Kafka producers and consumers for distributed tracing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/opentelemetry/middleware/KafkaTelemetryMiddleware.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.kafka.opentelemetry.middleware.KafkaTelemetryMiddleware:
```

----------------------------------------

TITLE: NatsMessage `in_progress()` Method
DESCRIPTION: A new `in_progress()` method has been added to the `NatsMessage` class. This method allows marking a NATS message as being actively processed, which can be useful for flow control and acknowledgment mechanisms.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_59

LANGUAGE: APIDOC
CODE:
```
NatsMessage.in_progress()
  description: Marks the NATS message as in progress.
```

----------------------------------------

TITLE: Define Basic Custom Decoder Signature for FastStream
DESCRIPTION: Shows the fundamental signature for a custom decoder function in FastStream. This function transforms a StreamMessage (e.g., KafkaMessage, RabbitMessage) into a DecodedMessage, which is the format used by the handler function. This pattern is applicable across various FastStream brokers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/serialization/decoder.md#_snippet_0

LANGUAGE: python
CODE:
```
from faststream.types import DecodedMessage
from faststream.kafka import KafkaMessage

def decoder(msg: KafkaMessage) -> DecodedMessage:
    ...
```

LANGUAGE: python
CODE:
```
from faststream.types import DecodedMessage
from faststream.confluent import KafkaMessage

def decoder(msg: KafkaMessage) -> DecodedMessage:
    ...
```

LANGUAGE: python
CODE:
```
from faststream.types import DecodedMessage
from faststream.rabbit import RabbitMessage

def decoder(msg: RabbitMessage) -> DecodedMessage:
    ...
```

LANGUAGE: python
CODE:
```
from faststream.types import DecodedMessage
from faststream.nats import NatsMessage

def decoder(msg: NatsMessage) -> DecodedMessage:
    ...
```

LANGUAGE: python
CODE:
```
from faststream.types import DecodedMessage
from faststream.redis import RedisMessage

def decoder(msg: RedisMessage) -> DecodedMessage:
    ...
```

----------------------------------------

TITLE: Publish Message 1 to NATS Direct Subject 'test-subj-1'
DESCRIPTION: Demonstrates publishing the first message to the 'test-subj-1' NATS Direct Subject. This message will be received by one of the consumers (handler1 or handler2) subscribed to this subject within the same queue group.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/nats/examples/direct.md#_snippet_3

LANGUAGE: python
CODE:
```
await broker.publish("1", subject="test-subj-1")
```

----------------------------------------

TITLE: Install FastStream with Broker Dependencies
DESCRIPTION: Instructions to install the FastStream library along with specific dependencies for different message brokers like AIOKafka, Confluent, RabbitMQ, NATS, and Redis using pip.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/index.md#_snippet_0

LANGUAGE: console
CODE:
```
pip install "faststream[kafka]"
```

LANGUAGE: console
CODE:
```
pip install "faststream[confluent]"
```

LANGUAGE: console
CODE:
```
pip install "faststream[rabbit]"
```

LANGUAGE: console
CODE:
```
pip install "faststream[nats]"
```

LANGUAGE: console
CODE:
```
pip install "faststream[redis]"
```

----------------------------------------

TITLE: Import FastStream and RedisBroker for Channel Subscription
DESCRIPTION: This snippet shows the necessary import statements for setting up a FastStream application with Redis Pub/Sub, including `FastStream` and `RedisBroker`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/pubsub/subscription.md#_snippet_1

LANGUAGE: Python
CODE:
```
from faststream import FastStream
from faststream.redis import RedisBroker
```

----------------------------------------

TITLE: Disable Default FastStream Broker and Application Logging
DESCRIPTION: Shows how to completely disable the default logging behavior of FastStream by setting logger=None during the initialization of RabbitBroker and FastStream app instances.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/logging.md#_snippet_2

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.rabbit import RabbitBroker

broker = RabbitBroker(logger=None)     # Disables broker logs
app = FastStream(broker, logger=None)  # Disables application logs
```

----------------------------------------

TITLE: Stop local Kafka Docker container
DESCRIPTION: This script stops the local Kafka Docker container, cleaning up resources after local development or testing of the FastStream application.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/template/index.md#_snippet_9

LANGUAGE: bash
CODE:
```
./scripts/stop_kafka_broker_locally.sh
```

----------------------------------------

TITLE: Declare FastStream Default Subscriber
DESCRIPTION: Demonstrates the syntax for declaring a default subscriber in FastStream. A subscriber without a `filter` argument acts as a universal handler, equivalent to `filter=lambda _: True`, ensuring all messages not caught by preceding specific filters are processed.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/filtering.md#_snippet_4

LANGUAGE: Python
CODE:
```
subscriber = broker.subscriber()

@subscriber(filter=...)
async def handler(): ...

@subscriber()
async def default_handler(): ...
```

----------------------------------------

TITLE: FastStream AsyncAPI Schema Generation Functions
DESCRIPTION: Functions for dynamically generating various parts of the AsyncAPI schema from a FastStream application, such as application schema, ASGI routes, broker channels, and server definitions.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_6

LANGUAGE: APIDOC
CODE:
```
get_app_schema
get_asgi_routes
get_broker_channels
get_broker_server
```

----------------------------------------

TITLE: FastStream BaseTelemetryMiddleware Class API Reference
DESCRIPTION: Reference for the `BaseTelemetryMiddleware` class, defining the base interface for telemetry middleware in FastStream applications using OpenTelemetry. This class serves as a foundation for custom telemetry integrations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/opentelemetry/middleware/BaseTelemetryMiddleware.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.opentelemetry.middleware.BaseTelemetryMiddleware:
```

----------------------------------------

TITLE: FastStream RedisMessage Object Attributes
DESCRIPTION: Defines the attributes available on the `RedisMessage` object in FastStream, which wraps the underlying Redis message with additional context. These attributes provide access to various message details like body, headers, message ID, and correlation ID.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/message.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
RedisMessage Attributes:
  body: Union[bytes, Any]
  raw_message: Any
  decoded_body: Optional[DecodedMessage]
  headers: AnyDict
  path: AnyDict
  content_type: Optional[str]
  reply_to: str
  message_id: str
  correlation_id: str
  processed: bool
  committed: bool
```

----------------------------------------

TITLE: RabbitMQ Header Exchange: Message 2 Distribution
DESCRIPTION: Illustrates the publishing of Message 2. It is routed to `handler2` when `handler1` is currently busy, demonstrating the load balancing mechanism among consumers subscribed to the same queue.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/examples/headers.md#_snippet_4

LANGUAGE: python
CODE:
```
{! docs_src/rabbit/subscription/header.py [ln:49.5]!}
```

----------------------------------------

TITLE: FastStream RabbitMQ Annotations Shortcuts
DESCRIPTION: Highlights the addition of convenient import shortcuts for `Connection` and `Channel` types within `faststream.rabbit.annotations`, simplifying type hinting for RabbitMQ components.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_26

LANGUAGE: APIDOC
CODE:
```
from faststream.rabbit.annotations import Connection, Channel
  Connection: Type hint for RabbitMQ connection objects.
  Channel: Type hint for RabbitMQ channel objects.
```

----------------------------------------

TITLE: Access Global Context Field in FastStream
DESCRIPTION: Illustrates how to access a previously declared global context field (e.g., 'my_secret') from the application's context using `context.get` for different messaging brokers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/custom.md#_snippet_1

LANGUAGE: Python
CODE:
```
from faststream import context
from faststream.kafka import KafkaBroker

@broker.subscriber("test-topic")
async def handle_message(msg: str):
    secret_value = context.get("my_secret")
    print(f"Accessed global secret: {secret_value}")
    # Further processing with secret_value
```

----------------------------------------

TITLE: Serve FastStream App with Customized AsyncAPI Schema JSON
DESCRIPTION: Use this shell command to serve your FastStream application with a manually edited `asyncapi.json` file. This allows you to apply custom fields, descriptions, and details to your AsyncAPI documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asyncapi/custom.md#_snippet_8

LANGUAGE: shell
CODE:
```
{! docs_src/getting_started/asyncapi/serve.py [ln:21] !}
```

----------------------------------------

TITLE: FastStream JSON Message Serialization to Generic Dictionary
DESCRIPTION: This example illustrates how to serialize an incoming JSON message into a generic Python dictionary (`dict[str, Any]`) within a FastStream subscriber. While this approach allows for basic JSON message consumption, it does not provide detailed validation of the dictionary's internal structure, which might be insufficient for robust applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/annotation.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Dict, Any

@broker.subscriber("test")
async def handle(
    msg: dict[str, Any],
):
    ...
```

----------------------------------------

TITLE: FastStream CLI `run` Multiple Extra Options
DESCRIPTION: The `faststream run` command now supports passing multiple extra options by repeating the `-k` flag. These options are collected into a list, providing more flexible command-line argument parsing for various configurations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_62

LANGUAGE: APIDOC
CODE:
```
faststream run -k 1 -k 2 ...
  description: Supports multiple extra options as a list (e.g., k=["1", "2"])
```

----------------------------------------

TITLE: Disabling FastStream Pydantic Validation for Message Bodies
DESCRIPTION: Illustrates how to disable automatic Pydantic validation and type casting for incoming messages by initializing the broker with `apply_types=False`. While type annotations can still be present, they will not enforce validation or casting, and `json.loads` results are consumed directly.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/index.md#_snippet_3

LANGUAGE: python
CODE:
```
from faststream.kafka import KafkaBroker

broker = KafkaBroker(apply_types=False)

@broker.subscriber("test")
async def handle_msg(msg_body: str):  # just an annotation, has no real effect
    ...
```

LANGUAGE: python
CODE:
```
from faststream.confluent import KafkaBroker

broker = KafkaBroker(apply_types=False)

@broker.subscriber("test")
async def handle_msg(msg_body: str):  # just an annotation, has no real effect
    ...
```

LANGUAGE: python
CODE:
```
from faststream.rabbit import RabbitBroker

broker = RabbitBroker(apply_types=False)

@broker.subscriber("test")
async def handle_msg(msg_body: str):  # just an annotation, has no real effect
    ...
```

LANGUAGE: python
CODE:
```
from faststream.nats import NatsBroker

broker = NatsBroker(apply_types=False)

@broker.subscriber("test")
async def handle_msg(msg_body: str):  # just an annotation, has no real effect
    ...
```

LANGUAGE: python
CODE:
```
from faststream.redis import RedisBroker

broker = RedisBroker(apply_types=False)

@broker.subscriber("test")
async def handle_msg(msg_body: str):  # just an annotation, has no real effect
    ...
```

----------------------------------------

TITLE: API Documentation Reference for AsyncAPIPullStreamSubscriber
DESCRIPTION: This entry points to the `AsyncAPIPullStreamSubscriber` class, a core component within the `faststream.nats.subscriber.asyncapi` module. It signifies that detailed API documentation for this class, likely related to handling asynchronous API pull streams with NATS, is available or generated from this reference.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/subscriber/asyncapi/AsyncAPIPullStreamSubscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.nats.subscriber.asyncapi.AsyncAPIPullStreamSubscriber
```

----------------------------------------

TITLE: Initialize FastStream KafkaBroker for Documented Publishers
DESCRIPTION: This snippet initializes a `KafkaBroker` instance, preparing it for the creation of explicit publisher objects. These objects are crucial for generating comprehensive AsyncAPI documentation for your service.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/kafka/Publisher/index.md#_snippet_2

LANGUAGE: python
CODE:
```
from faststream.kafka import KafkaBroker

broker = KafkaBroker("localhost:9092")
```

----------------------------------------

TITLE: Topic Exchange Message Distribution Example 4
DESCRIPTION: This final distribution example demonstrates the routing of the fourth message. It showcases how messages with different routing keys are directed to specific consumers listening to queues with distinct matching patterns, emphasizing the flexibility of topic-based routing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/examples/topic.md#_snippet_6

LANGUAGE: Python
CODE:
```
{! docs_src/rabbit/subscription/topic.py [ln:33.5]!}
```

----------------------------------------

TITLE: Topic Exchange Message Distribution Example 3
DESCRIPTION: Continuing the message distribution scenario, this example shows the routing of the third message. It further illustrates the load-balancing mechanism, with the message being sent to a handler that has become free.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/examples/topic.md#_snippet_5

LANGUAGE: Python
CODE:
```
{! docs_src/rabbit/subscription/topic.py [ln:32.5]!}
```

----------------------------------------

TITLE: Stop Test Broker Container
DESCRIPTION: Docker command to stop and remove the test message broker container (Kafka, RabbitMQ, NATS, or Redis) that was started for development purposes, freeing up resources.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/index.md#_snippet_8

LANGUAGE: bash
CODE:
```
docker container stop test-mq
```

----------------------------------------

TITLE: Install FastStream with Redis Support
DESCRIPTION: This command installs the FastStream library along with its Redis integration, allowing users to leverage Redis as a message broker. It ensures all necessary dependencies for Redis functionality are included.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_52

LANGUAGE: bash
CODE:
```
pip install "faststream[redis]"
```

----------------------------------------

TITLE: Generate Initial AsyncAPI Schema JSON for FastStream
DESCRIPTION: Run this shell command to generate the initial `asyncapi.json` file for your FastStream application. This file serves as a baseline for manual customization of your AsyncAPI documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asyncapi/custom.md#_snippet_7

LANGUAGE: shell
CODE:
```
{! docs_src/getting_started/asyncapi/serve.py [ln:9] !}
```

----------------------------------------

TITLE: FastStream AsyncAPI OAuthFlows Security Schema Reference
DESCRIPTION: This entry refers to the `OauthFlows` class, which is part of the `faststream.asyncapi.schema.security` module. It defines the structure for specifying OAuth 2.0 flows within an AsyncAPI document for security purposes.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/security/OauthFlows.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.asyncapi.schema.security.OauthFlows
```

----------------------------------------

TITLE: FastStream OauthFlowObj API Reference
DESCRIPTION: Documents the `OauthFlowObj` class, part of the `faststream.asyncapi.schema.security` module. This class is used to define OAuth 2.0 flows within AsyncAPI specifications for FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/security/OauthFlowObj.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asyncapi.schema.security.OauthFlowObj
```

----------------------------------------

TITLE: Reference to FastStream AsyncAPI Schema Components
DESCRIPTION: This entry points to the `Components` class within the `faststream.asyncapi.schema` module. In the context of documentation generation tools like MkDocs, this directive typically triggers the automatic inclusion of detailed API documentation for this specific Python class, including its methods, properties, and usage.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/Components.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
faststream.asyncapi.schema.Components
```

----------------------------------------

TITLE: API Reference for faststream.testing.app.TestApp
DESCRIPTION: Documents the `TestApp` class within the `faststream.testing.app` module, which is used for testing FastStream applications. This entry provides a high-level overview of the class.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/TestApp.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.testing.app.TestApp
  Description: A class likely used for testing FastStream applications.
```

----------------------------------------

TITLE: FastStream Class API Reference
DESCRIPTION: References the `FastStream` class, likely the core component of the FastStream library, indicating its availability for detailed API documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/FastStream.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.FastStream
```

----------------------------------------

TITLE: FastStream CLI AsyncAPI Commands Overview
DESCRIPTION: Provides the help output for the `faststream docs` command, detailing its subcommands: `gen` for generating AsyncAPI schemas (JSON/YAML) and `serve` for hosting an HTML representation of the schema.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/cli/index.md#_snippet_11

LANGUAGE: shell
CODE:
```
Usage: faststream docs [OPTIONS] COMMAND [ARGS]...

  AsyncAPI schema commands

Options:
  --help  Show this message and exit.

Commands:
  gen    Generate project AsyncAPI schema
  serve  Serve project AsyncAPI schema
```

----------------------------------------

TITLE: Serve FastStream App to View AsyncAPI Payload Schema
DESCRIPTION: Execute this shell command to serve your FastStream application. This action will generate and display the AsyncAPI documentation, including the payload schema defined by your Pydantic models, in your browser.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asyncapi/custom.md#_snippet_6

LANGUAGE: shell
CODE:
```
{! docs_src/getting_started/asyncapi/serve.py [ln:17] !}
```

----------------------------------------

TITLE: FastStream KafkaRouter API Reference
DESCRIPTION: References the `KafkaRouter` class documentation from the `faststream.kafka.fastapi` module. This class is central to integrating Kafka messaging with FastAPI applications, enabling robust message routing and handling.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/fastapi/KafkaRouter.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.kafka.fastapi.KafkaRouter
```

----------------------------------------

TITLE: Define Avro Schema in Python
DESCRIPTION: Shows how to define an Avro schema directly within a Python file as a dictionary. This schema specifies the structure of the `Person` record, including `name` (string) and `age` (int) fields.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/serialization/examples.md#_snippet_8

LANGUAGE: Python
CODE:
```
schema = {
    "type": "record",
    "name": "Person",
    "fields": [
        {"name": "name", "type": "string"},
        {"name": "age", "type": "int"},
    ],
}
```

----------------------------------------

TITLE: FastStream NATS Publisher Class Reference
DESCRIPTION: Documentation for the `NatsPublisher` class in `faststream.nats`, which is responsible for handling the publication of messages to a NATS broker. This class typically manages the connection and serialization of outgoing messages.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/NatsPublisher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.nats.NatsPublisher:
  # This class is used for publishing messages to NATS topics.
  # Example methods might include:
  #   __init__(self, broker: NatsBroker, ...) -> None
  #     broker: The NATS broker instance to use.
  #   publish(self, message: Any, topic: str, ...) -> None
  #     message: The data to send.
  #     topic: The NATS topic to publish to.
```

----------------------------------------

TITLE: FastStream RabbitQueue Schema API Reference
DESCRIPTION: Defines the structure and properties of the RabbitQueue schema used in FastStream for RabbitMQ integrations. This entry provides a high-level overview of the class and its typical attributes.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/schemas/RabbitQueue.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.rabbit.schemas.RabbitQueue:
  """Represents a RabbitMQ queue configuration.

  This class is typically used to define the characteristics of a queue
  when declaring it in a FastStream application.
  """
  # Properties (example placeholders, actual properties would be extracted from full documentation)
  name: str
    The name of the queue.
  durable: bool = True
    Whether the queue is durable across broker restarts.
  auto_delete: bool = False
    Whether the queue is deleted when its last consumer unsubscribes.
  exclusive: bool = False
    Whether the queue is exclusive to the current connection.
  arguments: dict = None
    Optional arguments for the queue, as a dictionary.
```

----------------------------------------

TITLE: Enable Explicit Type Casting for FastStream Context Fields
DESCRIPTION: Shows how to enable explicit type casting for fields within the FastStream `Context` object. This ensures that context values are converted to the type specified in their annotations when accessed.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/extra.md#_snippet_2

LANGUAGE: Python
CODE:
```
from faststream import Context, FastStream
from typing import Annotated

app = FastStream()

@app.broker.subscriber("test")
async def handler(
    value: int,
    my_field: Annotated[str, Context("my_field", cast=True)]
):
    # If context has my_field=123, my_field will be "123" (str)
    print(f"Type of my_field: {type(my_field)}")
```

----------------------------------------

TITLE: CriticalLogMiddleware
DESCRIPTION: API reference for the `CriticalLogMiddleware` class, a middleware for handling critical logs in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_38

LANGUAGE: APIDOC
CODE:
```
CriticalLogMiddleware
```

----------------------------------------

TITLE: API Reference for faststream.nats.parser.KvParser
DESCRIPTION: Documents the KvParser class, likely used for parsing key-value messages within the FastStream NATS integration. This entry provides the class signature as referenced in the documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/parser/KvParser.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.nats.parser.KvParser:
```

----------------------------------------

TITLE: Accessing Specific Field of Context Object
DESCRIPTION: Shows how to directly access a particular field within a context object, demonstrating granular data retrieval.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/fields.md#_snippet_2

LANGUAGE: python
CODE:
```
{! docs_src/getting_started/context/kafka/fields_access.py [ln:12.5] !}
```

----------------------------------------

TITLE: Use `RPCWorker` with Manual Startup in FastStream
DESCRIPTION: Illustrates how to use the `RPCWorker` when its `start` method is called explicitly after the FastStream application has begun. This ensures the worker's subscriber is set up and running before requests are made.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/howto/kafka/rpc.md#_snippet_7

LANGUAGE: python
CODE:
```
from faststream import FastStream
from faststream.kafka import KafkaBroker

broker = KafkaBroker()
app = FastStream(broker)

@app.after_startup
async def send_request() -> None:
    worker = RPCWorker(broker, reply_topic="responses")
    await worker.start()

    data = await worker.request("echo", "echo-topic")
    assert data == "echo"
```

----------------------------------------

TITLE: Importing Confluent Kafka Specific Context Annotations
DESCRIPTION: Illustrates how to import `Annotated` aliases specific to Confluent Kafka from `faststream.confluent.annotations`. These aliases, including `Logger`, `ContextRepo`, `KafkaMessage`, `KafkaBroker`, `KafkaProducer`, and `NoCast`, facilitate type-hinted access to Confluent Kafka-related context objects.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/existed.md#_snippet_3

LANGUAGE: Python
CODE:
```
from faststream.confluent.annotations import (
    Logger, ContextRepo, KafkaMessage,
    KafkaBroker, KafkaProducer, NoCast,
)
```

----------------------------------------

TITLE: Importing AIOKafka Specific Context Annotations
DESCRIPTION: Illustrates how to import `Annotated` aliases specific to AIOKafka from `faststream.kafka.annotations`. These aliases, including `Logger`, `ContextRepo`, `KafkaMessage`, `KafkaBroker`, `KafkaProducer`, and `NoCast`, facilitate type-hinted access to AIOKafka-related context objects.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/existed.md#_snippet_1

LANGUAGE: Python
CODE:
```
from faststream.kafka.annotations import (
    Logger, ContextRepo, KafkaMessage,
    KafkaBroker, KafkaProducer, NoCast,
)
```

----------------------------------------

TITLE: Install FastStream Project Development Dependencies
DESCRIPTION: Installs all necessary development dependencies and the local FastStream project in editable mode. This allows immediate reflection of source code changes without reinstallation, facilitating rapid development and testing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/CONTRIBUTING.md#_snippet_3

LANGUAGE: bash
CODE:
```
pip install -e ".[dev]"
```

----------------------------------------

TITLE: faststream.confluent.broker.KafkaBroker Class Reference
DESCRIPTION: Reference for the `KafkaBroker` class, used to establish and manage connections to Apache Kafka brokers within the FastStream application. This class facilitates message publishing and consumption.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/broker/KafkaBroker.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.broker.KafkaBroker:
  Description: Core class for establishing and managing connections to Apache Kafka brokers within the FastStream framework.
  Purpose: Facilitates message publishing to and consumption from Kafka topics.
  Methods:
    (No specific methods detailed in the provided source snippet)
  Properties:
    (No specific properties detailed in the provided source snippet)
```

----------------------------------------

TITLE: Importing NATS Specific Context Annotations
DESCRIPTION: Illustrates how to import `Annotated` aliases specific to NATS from `faststream.nats.annotations`. These aliases, including `Logger`, `ContextRepo`, `NatsMessage`, `NatsBroker`, `NatsProducer`, `NatsJsProducer`, `Client`, `JsClient`, and `NoCast`, facilitate type-hinted access to NATS-related context objects.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/existed.md#_snippet_7

LANGUAGE: Python
CODE:
```
from faststream.nats.annotations import (
    Logger, ContextRepo, NatsMessage,
    NatsBroker, NatsProducer, NatsJsProducer,
    Client, JsClient, NoCast,
)
```

----------------------------------------

TITLE: Generate AsyncAPI Specification in JSON
DESCRIPTION: Command-line instruction to generate the AsyncAPI specification from a FastStream application and save it as `asyncapi.json`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asyncapi/export.md#_snippet_1

LANGUAGE: Shell
CODE:
```
{! docs_src/getting_started/asyncapi/serve.py [ln:9] !}
```

----------------------------------------

TITLE: FastStream CLI Command Reference
DESCRIPTION: This section outlines the available commands and global options for the FastStream CLI, including version display, shell completion installation, and help access, along with subcommands like `docs` and `run`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/cli/index.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Usage: faststream [OPTIONS] COMMAND [ARGS]...

  Generate, run and manage FastStream apps to greater development experience

Options:
  -v, --version                   Show current platform, python and FastStream
                                  version
  --install-completion [bash|zsh|fish|powershell|pwsh]
                                  Install completion for the specified shell.
  --show-completion [bash|zsh|fish|powershell|pwsh]
                                  Show completion for the specified shell, to
                                  copy it or customize the installation.
  --help                          Show this message and exit.

Commands:
  docs  AsyncAPI schema commands
  run   Run [MODULE:APP] FastStream application
```

----------------------------------------

TITLE: Generate AsyncAPI Specification in YAML
DESCRIPTION: Command-line instruction to generate the AsyncAPI specification from a FastStream application and save it as `asyncapi.yaml`. This requires the `PyYAML` dependency.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asyncapi/export.md#_snippet_2

LANGUAGE: Shell
CODE:
```
{! docs_src/getting_started/asyncapi/serve.py [ln:13] !}
```

----------------------------------------

TITLE: FastStream TestNatsBroker Class API Reference
DESCRIPTION: Detailed API documentation for the `TestNatsBroker` class, including its purpose, module path, and general structure. This class is essential for unit and integration testing of NATS-based message brokers in FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/testing/TestNatsBroker.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
TestNatsBroker:
  type: class
  module: faststream.nats.testing
```

----------------------------------------

TITLE: FastStream NATS Module and Class API Index
DESCRIPTION: This section outlines the hierarchical structure of the `faststream.nats` library, listing its main modules and the classes or functions contained within them. It serves as a quick reference for navigating the library's API surface.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_64

LANGUAGE: APIDOC
CODE:
```
faststream.nats API Components:
  helpers:
    bucket_declarer:
      KVBucketDeclarer
    obj_storage_declarer:
      OSBucketDeclarer
    object_builder:
      StreamBuilder
  message:
    NatsBatchMessage
    NatsKvMessage
    NatsMessage
    NatsObjMessage
  opentelemetry:
    NatsTelemetryMiddleware
    middleware:
      NatsTelemetryMiddleware
    provider:
      BaseNatsTelemetrySettingsProvider
      NatsBatchTelemetrySettingsProvider
      NatsTelemetrySettingsProvider
      telemetry_attributes_provider_factory
  parser:
    BatchParser
    JsParser
    KvParser
    NatsBaseParser
    NatsParser
    ObjParser
  prometheus:
    NatsPrometheusMiddleware
    middleware:
      NatsPrometheusMiddleware
    provider:
      BaseNatsMetricsSettingsProvider
      BatchNatsMetricsSettingsProvider
      NatsMetricsSettingsProvider
      settings_provider_factory
  publisher:
    asyncapi:
      AsyncAPIPublisher
    producer:
      NatsFastProducer
      NatsJSFastProducer
    usecase:
      LogicPublisher
  response:
    NatsResponse
  router:
    NatsPublisher
    NatsRoute
    NatsRouter
  schemas:
    JStream
    KvWatch
    ObjWatch
    PullSub
    js_stream:
      JStream
      compile_nats_wildcard
      is_subject_match_wildcard
    kv_watch:
      KvWatch
    obj_watch:
      ObjWatch
    pull_sub:
      PullSub
```

----------------------------------------

TITLE: Accessing Dictionary Key in Context Object
DESCRIPTION: Demonstrates how to retrieve a value by its key from a dictionary stored within the context object.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/fields.md#_snippet_3

LANGUAGE: python
CODE:
```
{! docs_src/getting_started/context/kafka/fields_access.py [ln:13.5] !}
```

----------------------------------------

TITLE: Display FastStream CLI Help
DESCRIPTION: Executes the FastStream CLI with the `--help` option to display a list of available commands, options, and their descriptions, providing guidance on tool usage.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/cli/index.md#_snippet_1

LANGUAGE: shell
CODE:
```
faststream --help
```

----------------------------------------

TITLE: Run Default FastStream Pytest Tests
DESCRIPTION: Executes the standard set of Pytest tests for the FastStream application, excluding 'slow' tests by default. Multiple commands are provided for running tests directly or via helper scripts.
SOURCE: https://github.com/ag2ai/faststream/blob/main/CONTRIBUTING.md#_snippet_5

LANGUAGE: bash
CODE:
```
pytest tests
```

LANGUAGE: bash
CODE:
```
./scripts/test.sh
```

LANGUAGE: bash
CODE:
```
./scripts/test-cov.sh
```

----------------------------------------

TITLE: Serving Static Files via Starlette in ASGI
DESCRIPTION: Extends the `asgi.py` configuration to integrate Starlette's `StaticFiles` handler. This allows the Starlette application to efficiently serve static assets from the `static/` directory, enhancing static file management compared to Django's default.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/django/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
# Code above omitted 👆

from starlette.staticfiles import StaticFiles

application = Starlette(
    routes=(
        # /static is your STATIC_URL setting
        Mount("/static", StaticFiles(directory="static"), name="static"),
        Mount("/", get_asgi_application()),  # regular Django ASGI
    ),
)
```

----------------------------------------

TITLE: Faststream RabbitMQ FastAPI Router Class Reference
DESCRIPTION: Reference for the `RabbitRouter` class, part of the `faststream.rabbit.fastapi` module, used for integrating RabbitMQ with FastAPI applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/fastapi/RabbitRouter.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.rabbit.fastapi.RabbitRouter
```

----------------------------------------

TITLE: FastStream Confluent Async Producer Class Reference
DESCRIPTION: Reference for the `AsyncConfluentFastProducer` class, a core component in FastStream for handling asynchronous message production with Confluent Kafka. This class is typically used to send messages to Kafka topics.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/publisher/producer/AsyncConfluentFastProducer.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.publisher.producer.AsyncConfluentFastProducer
```

----------------------------------------

TITLE: FastStream Multiprocess Supervisor Class API Reference
DESCRIPTION: References the `Multiprocess` class from the `faststream.cli.supervisors.multiprocess` module. This entry indicates that detailed API documentation for this specific class, including its methods, properties, and usage, should be generated or is available at this path.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/cli/supervisors/multiprocess/Multiprocess.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.cli.supervisors.multiprocess.Multiprocess
```

----------------------------------------

TITLE: FastStream Context Class API Reference
DESCRIPTION: References the `Context` class from the `faststream.broker.fastapi` module, which is a core component for handling message contexts in FastStream applications integrated with FastAPI.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/fastapi/Context.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.broker.fastapi.context.Context
```

----------------------------------------

TITLE: Configure Redis Stream maxlen in FastStream Publisher
DESCRIPTION: This Python code snippet demonstrates how to configure the `max_len` option for a Redis Stream when defining a publisher in FastStream. It allows controlling the maximum number of messages retained in the stream.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_44

LANGUAGE: python
CODE:
```
@broker.publisher(stream=StreamSub("Output", max_len=10))
async def on_input_data():
    ....
```

----------------------------------------

TITLE: API Documentation Directive for FastStream Confluent KafkaResponse
DESCRIPTION: This entry represents a documentation directive used to automatically generate and include the API reference for the `faststream.confluent.KafkaResponse` class. The full class definition and its members would be rendered by the documentation tool based on this directive.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/KafkaResponse.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.confluent.KafkaResponse
```

----------------------------------------

TITLE: Configure AsyncAPI Schema Inclusion
DESCRIPTION: The `include_in_schema` boolean argument is now available for `subscriber`, `publisher`, and `router` objects. Setting this argument to `False` allows developers to disable the rendering of specific components in the AsyncAPI documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_55

LANGUAGE: APIDOC
CODE:
```
subscriber.include_in_schema: bool
publisher.include_in_schema: bool
router.include_in_schema: bool
  description: Argument to disable AsyncAPI render
```

----------------------------------------

TITLE: FastStream Context Class API Reference
DESCRIPTION: Documents the `Context` class from the `faststream.broker.fastapi` module, which is central to managing application context within FastStream.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/fastapi/context/Context.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.broker.fastapi.context.Context
```

----------------------------------------

TITLE: Execute FastStream CLI from Local Environment
DESCRIPTION: Demonstrates how to run the FastStream command-line interface using the locally installed version within the virtual environment, ensuring local changes are reflected.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/contributing/CONTRIBUTING.md#_snippet_4

LANGUAGE: bash
CODE:
```
python -m faststream ...
```

----------------------------------------

TITLE: FastStream Redis Prometheus Integration API
DESCRIPTION: API documentation for Prometheus integration in FastStream Redis, covering middleware and settings providers for metrics collection.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_72

LANGUAGE: APIDOC
CODE:
```
RedisPrometheusMiddleware (api/faststream/redis/prometheus/RedisPrometheusMiddleware.md)
middleware:
  RedisPrometheusMiddleware (api/faststream/redis/prometheus/middleware/RedisPrometheusMiddleware.md)
provider:
  BaseRedisMetricsSettingsProvider (api/faststream/redis/prometheus/provider/BaseRedisMetricsSettingsProvider.md)
  BatchRedisMetricsSettingsProvider (api/faststream/redis/prometheus/provider/BatchRedisMetricsSettingsProvider.md)
  RedisMetricsSettingsProvider (api/faststream/redis/prometheus/provider/RedisMetricsSettingsProvider.md)
  settings_provider_factory (api/faststream/redis/prometheus/provider/settings_provider_factory.md)
```

----------------------------------------

TITLE: FastStream Kafka BatchPublisher API Reference
DESCRIPTION: Detailed API documentation for the `BatchPublisher` class within the `faststream.kafka.publisher.usecase` module, typically used for publishing messages in batches to Kafka.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/publisher/usecase/BatchPublisher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.kafka.publisher.usecase.BatchPublisher
```

----------------------------------------

TITLE: FastStream Kafka Telemetry Middleware Class Reference
DESCRIPTION: Provides the API reference for the `KafkaTelemetryMiddleware` class, used to integrate OpenTelemetry tracing capabilities into FastStream applications interacting with Kafka.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/opentelemetry/KafkaTelemetryMiddleware.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.kafka.opentelemetry.KafkaTelemetryMiddleware
Description: Middleware for integrating OpenTelemetry tracing with FastStream Kafka applications.
```

----------------------------------------

TITLE: API Reference: faststream.confluent.testing.build_message
DESCRIPTION: Documents the `build_message` function, a utility for creating messages in a test environment for FastStream applications interacting with Confluent Kafka. This function is typically used to simulate incoming messages for unit or integration tests.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/testing/build_message.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.testing.build_message()
```

----------------------------------------

TITLE: Import PubSub for Redis Pattern Matching
DESCRIPTION: This snippet shows the import statement for the `PubSub` class from `faststream.redis`, which is essential for defining pattern-based channel subscriptions in FastStream.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/pubsub/subscription.md#_snippet_5

LANGUAGE: Python
CODE:
```
from faststream import FastStream
from faststream.redis import RedisBroker, PubSub
```

----------------------------------------

TITLE: EndpointProto
DESCRIPTION: API reference for the `EndpointProto` protocol/interface, defining endpoint behavior in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_39

LANGUAGE: APIDOC
CODE:
```
EndpointProto
```

----------------------------------------

TITLE: Reference to faststream.asyncapi.schema.Contact API Component
DESCRIPTION: This directive points to the `Contact` schema definition within the `faststream.asyncapi` module. It is typically used by documentation generators (e.g., mkdocstrings) to automatically include the detailed API documentation for the Contact schema, which defines contact information within an AsyncAPI specification.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/Contact.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.asyncapi.schema.Contact
```

----------------------------------------

TITLE: PublisherProto
DESCRIPTION: API reference for the `PublisherProto` protocol/interface, defining publisher behavior in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_44

LANGUAGE: APIDOC
CODE:
```
PublisherProto
```

----------------------------------------

TITLE: Setting up FastStream Documentation Development Environment
DESCRIPTION: This section outlines the essential steps to set up a local development environment for contributing to the FastStream documentation. It covers creating and activating a virtual environment, installing necessary dependencies, and starting the local documentation server to preview changes.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/contributing/docs.md#_snippet_0

LANGUAGE: bash
CODE:
```
python -m venv venv
```

LANGUAGE: bash
CODE:
```
source venv/bin/activate
```

LANGUAGE: bash
CODE:
```
pip install ".[devdocs]"
```

LANGUAGE: bash
CODE:
```
mkdocs serve
```

----------------------------------------

TITLE: Avro Schema File Content (person.avsc)
DESCRIPTION: The content of the `person.avsc` file, defining the Avro schema for a `Person` record. This JSON-based schema specifies the data types and structure for Avro serialization.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/serialization/examples.md#_snippet_10

LANGUAGE: json
CODE:
```
{
    "type": "record",
    "name": "Person",
    "fields": [
        {"name": "name", "type": "string"},
        {"name": "age", "type": "int"}
    ]
}
```

----------------------------------------

TITLE: FastStream RedisRouter Class Definition
DESCRIPTION: Defines the `RedisRouter` class, a core component for routing messages via Redis within a FastStream application integrated with FastAPI. This class is typically used to manage message consumers and producers tied to Redis streams or channels.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/fastapi/RedisRouter.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.redis.fastapi.RedisRouter
```

----------------------------------------

TITLE: Importing NATS Message Alias
DESCRIPTION: Demonstrates a convenient alias for `NatsMessage` directly from `faststream.nats`. This provides a shorter import path for the `NatsMessage` type, simplifying its use in subscriber argument annotations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/existed.md#_snippet_8

LANGUAGE: Python
CODE:
```
from faststream.nats import NatsMessage
```

----------------------------------------

TITLE: FastStream StreamMessage: `batch_headers` Attribute
DESCRIPTION: Describes the new `batch_headers` attribute added to `StreamMessage`, providing convenient access to the headers of all individual messages when processing a batch of messages.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_25

LANGUAGE: APIDOC
CODE:
```
StreamMessage.batch_headers: List[Dict[str, Any]]
  Description: Provides access to the headers of all messages when processing a batch.
```

----------------------------------------

TITLE: Importing AIOKafka Message Alias
DESCRIPTION: Demonstrates a convenient alias for `KafkaMessage` directly from `faststream.kafka`. This provides a shorter import path for the `KafkaMessage` type, simplifying its use in subscriber argument annotations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/existed.md#_snippet_2

LANGUAGE: Python
CODE:
```
from faststream.kafka import KafkaMessage
```

----------------------------------------

TITLE: Faststream AckMessage Exception Reference
DESCRIPTION: References the `AckMessage` exception within the `faststream.exceptions` module, indicating its availability for API documentation generation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/exceptions/AckMessage.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.exceptions.AckMessage
```

----------------------------------------

TITLE: Host AsyncAPI Documentation with FastStream ASGI
DESCRIPTION: Explains how to enable and host the AsyncAPI HTML documentation directly within the `AsgiFastStream` application by specifying an `asyncapi_path`, making it accessible via a dedicated URL.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asgi.md#_snippet_7

LANGUAGE: python
CODE:
```
from faststream.nats import NatsBroker
from faststream.asgi import AsgiFastStream

broker = NatsBroker()

app = AsgiFastStream(
    broker,
    asyncapi_path="/docs",
)
```

----------------------------------------

TITLE: Accessing Context Object by Name (Specific Line Reference)
DESCRIPTION: Illustrates how to access a context object by its name, specifically referencing a particular line within the source file for different FastStream backends.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/fields.md#_snippet_1

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/context/kafka/fields_access.py [ln:11.5] !}
```

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/context/confluent/fields_access.py [ln:11.5] !}
```

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/context/rabbit/fields_access.py [ln:11.5] !}
```

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/context/nats/fields_access.py [ln:11.5] !}
```

LANGUAGE: python
CODE:
```
{!> docs_src/getting_started/context/redis/fields_access.py [ln:11.5] !}
```

----------------------------------------

TITLE: Load Avro Schema from File in Python
DESCRIPTION: Demonstrates how to load an Avro schema from an external `.avsc` file using Python's `json` module. This approach promotes schema reusability and separation of concerns.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/serialization/examples.md#_snippet_9

LANGUAGE: Python
CODE:
```
import json

with open("person.avsc", "r") as f:
    schema = json.load(f)
```

----------------------------------------

TITLE: FastStream Kafka AioKafkaBatchParser API Reference
DESCRIPTION: Documentation for the `AioKafkaBatchParser` class, which is part of the `faststream.kafka.parser` module and is used for parsing Kafka message batches in FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/parser/AioKafkaBatchParser.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.kafka.parser.AioKafkaBatchParser
```

----------------------------------------

TITLE: FastStream Redis Message API
DESCRIPTION: API documentation for various message types and handling mechanisms in FastStream Redis, including batch, stream, list, and pub/sub messages.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_69

LANGUAGE: APIDOC
CODE:
```
BatchListMessage (api/faststream/redis/message/BatchListMessage.md)
BatchStreamMessage (api/faststream/redis/message/BatchStreamMessage.md)
DefaultListMessage (api/faststream/redis/message/DefaultListMessage.md)
DefaultStreamMessage (api/faststream/redis/message/DefaultStreamMessage.md)
ListMessage (api/faststream/redis/message/ListMessage.md)
PubSubMessage (api/faststream/redis/message/PubSubMessage.md)
RedisBatchListMessage (api/faststream/redis/message/RedisBatchListMessage.md)
RedisBatchStreamMessage (api/faststream/redis/message/RedisBatchStreamMessage.md)
RedisListMessage (api/faststream/redis/message/RedisListMessage.md)
RedisMessage (api/faststream/redis/message/RedisMessage.md)
RedisStreamMessage (api/faststream/redis/message/RedisStreamMessage.md)
StreamMessage (api/faststream/redis/message/StreamMessage.md)
UnifyRedisDict (api/faststream/redis/message/UnifyRedisDict.md)
UnifyRedisMessage (api/faststream/redis/message/UnifyRedisMessage.md)
```

----------------------------------------

TITLE: FastStream BaseSecurity Class Reference
DESCRIPTION: References the `BaseSecurity` class from the `faststream.security` module, which serves as the base for implementing security functionalities in FastStream applications. This entry points to the core API element for security definitions.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/security/BaseSecurity.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.security.BaseSecurity
```

----------------------------------------

TITLE: KafkaTelemetryMiddleware Class Definition
DESCRIPTION: Documents the `KafkaTelemetryMiddleware` class within the `faststream.confluent.opentelemetry` module, likely used for OpenTelemetry integration with Confluent Kafka in FastStream.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/opentelemetry/KafkaTelemetryMiddleware.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.opentelemetry.KafkaTelemetryMiddleware
```

----------------------------------------

TITLE: RabbitQueue Class API Reference
DESCRIPTION: This snippet provides a direct reference to the `RabbitQueue` class, indicating its fully qualified path within the `faststream` library. It serves as a pointer to the detailed API documentation for configuring RabbitMQ queues.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/schemas/queue/RabbitQueue.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.rabbit.schemas.queue.RabbitQueue
```

----------------------------------------

TITLE: FastStream Utility Function: to_async
DESCRIPTION: References the `to_async` utility function from `faststream.utils.functions`, which is typically used to convert synchronous callables into asynchronous ones, enabling their use in an async context.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/utils/functions/to_async.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.utils.functions.to_async
```

----------------------------------------

TITLE: FastStream NATS Unsubscriptable Class API Reference
DESCRIPTION: API documentation for the `Unsubscriptable` class, which is part of the `faststream.nats.subscriber.subscription` module. This class likely signifies an entity that cannot be unsubscribed from in the context of NATS messaging, indicating a permanent subscription or similar construct.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/subscriber/subscription/Unsubscriptable.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.nats.subscriber.subscription.Unsubscriptable:
  Description: Represents an object or subscription that cannot be unsubscribed from.
```

----------------------------------------

TITLE: FastStream Kafka TestBroker Class Reference
DESCRIPTION: Documents the `TestKafkaBroker` class, a utility for testing Kafka-based FastStream applications. This class provides an interface to simulate Kafka broker behavior for unit and integration tests.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/testing/TestKafkaBroker.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.kafka.testing.TestKafkaBroker
```

----------------------------------------

TITLE: FastStream RabbitMQ ReplyConfig Class Reference
DESCRIPTION: Documents the `ReplyConfig` class within `faststream.rabbit`, which is essential for defining how replies are handled in RabbitMQ message processing within a FastStream application.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/ReplyConfig.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.rabbit.ReplyConfig
  Description: Configuration class for handling replies in FastStream RabbitMQ consumers.
  Usage: Used internally by FastStream to manage reply-to headers and correlation IDs for request-reply patterns.
```

----------------------------------------

TITLE: API Reference for BatchRedisMetricsSettingsProvider
DESCRIPTION: References the `BatchRedisMetricsSettingsProvider` class within the `faststream.redis.prometheus.provider` module, typically used for generating API documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/prometheus/provider/BatchRedisMetricsSettingsProvider.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.redis.prometheus.provider.BatchRedisMetricsSettingsProvider
```

----------------------------------------

TITLE: FastStream Redis Message Parser API
DESCRIPTION: API documentation for message parsing components in FastStream Redis, including parsers for raw, batch, list, pub/sub, and stream messages.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_71

LANGUAGE: APIDOC
CODE:
```
RawMessage (api/faststream/redis/parser/RawMessage.md)
RedisBatchListParser (api/faststream/redis/parser/RedisBatchListParser.md)
RedisBatchStreamParser (api/faststream/redis/parser/RedisBatchStreamParser.md)
RedisListParser (api/faststream/redis/parser/RedisListParser.md)
RedisPubSubParser (api/faststream/redis/parser/RedisPubSubParser.md)
RedisStreamParser (api/faststream/redis/parser/RedisStreamParser.md)
SimpleParser (api/faststream/redis/parser/SimpleParser.md)
```

----------------------------------------

TITLE: FastStream Redis OpenTelemetry Integration API
DESCRIPTION: API documentation for OpenTelemetry integration in FastStream Redis, covering middleware and settings providers for tracing and metrics.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_70

LANGUAGE: APIDOC
CODE:
```
RedisTelemetryMiddleware (api/faststream/redis/opentelemetry/RedisTelemetryMiddleware.md)
middleware:
  RedisTelemetryMiddleware (api/faststream/redis/opentelemetry/middleware/RedisTelemetryMiddleware.md)
provider:
  RedisTelemetrySettingsProvider (api/faststream/redis/opentelemetry/provider/RedisTelemetrySettingsProvider.md)
```

----------------------------------------

TITLE: FastStream Redis ListMessage Class Reference
DESCRIPTION: Reference to the `ListMessage` class, part of the `faststream.redis.message` module, used for handling messages in Redis lists within the FastStream framework. This directive typically triggers auto-generation of its full API documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/message/ListMessage.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.redis.message.ListMessage
```

----------------------------------------

TITLE: FastStream StandardDataclass Type Reference
DESCRIPTION: Documents the `StandardDataclass` type from the `faststream.types` module, indicating its availability and usage for defining data structures in FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/types/StandardDataclass.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.types.StandardDataclass
```

----------------------------------------

TITLE: API Reference for NatsTelemetryMiddleware Class
DESCRIPTION: Documents the API for the `NatsTelemetryMiddleware` class. This middleware is intended to provide OpenTelemetry integration for NATS consumers and producers within a FastStream application, enabling distributed tracing and metrics collection.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/opentelemetry/middleware/NatsTelemetryMiddleware.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
NatsTelemetryMiddleware:
  Module: faststream.nats.opentelemetry.middleware
  Description: A middleware class for integrating OpenTelemetry tracing and metrics with NATS message processing.
  Methods:
    (No specific methods detailed in source)
  Properties:
    (No specific properties detailed in source)
```

----------------------------------------

TITLE: Importing Redis Message Alias
DESCRIPTION: Demonstrates a convenient alias for `RedisMessage` directly from `faststream.redis`. This provides a shorter import path for the `RedisMessage` type, simplifying its use in subscriber argument annotations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/existed.md#_snippet_10

LANGUAGE: Python
CODE:
```
from faststream.redis import RedisMessage
```

----------------------------------------

TITLE: FastStream Kafka: TestKafkaBroker Class Reference
DESCRIPTION: Documents the `TestKafkaBroker` class within the `faststream.kafka` module, outlining its purpose and basic structure for testing Kafka integrations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/TestKafkaBroker.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.kafka.TestKafkaBroker
  Description: Represents a test broker for Kafka within the FastStream framework.
  Methods:
    __init__(self, *args, **kwargs)
      Description: Initializes the TestKafkaBroker.
      Parameters:
        *args: Arbitrary positional arguments.
        **kwargs: Arbitrary keyword arguments.
      Returns: None

```

----------------------------------------

TITLE: FastStream Confluent and Kafka API Modules and Components
DESCRIPTION: Comprehensive listing of FastStream's API components for Confluent and Kafka, organized by module. Includes classes for brokers, publishers, subscribers, routers, schemas, testing, and common exceptions.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_60

LANGUAGE: APIDOC
CODE:
```
faststream:
  confluent:
    publisher:
      usecase:
        LogicPublisher
    response:
      KafkaResponse
    router:
      KafkaPublisher
      KafkaRoute
      KafkaRouter
    schemas:
      TopicPartition
      params:
        ConsumerConnectionParams
        SecurityOptions
      partition:
        TopicPartition
    security:
      parse_security
    subscriber:
      asyncapi:
        AsyncAPIBatchSubscriber
        AsyncAPIConcurrentDefaultSubscriber
        AsyncAPIDefaultSubscriber
        AsyncAPISubscriber
      factory:
        create_publisher
        create_subscriber
      usecase:
        BatchSubscriber
        ConcurrentDefaultSubscriber
        DefaultSubscriber
        LogicSubscriber
    testing:
      FakeProducer
      MockConfluentMessage
      TestKafkaBroker
      build_message
  constants:
    ContentTypes
  exceptions:
    AckMessage
    FastStreamException
    HandlerException
    IgnoredException
    NackMessage
    OperationForbiddenError
    RejectMessage
    SetupError
    SkipMessage
    StopApplication
    StopConsume
    SubscriberNotFound
    ValidationError
  kafka:
    KafkaBroker
    KafkaPublisher
    KafkaResponse
    KafkaRoute
    KafkaRouter
    TestApp
    TestKafkaBroker
    TopicPartition
    broker:
      KafkaBroker
      broker:
        KafkaBroker
      logging:
        KafkaLoggingBroker
```

----------------------------------------

TITLE: FastStream RabbitMQ Public API Components
DESCRIPTION: Provides a list of public API components for FastStream's RabbitMQ integration, covering brokers, exchanges, queues, publishers, and testing utilities.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
RabbitMQ Public API:
  Channel
  ExchangeType
  QueueType
  RabbitBroker
  RabbitExchange
  RabbitPublisher
  RabbitQueue
  RabbitResponse
  RabbitRoute
  RabbitRouter
  ReplyConfig
  TestApp
  TestRabbitBroker
```

----------------------------------------

TITLE: faststream.broker.publisher.proto.PublisherProto Class Reference
DESCRIPTION: Defines the `PublisherProto` class/protocol, which serves as an interface for message publishing within the FastStream framework. The specific methods and properties are not detailed in the provided text.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/publisher/proto/PublisherProto.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.broker.publisher.proto.PublisherProto:
  # Detailed methods and properties are not provided in the input text.
  # This entry indicates the presence of API documentation for this class.
```

----------------------------------------

TITLE: FastDepends Depends API Reference
DESCRIPTION: This directive points to the `Depends` class within the `fast_depends.use` module, indicating its documentation should be included. `Depends` is a core component for dependency injection in the FastDepends library, commonly used for managing dependencies in web frameworks and applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/Depends.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
fast_depends.use.Depends
```

----------------------------------------

TITLE: SubscriberProto
DESCRIPTION: API reference for the `SubscriberProto` protocol/interface, defining subscriber behavior in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_55

LANGUAGE: APIDOC
CODE:
```
SubscriberProto
```

----------------------------------------

TITLE: Importing Confluent Kafka Message Alias
DESCRIPTION: Demonstrates a convenient alias for `KafkaMessage` directly from `faststream.confluent`. This provides a shorter import path for the `KafkaMessage` type, simplifying its use in subscriber argument annotations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/existed.md#_snippet_4

LANGUAGE: Python
CODE:
```
from faststream.confluent import KafkaMessage
```

----------------------------------------

TITLE: FastStream Core and Modules API Components
DESCRIPTION: Documents the core API components of the FastStream library, including middleware, context management, dependency injection, and the main application class, along with components for ASGI integration and AsyncAPI generation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
FastStream Core and Modules API:
  Core:
    BaseMiddleware
    Context
    Depends
    ExceptionMiddleware
    FastStream
    Header
    Path
    Response
    TestApp
    apply_types
  app:
    FastStream
    catch_startup_validation_error
  asgi:
    AsgiFastStream
    AsgiResponse
    get
    make_asyncapi_asgi
    make_ping_asgi
    app:
      AsgiFastStream
      cast_uvicorn_params
    factories:
      make_asyncapi_asgi
      make_ping_asgi
    handlers:
      GetHandler
      HttpHandler
      get
    response:
      AsgiResponse
    websocket:
      WebSocketClose
  asyncapi:
    get_app_schema
```

----------------------------------------

TITLE: BaseMiddleware (middlewares)
DESCRIPTION: API reference for the `BaseMiddleware` class, serving as a base for custom middlewares in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_32

LANGUAGE: APIDOC
CODE:
```
BaseMiddleware
```

----------------------------------------

TITLE: FastStream Application Startup Console Output
DESCRIPTION: Example console output displayed when a FastStream application successfully starts. It shows informational messages about the app's initialization, listener status, and instructions for exiting the running service.
SOURCE: https://github.com/ag2ai/faststream/blob/main/README.md#_snippet_7

LANGUAGE: shell
CODE:
```
INFO     - FastStream app starting...
INFO     - input_data |            - `HandleMsg` waiting for messages
INFO     - FastStream app started successfully! To exit press CTRL+C
```

----------------------------------------

TITLE: FastStream Multiprocessing Run Output Example
DESCRIPTION: Example output demonstrating the log messages generated when a FastStream application is run with multiple worker processes, showing the startup of parent and child processes and message handling.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/cli/index.md#_snippet_4

LANGUAGE: shell
CODE:
```
INFO     - Started parent process [7591]
INFO     - Started child process [7593]
INFO     - Started child process [7594]
INFO     - test |            - `Handle` waiting for messages
INFO     - test |            - `Handle` waiting for messages
```

----------------------------------------

TITLE: FastStream Kafka Prometheus Middleware Class Reference
DESCRIPTION: Documents the `KafkaPrometheusMiddleware` class, which is part of the `faststream.kafka.prometheus.middleware` module. This middleware is designed to integrate Prometheus metrics collection with Kafka stream processing within the FastStream framework, enabling monitoring of Kafka consumer/producer activity.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/prometheus/middleware/KafkaPrometheusMiddleware.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.kafka.prometheus.middleware.KafkaPrometheusMiddleware
  Module: faststream.kafka.prometheus.middleware
  Purpose: A middleware component for FastStream applications to integrate Prometheus metrics with Kafka consumers and producers, facilitating the collection and exposure of operational metrics related to Kafka stream processing.
```

----------------------------------------

TITLE: FastStream Kafka Logging Broker Class Definition
DESCRIPTION: Defines the `KafkaLoggingBroker` class, which is a core component in FastStream for managing Kafka message processing with integrated logging. This class extends FastStream's broker functionalities to include specific logging behaviors for Kafka operations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/broker/logging/KafkaLoggingBroker.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.kafka.broker.logging.KafkaLoggingBroker:
  """
  A FastStream broker specifically designed for Kafka integration
  with enhanced logging capabilities.

  This class manages message processing and provides hooks for logging
  various events related to Kafka operations.
  """
```

----------------------------------------

TITLE: Start FastStream Test Environment Docker Containers
DESCRIPTION: Starts the Docker containers for message brokers and other dependencies, as defined in the Docker Compose configuration, to enable running FastStream's integration tests.
SOURCE: https://github.com/ag2ai/faststream/blob/main/CONTRIBUTING.md#_snippet_9

LANGUAGE: bash
CODE:
```
./scripts/start_test_env.sh
```

----------------------------------------

TITLE: FastStream Redis Operation Binding API Reference
DESCRIPTION: Documents the `OperationBinding` class from FastStream's AsyncAPI schema for Redis, which defines operation-level binding details.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/bindings/redis/OperationBinding.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asyncapi.schema.bindings.redis.OperationBinding
```

----------------------------------------

TITLE: FastStream Redis Subscriber Factory API Reference
DESCRIPTION: References the `create_subscriber` function within the `faststream.redis.subscriber.factory` module. This function is likely used for programmatically creating and configuring Redis message subscribers within the FastStream framework.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/subscriber/factory/create_subscriber.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
faststream.redis.subscriber.factory.create_subscriber
```

----------------------------------------

TITLE: FastStream FastAPI Route Parser API Reference
DESCRIPTION: References the `build_faststream_to_fastapi_parser` function, a key component in FastStream for integrating broker routes with FastAPI applications. This function likely handles the parsing and routing logic between the two frameworks.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/fastapi/route/build_faststream_to_fastapi_parser.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
faststream.broker.fastapi.route.build_faststream_to_fastapi_parser
```

----------------------------------------

TITLE: FastStream Kafka: `create_publisher` API Reference
DESCRIPTION: Documents the `create_publisher` function within the `faststream.kafka.subscriber.factory` module. This function is likely used to create a publisher instance for Kafka messages within the FastStream framework. It's part of the API for integrating FastStream with Kafka.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/subscriber/factory/create_publisher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.kafka.subscriber.factory.create_publisher
```

----------------------------------------

TITLE: FastStream CLI Publish Function API Reference
DESCRIPTION: This entry refers to the API documentation for the `publish` function located in the `faststream.cli.main` module of the FastStream library. It typically outlines its parameters, return values, and usage for command-line publishing operations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/cli/main/publish.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.cli.main.publish
```

----------------------------------------

TITLE: FastStream Confluent KafkaRoute API Reference
DESCRIPTION: Documents the `KafkaRoute` class within the `faststream.confluent` module, which is used for defining message routing in Kafka-based FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/KafkaRoute.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.KafkaRoute
```

----------------------------------------

TITLE: API Reference for RabbitPrometheusMiddleware Class
DESCRIPTION: Documents the `RabbitPrometheusMiddleware` class, which is part of the `faststream.rabbit.prometheus.middleware` module. This middleware is designed for integrating Prometheus metrics collection with RabbitMQ message processing in FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/prometheus/middleware/RabbitPrometheusMiddleware.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.rabbit.prometheus.middleware.RabbitPrometheusMiddleware
```

----------------------------------------

TITLE: FastStream AsyncAPI NATS Protocol Bindings
DESCRIPTION: Specific AsyncAPI binding schemas for the NATS protocol, including channel, operation, and server configurations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_13

LANGUAGE: APIDOC
CODE:
```
ChannelBinding
OperationBinding
ServerBinding
```

----------------------------------------

TITLE: FastStream Redis StreamVisitor API Documentation Directive
DESCRIPTION: A directive used by documentation generators (e.g., MkDocs with `mkdocstrings`) to automatically include the API documentation for the `StreamVisitor` class located in the `faststream.redis.testing` module. This line instructs the documentation tool to render the corresponding API reference.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/testing/StreamVisitor.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
::: faststream.redis.testing.StreamVisitor
```

----------------------------------------

TITLE: API Reference for faststream.redis.testing.ListVisitor
DESCRIPTION: This entry refers to the API documentation for the `ListVisitor` class, located within the `faststream.redis.testing` module. It is typically used in documentation generators to include detailed information about the class, such as its purpose, methods, and properties.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/testing/ListVisitor.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
API Reference:
  Class: faststream.redis.testing.ListVisitor
  Module: faststream.redis.testing
  Description: A visitor class designed for interacting with Redis list operations within the faststream testing framework.
```

----------------------------------------

TITLE: FastStream Redis AsyncAPIStreamSubscriber Class Reference
DESCRIPTION: Reference documentation for the `AsyncAPIStreamSubscriber` class, part of the `faststream.redis.subscriber.asyncapi` module. This class is designed for managing asynchronous API stream subscriptions within FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/subscriber/asyncapi/AsyncAPIStreamSubscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.redis.subscriber.asyncapi.AsyncAPIStreamSubscriber:
  """Represents an asynchronous API stream subscriber for Redis in FastStream.

  This class is typically used to define and manage subscriptions to Redis streams
  for asynchronous API communication within FastStream applications.
  """
```

----------------------------------------

TITLE: FastStream AsyncAPI Schema Info Class Reference
DESCRIPTION: Documents the `Info` class from `faststream.asyncapi.schema`, detailing its role in defining metadata for AsyncAPI documents. This class typically holds information like title, version, and description of an AsyncAPI service.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/Info.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asyncapi.schema.Info:
  # This class represents the 'Info Object' in the AsyncAPI specification.
  # It typically includes fields such as:
  #   title: str
  #   version: str
  #   description: Optional[str]
  #   termsOfService: Optional[str]
  #   contact: Optional[Contact]
  #   license: Optional[License]
  # Specific attributes are not detailed in the provided source text.
```

----------------------------------------

TITLE: FastStream Kafka LoggingListenerProxy API Reference
DESCRIPTION: Documents the `LoggingListenerProxy` class from the `faststream.kafka.listener` module, which is likely used for handling logging within Kafka message processing in FastStream applications. This entry points to the auto-generated documentation for this specific Python class.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/listener/LoggingListenerProxy.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.kafka.listener.LoggingListenerProxy
```

----------------------------------------

TITLE: FastStream Project API Structure
DESCRIPTION: This snippet outlines the hierarchical structure of the FastStream project's API, listing modules, classes, and functions with their respective paths. It serves as a quick reference for navigating the FastStream codebase and understanding its organization.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_59

LANGUAGE: APIDOC
CODE:
```
faststream/
  broker/
    utils/
      default_filter
      get_watcher_context
      process_msg
      resolve_custom_func
    wrapper/
      call/
        HandlerCallWrapper
      proto/
        WrapperProto
  cli/
    docs/
      app/
        gen
        serve
    main/
      main
      publish
      publish_message
      run
      version_callback
    supervisors/
      asgi_multiprocess/
        ASGIMultiprocess
        UvicornExtraConfig
      basereload/
        BaseReload
      multiprocess/
        Multiprocess
      utils/
        get_subprocess
        set_exit
        subprocess_started
      watchfiles/
        ExtendedFilter
        WatchReloader
    utils/
      imports/
        get_app_path
        import_from_string
        import_object
        try_import_app
      logs/
        LogFiles
        LogLevels
        get_log_level
        set_log_config
        set_log_level
      parser/
        is_bind_arg
        parse_cli_args
        remove_prefix
  confluent/
    KafkaBroker
    KafkaPublisher
    KafkaResponse
    KafkaRoute
    KafkaRouter
    TestApp
    TestKafkaBroker
    TopicPartition
    broker/
      KafkaBroker
      broker/
        KafkaBroker
      logging/
        KafkaLoggingBroker
      registrator/
        KafkaRegistrator
    client/
      AsyncConfluentConsumer
      AsyncConfluentProducer
```

----------------------------------------

TITLE: FastStream AsyncAPI Schema Generation API Reference
DESCRIPTION: References the `get_app_schema` function within the `faststream.asyncapi` module, which is used to generate an AsyncAPI schema for a FastStream application. This directive typically renders detailed API documentation for the specified function.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/get_app_schema.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asyncapi.get_app_schema
```

----------------------------------------

TITLE: API Reference for faststream.rabbit.router.RabbitPublisher
DESCRIPTION: Documents the `RabbitPublisher` class, which is part of the `faststream.rabbit.router` module. This directive typically expands to show the class's methods, parameters, and usage for publishing messages in a RabbitMQ context.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/router/RabbitPublisher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.rabbit.router.RabbitPublisher
```

----------------------------------------

TITLE: Reference FastStream Context API Documentation
DESCRIPTION: This snippet shows the directive used to include the API documentation for the `Context` class within the `faststream.broker.fastapi.context` module. This class is typically used to manage request and response context in FastStream applications integrated with FastAPI.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/fastapi/Context.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.broker.fastapi.context.Context
```

----------------------------------------

TITLE: FastStream AsyncAPI Schema Reference Class
DESCRIPTION: Documents the `Reference` class from `faststream.asyncapi.schema.utils`, which is instrumental for defining reusable components and external references within AsyncAPI specifications. This class helps in structuring complex AsyncAPI documents by allowing definitions to be referenced rather than duplicated.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/utils/Reference.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asyncapi.schema.utils.Reference
```

----------------------------------------

TITLE: FastStream Kafka AioKafkaFastProducer Class Reference
DESCRIPTION: Reference for the `AioKafkaFastProducer` class within the `faststream.kafka.publisher.producer` module, used for asynchronous Kafka message production. This directive indicates that the full API documentation for this class would be generated here.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/publisher/producer/AioKafkaFastProducer.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.kafka.publisher.producer.AioKafkaFastProducer
```

----------------------------------------

TITLE: Reference FastStream RabbitMQ ExchangeType API
DESCRIPTION: This snippet uses a `mkdocstrings` directive to embed the API documentation for the `ExchangeType` enumeration, located in the `faststream.rabbit.schemas.constants` module, directly into the generated documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/schemas/constants/ExchangeType.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
::: faststream.rabbit.schemas.constants.ExchangeType
```

----------------------------------------

TITLE: FastStream Confluent Client: `create_topics` Function Reference
DESCRIPTION: References the `create_topics` function within the `faststream.confluent.client` module. This function is typically used for programmatically creating topics in Apache Kafka or Confluent Platform environments.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/client/create_topics.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.client.create_topics
```

----------------------------------------

TITLE: FastStream Redis ChannelPublisher API Reference
DESCRIPTION: Reference to the `ChannelPublisher` class within the `faststream.redis.publisher.usecase` module, typically used for publishing messages to Redis channels. This directive indicates the class is documented elsewhere.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/publisher/usecase/ChannelPublisher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.redis.publisher.usecase.ChannelPublisher
```

----------------------------------------

TITLE: Exclude Built-in ASGI Route from AsyncAPI Documentation
DESCRIPTION: Demonstrates how to prevent a built-in ASGI route, like the healthcheck endpoint, from being included in the generated AsyncAPI documentation by setting `include_in_schema=False` in `make_ping_asgi`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asgi.md#_snippet_5

LANGUAGE: python
CODE:
```
app = AsgiFastStream(
    broker,
    asgi_routes=[
        ("/health", make_ping_asgi(broker, timeout=5.0, include_in_schema=False)),
    ]
)
```

----------------------------------------

TITLE: FastStream RedisPrometheusMiddleware Class Reference
DESCRIPTION: Reference for the `RedisPrometheusMiddleware` class, which is part of the `faststream.redis.prometheus` module. This class is typically used to integrate Prometheus metrics collection with Redis stream processing within FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/prometheus/RedisPrometheusMiddleware.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.redis.prometheus.RedisPrometheusMiddleware
```

----------------------------------------

TITLE: Exclude Custom ASGI Route from AsyncAPI Documentation
DESCRIPTION: Shows how to exclude a custom ASGI route defined with the `@get` decorator from the AsyncAPI documentation by passing `include_in_schema=False` to the decorator.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/asgi.md#_snippet_6

LANGUAGE: python
CODE:
```
@get(include_in_schema=False)
async def liveness_ping(scope):
    return AsgiResponse(b"", status_code=200)

app = AsgiFastStream(
    broker,
    asgi_routes=[("/health", liveness_ping)]
)
```

----------------------------------------

TITLE: FastStream RabbitBroker publish Method: Basic Arguments
DESCRIPTION: Documents the core arguments of the `RabbitBroker.publish` method, including `message`, `exchange`, `queue`, and `routing_key`, detailing their types and default behaviors for message routing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/publishing.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
publish method basic arguments:
  message: Any = "" - message to send
  exchange: str | RabbitExchange | None = None - the exchange where the message will be sent to. If not specified - default is used
  queue: str | RabbitQueue = "" - the queue where the message will be sent (since most queues use their name as the routing key, this is a human-readable version of routing_key)
  routing_key: str = "" - also a message routing key, if not specified, the queue argument will be used
```

----------------------------------------

TITLE: FastStream RabbitBroker publish Method: Message Parameters
DESCRIPTION: Details additional message-specific parameters that can be passed to the `RabbitBroker.publish` method, such as `headers`, `content_type`, `persist`, `priority`, and various IDs/timestamps, which influence how RabbitMQ handles the message.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/rabbit/publishing.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
publish method message parameters:
  headers: dict[str, Any] | None = None - message headers (used by consumers)
  content_type: str | None = None - the content_type of the message being sent (set automatically, used by consumers)
  content_encoding: str | None = None - encoding of the message (used by consumers)
  persist: bool = False - restore messages on RabbitMQ reboot
  priority: int | None = None - the priority of the message
  correlation_id: str | None = None - message id, which helps to match the original message with the reply to it (generated automatically)
  message_id: str | None = None - message ID (generated automatically)
  timestamp: int | float | timedelta | datetime | None = None - message sending time (set automatically)
  expiration: int | float | timedelta | datetime | None = None - message lifetime (in seconds)
  type: str | None = None - the type of message (used by consumers)
  user_id: str | None = None - ID of the RabbitMQ user who sent the message
  app_id: str | None = None - ID of the application that sent the message (used by consumers)
```

----------------------------------------

TITLE: FastStream TestApp Class API Reference
DESCRIPTION: API documentation for the `TestApp` class within the `faststream.testing.app` module, which is used for testing FastStream applications. This entry provides the direct reference to the class.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/TestApp.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.testing.app.TestApp
```

----------------------------------------

TITLE: FastStream AsyncAPI Kafka Protocol Bindings
DESCRIPTION: Specific AsyncAPI binding schemas for the Kafka protocol, covering channel, operation, and server-level configurations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_11

LANGUAGE: APIDOC
CODE:
```
ChannelBinding
OperationBinding
ServerBinding
```

----------------------------------------

TITLE: FastStream AsyncAPI Broker Server Generation API Reference Directive
DESCRIPTION: This directive is used in documentation systems like Sphinx or MkDocs to automatically generate and embed the API documentation for the `get_broker_server` function located in the `faststream.asyncapi.generate` module. It serves as a pointer to the detailed API specification.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/generate/get_broker_server.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
::: faststream.asyncapi.generate.get_broker_server
```

----------------------------------------

TITLE: API Reference for faststream.asyncapi.schema.utils.Parameter
DESCRIPTION: A directive indicating the inclusion of API documentation for the `Parameter` object from the `faststream.asyncapi.schema.utils` module. This typically expands to a detailed definition of the class/object, its methods, and properties.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/utils/Parameter.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.asyncapi.schema.utils.Parameter
```

----------------------------------------

TITLE: Import FastStream and RedisBroker
DESCRIPTION: Essential imports for building a FastStream application with Redis. This snippet includes `FastStream` for the application core and `RedisBroker` for Redis-specific functionalities.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/redis/streams/subscription.md#_snippet_1

LANGUAGE: Python
CODE:
```
from faststream import FastStream
from faststream.redis import RedisBroker
```

----------------------------------------

TITLE: FastStream NATS ConcurrentCoreSubscriber Class API Reference
DESCRIPTION: This snippet details the API reference for the `ConcurrentCoreSubscriber` class. It is a core component for managing concurrent subscriptions within the FastStream NATS module, providing foundational capabilities for message processing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/subscriber/usecase/ConcurrentCoreSubscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.nats.subscriber.usecase.ConcurrentCoreSubscriber
  Description: Represents a core subscriber for concurrent operations within FastStream's NATS integration.
```

----------------------------------------

TITLE: FastStream Core AsyncAPI Schema Definitions
DESCRIPTION: Comprehensive definitions for the fundamental components of an AsyncAPI document, including channels, messages, operations, servers, and supporting metadata like info, license, and tags.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_8

LANGUAGE: APIDOC
CODE:
```
Channel
ChannelBinding
Components
Contact
ContactDict
CorrelationId
ExternalDocs
ExternalDocsDict
Info
License
LicenseDict
Message
Operation
OperationBinding
Reference
Schema
SecuritySchemaComponent
Server
ServerBinding
Tag
TagDict
```

----------------------------------------

TITLE: ProducerProto
DESCRIPTION: API reference for the `ProducerProto` protocol/interface, defining producer behavior in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_43

LANGUAGE: APIDOC
CODE:
```
ProducerProto
```

----------------------------------------

TITLE: StreamRouter (fastapi/router)
DESCRIPTION: API reference for the `StreamRouter` class within FastStream's FastAPI router integration, handling routing for message streams.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_25

LANGUAGE: APIDOC
CODE:
```
StreamRouter
```

----------------------------------------

TITLE: Stop FastStream Test Environment Docker Containers
DESCRIPTION: Stops and removes the Docker containers that were started for the FastStream test environment, releasing system resources after testing is completed.
SOURCE: https://github.com/ag2ai/faststream/blob/main/CONTRIBUTING.md#_snippet_10

LANGUAGE: bash
CODE:
```
./scripts/stop_test_env.sh
```

----------------------------------------

TITLE: Execute FastStream CLI from Local Development Environment
DESCRIPTION: Runs the FastStream command-line interface using the local source code installed in the active virtual environment. This ensures that any local modifications to the CLI are used.
SOURCE: https://github.com/ag2ai/faststream/blob/main/CONTRIBUTING.md#_snippet_4

LANGUAGE: bash
CODE:
```
python -m faststream ...
```

----------------------------------------

TITLE: Run Pytest Tests for FastStream
DESCRIPTION: Commands to execute the project's test suite using Pytest, including options for running specific test scripts and generating coverage reports.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/contributing/CONTRIBUTING.md#_snippet_5

LANGUAGE: bash
CODE:
```
pytest tests
# or
./scripts/test.sh
# with coverage output
./scripts/test-cov.sh
```

----------------------------------------

TITLE: FastStream Redis Public API Components
DESCRIPTION: Outlines the public API components for FastStream's Redis integration, including various subscription types, brokers, publishers, and testing utilities.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Redis Public API:
  ListSub
  PubSub
  RedisBroker
  RedisPublisher
  RedisResponse
  RedisRoute
  RedisRouter
  StreamSub
  TestApp
  TestRedisBroker
```

----------------------------------------

TITLE: FastStream RabbitMQ Logging Broker API Reference
DESCRIPTION: Documents the `RabbitLoggingBroker` class within the `faststream.rabbit.broker.logging` module, providing details on its methods, properties, and usage for integrating logging with RabbitMQ message brokers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/broker/logging/RabbitLoggingBroker.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.rabbit.broker.logging.RabbitLoggingBroker
Description: A broker class designed for integrating logging functionalities with RabbitMQ message processing.

Usage:
  This directive typically expands into detailed documentation for the class, including its constructor, methods, and attributes, generated from its source code or docstrings.
```

----------------------------------------

TITLE: Importing RabbitMQ Message Alias
DESCRIPTION: Demonstrates a convenient alias for `RabbitMessage` directly from `faststream.rabbit`. This provides a shorter import path for the `RabbitMessage` type, simplifying its use in subscriber argument annotations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/context/existed.md#_snippet_6

LANGUAGE: Python
CODE:
```
from faststream.rabbit import RabbitMessage
```

----------------------------------------

TITLE: RabbitPrometheusMiddleware Class API Reference
DESCRIPTION: Detailed API documentation for the `RabbitPrometheusMiddleware` class, used to expose Prometheus metrics for FastStream applications interacting with RabbitMQ. This middleware typically tracks message processing, errors, and other relevant metrics.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/prometheus/RabbitPrometheusMiddleware.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.rabbit.prometheus.RabbitPrometheusMiddleware:
  """Middleware to integrate Prometheus metrics with RabbitMQ consumers/producers.

  This class typically provides methods to:
  - Increment counters for messages processed.
  - Track latencies for message handling.
  - Count errors during message processing.
  - Expose metrics via a Prometheus endpoint.
  """
  __init__(self, app: "FastStream", **kwargs):
    """Initializes the RabbitPrometheusMiddleware.

    Args:
      app: The FastStream application instance.
      **kwargs: Additional keyword arguments for middleware configuration.
    """
  # Other potential methods (e.g., on_startup, on_shutdown, process_message)
  # would be listed here with their parameters and return types.
```

----------------------------------------

TITLE: Run All FastStream Pytest Tests Including Slow and Broker-Dependent
DESCRIPTION: Executes all Pytest tests for FastStream, including those marked as 'slow' and tests dependent on specific message brokers, by explicitly using the 'all' pytest mark.
SOURCE: https://github.com/ag2ai/faststream/blob/main/CONTRIBUTING.md#_snippet_6

LANGUAGE: bash
CODE:
```
pytest -m 'all'
```

----------------------------------------

TITLE: FastStream KafkaBroker Class Reference
DESCRIPTION: References the `KafkaBroker` class within the `faststream.kafka.broker.broker` module, indicating its API documentation entry point.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/broker/broker/KafkaBroker.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.kafka.broker.broker.KafkaBroker
```

----------------------------------------

TITLE: FastStream CriticalLogMiddleware API Reference
DESCRIPTION: API documentation for the `CriticalLogMiddleware` class, located in the `faststream.broker.middlewares.logging` module. This middleware is likely used to handle and log critical events within a FastStream application's message broker.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/middlewares/logging/CriticalLogMiddleware.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.broker.middlewares.logging.CriticalLogMiddleware:
  """A middleware for logging critical events in FastStream brokers."""
  # Further methods and properties would be documented here if available.
```

----------------------------------------

TITLE: FastStream Kafka LogicPublisher Class API Reference
DESCRIPTION: Documents the `LogicPublisher` class within the `faststream.kafka.publisher.usecase` module, likely responsible for publishing messages to Kafka topics in a FastStream application. This entry serves as a reference to its API documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/publisher/usecase/LogicPublisher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.kafka.publisher.usecase.LogicPublisher
```

----------------------------------------

TITLE: FastStream Confluent AsyncAPISubscriber Class API
DESCRIPTION: API documentation for the `AsyncAPISubscriber` class, part of FastStream's Confluent integration for asynchronous API subscriptions. Details on methods and properties are not provided in the source text.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/subscriber/asyncapi/AsyncAPISubscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.subscriber.asyncapi.AsyncAPISubscriber:
  type: Class
  # No further details (methods, properties, parameters) provided in the source text.
```

----------------------------------------

TITLE: FastStream KafkaRouter Class Reference
DESCRIPTION: Documents the `KafkaRouter` class from the `faststream.confluent.fastapi` module, providing a reference point for its API. Full details on methods, properties, and parameters would typically follow this declaration.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/fastapi/KafkaRouter.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.confluent.fastapi.KafkaRouter
  (Further details like methods, properties, and parameters would be documented here if available in the source text.)
```

----------------------------------------

TITLE: KafkaTelemetrySettingsProvider Class Definition
DESCRIPTION: Documents the `KafkaTelemetrySettingsProvider` class, which is part of the `faststream.kafka.opentelemetry.provider` module. This class is intended to manage OpenTelemetry settings for Kafka consumers and producers within FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/opentelemetry/provider/KafkaTelemetrySettingsProvider.md#_snippet_0

LANGUAGE: Python
CODE:
```
class KafkaTelemetrySettingsProvider:
    """Provides telemetry settings for Kafka.
    
    This class is typically used internally by FastStream to configure
    OpenTelemetry tracing and metrics for Kafka interactions.
    """
    # Methods and properties would be documented here if available.
```

----------------------------------------

TITLE: FastStream Redis AsyncAPIChannelSubscriber Class Reference
DESCRIPTION: References the `AsyncAPIChannelSubscriber` class within the `faststream.redis.subscriber.asyncapi` module, indicating its documentation entry point. This class is central to handling asynchronous API channels in FastStream applications using Redis.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/subscriber/asyncapi/AsyncAPIChannelSubscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.redis.subscriber.asyncapi.AsyncAPIChannelSubscriber
```

----------------------------------------

TITLE: Run Taskiq Scheduler via CLI
DESCRIPTION: Command-line instruction to execute the Taskiq scheduler, pointing to the module where the scheduler instance is defined.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/scheduling.md#_snippet_3

LANGUAGE: Bash
CODE:
```
taskiq scheduler module:scheduler
```

----------------------------------------

TITLE: FastStream StreamMessage Class API Reference
DESCRIPTION: Documents the `StreamMessage` class from `faststream.broker.fastapi.route`, which is central to handling streaming messages in FastStream applications integrated with FastAPI.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/fastapi/route/StreamMessage.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.broker.fastapi.route.StreamMessage
  Purpose: Represents a message structure for streaming operations within FastStream applications, specifically in the context of FastAPI integration.
  Attributes:
    (No specific attributes or methods detailed in source input)
```

----------------------------------------

TITLE: NatsRouter Class API Definition
DESCRIPTION: Defines the `NatsRouter` class, used for integrating NATS messaging with FastAPI applications in FastStream.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/fastapi/NatsRouter.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
NatsRouter:
```

----------------------------------------

TITLE: Configuring Django Static Files Root
DESCRIPTION: Adds the `STATIC_ROOT` setting to Django's `settings.py` file, designating the `static/` directory as the location for collected static assets. This is a prerequisite for serving static files efficiently.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/django/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
STATIC_ROOT = "static/"
```

----------------------------------------

TITLE: API Reference: AsyncConfluentConsumer Class
DESCRIPTION: Documents the `AsyncConfluentConsumer` class from the `faststream.confluent.client` module. This class is designed for asynchronous consumption of messages from Confluent Kafka.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/client/AsyncConfluentConsumer.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.client.AsyncConfluentConsumer
```

----------------------------------------

TITLE: FastStream RabbitMQ Channel Schema Reference
DESCRIPTION: Documents the `Channel` schema within the `faststream.rabbit.schemas` module, defining properties and methods related to RabbitMQ channel configuration for FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/schemas/channel/Channel.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.rabbit.schemas.channel.Channel:
  type: Class
  description: "Represents the schema for a RabbitMQ channel configuration within FastStream.\nThis class defines the structure and validation rules for parameters\nrelated to establishing and managing a channel with a RabbitMQ broker."
  properties:
    prefetch_count:
      type: int
      description: The maximum number of messages that the server will deliver, unacknowledged, at a time.
      default: 0
    global_prefetch_count:
      type: bool
      description: Whether to apply the prefetch count across all consumers on the channel (True) or per consumer (False).
      default: False
    timeout:
      type: float | None
      description: The timeout in seconds for channel operations.
      default: None
    publisher_confirms:
      type: bool
      description: Enable publisher confirms on this channel.
      default: True
```

----------------------------------------

TITLE: faststream NATS ChannelBinding API Reference
DESCRIPTION: This entry points to the `ChannelBinding` class within the `faststream.asyncapi.schema.bindings.nats` module, which is used to define NATS-specific channel binding properties for AsyncAPI schemas.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/bindings/nats/ChannelBinding.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asyncapi.schema.bindings.nats.ChannelBinding
```

----------------------------------------

TITLE: API Reference for faststream.TestApp
DESCRIPTION: Documents the `faststream.TestApp` class, likely part of the FastStream library, providing details on its structure and available functionalities. This entry serves as a placeholder for more detailed API specifications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/TestApp.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.TestApp
```

----------------------------------------

TITLE: Reference FastStream Kafka Telemetry Attributes Provider Factory
DESCRIPTION: This directive is used in documentation systems (e.g., Sphinx/MkDocs with MyST) to automatically generate and include API documentation for the specified Python module or object. It points to the `telemetry_attributes_provider_factory` within the `faststream.kafka.opentelemetry.provider` path.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/opentelemetry/provider/telemetry_attributes_provider_factory.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
faststream.kafka.opentelemetry.provider.telemetry_attributes_provider_factory
```

----------------------------------------

TITLE: FastStream Kafka AsyncAPIBatchPublisher Class Reference
DESCRIPTION: This entry refers to the AsyncAPIBatchPublisher class within the faststream.kafka.publisher.asyncapi module. It serves as a pointer to the detailed documentation for this specific API component.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/publisher/asyncapi/AsyncAPIBatchPublisher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.kafka.publisher.asyncapi.AsyncAPIBatchPublisher
```

----------------------------------------

TITLE: FastStream AsyncAPI Tag Utility Class Reference
DESCRIPTION: Documents the `Tag` utility class found in `faststream.asyncapi.schema.utils`. This class is likely used for defining and managing tags within AsyncAPI schema definitions, providing structured metadata for API operations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/utils/Tag.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asyncapi.schema.utils.Tag
```

----------------------------------------

TITLE: API Reference for faststream.kafka.subscriber.factory.create_subscriber
DESCRIPTION: This entry references the `create_subscriber` function located within the `faststream.kafka.subscriber.factory` module. It is typically used in documentation generators like Sphinx or MkDocs to automatically include the function's signature and docstring.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/subscriber/factory/create_subscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.kafka.subscriber.factory.create_subscriber
```

----------------------------------------

TITLE: Start local Kafka Docker container for FastStream application
DESCRIPTION: This script starts a local Kafka Docker container, which is required for the FastStream application to communicate with Kafka topics. Ensure Docker is running before executing this command.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/template/index.md#_snippet_6

LANGUAGE: bash
CODE:
```
./scripts/start_kafka_broker_locally.sh
```

----------------------------------------

TITLE: FastStream IgnoredException Class Reference
DESCRIPTION: Reference for the `faststream.exceptions.IgnoredException` class. This class is typically used to mark exceptions that should be explicitly ignored or handled without causing a system failure within the FastStream framework.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/exceptions/IgnoredException.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.exceptions.IgnoredException
```

----------------------------------------

TITLE: FastStream NackMessage Exception API Reference
DESCRIPTION: API documentation for the `NackMessage` exception, part of the `faststream.exceptions` module. This exception is typically raised to signal that a message could not be acknowledged or processed successfully within a FastStream application.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/exceptions/NackMessage.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.exceptions.NackMessage
```

----------------------------------------

TITLE: FastStream Validation Error API Reference
DESCRIPTION: Documents the `ValidationError` class found within the `faststream.exceptions` module. This class is typically raised when data validation fails within a FastStream application, indicating an issue with input or processed data.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/exceptions/ValidationError.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.exceptions.ValidationError
```

----------------------------------------

TITLE: FastStream Utilities Context Types
DESCRIPTION: Describes context-related type utilities, including `Context` and `resolve_context_by_name`, within `faststream.utils.context.types`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_81

LANGUAGE: APIDOC
CODE:
```
faststream.utils.context.types:
  - Context
  - resolve_context_by_name
```

----------------------------------------

TITLE: FastStream Utilities Core Components
DESCRIPTION: Lists the primary utility classes and functions directly under the `faststream.utils` module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_75

LANGUAGE: APIDOC
CODE:
```
faststream.utils:
  - ContextRepo
  - Depends
  - Header
  - NoCast
  - Path
  - apply_types
```

----------------------------------------

TITLE: Build FastStream Docker Image Locally
DESCRIPTION: This script builds the FastStream Docker image locally, replicating the CI/CD build process. It requires a GitHub username and repository name to correctly tag the resulting image.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/template/index.md#_snippet_10

LANGUAGE: bash
CODE:
```
./scripts/build_docker.sh <username> <repo-name>
```

----------------------------------------

TITLE: FastStream BaseMiddleware API Reference
DESCRIPTION: This entry indicates a reference to the API documentation for the `faststream.BaseMiddleware` class. In a full documentation system, this would expand to detail its methods, properties, parameters, and usage within the FastStream framework, serving as a base for custom middleware implementations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/BaseMiddleware.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
faststream.BaseMiddleware
```

----------------------------------------

TITLE: FastStream NATS JStream Class Reference
DESCRIPTION: Reference documentation for the `JStream` class, part of `faststream.nats.schemas.js_stream`, which defines schemas for NATS JetStream streams. This class is crucial for configuring and managing streams within a NATS JetStream environment.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/schemas/js_stream/JStream.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.nats.schemas.js_stream.JStream
```

----------------------------------------

TITLE: FastStream StreamRouter Class Reference
DESCRIPTION: Detailed API documentation for the `StreamRouter` class, part of the `faststream.broker.fastapi.router` module in FastStream. This class is central to defining message routing within FastStream applications integrated with FastAPI.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/fastapi/router/StreamRouter.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.broker.fastapi.router.StreamRouter
```

----------------------------------------

TITLE: Default Django ASGI Application Setup
DESCRIPTION: Illustrates the standard `asgi.py` file for a Django project, which initializes the ASGI application using `get_asgi_application`. This configuration forms the base for serving Django with any ASGI server.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/integrations/django/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "app.settings")

application = get_asgi_application()
```

----------------------------------------

TITLE: API Reference for faststream.confluent.config.OffsetStoreMethod
DESCRIPTION: Documents the faststream.confluent.config.OffsetStoreMethod class, which likely represents an enumeration or class defining various strategies for storing offsets within the Confluent Kafka integration of FastStream.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/config/OffsetStoreMethod.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.confluent.config.OffsetStoreMethod
  Description: Defines methods for storing offsets in Confluent Kafka.
  Type: Class/Enumeration
```

----------------------------------------

TITLE: FastStream WatchReloader Class API Reference
DESCRIPTION: References the `WatchReloader` class within the `faststream.cli.supervisors.watchfiles` module. This class is typically used for automatic application reloading in development environments when file changes are detected.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/cli/supervisors/watchfiles/WatchReloader.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.cli.supervisors.watchfiles.WatchReloader
```

----------------------------------------

TITLE: SubscriberRoute
DESCRIPTION: API reference for the `SubscriberRoute` class, defining a route for subscribers in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_50

LANGUAGE: APIDOC
CODE:
```
SubscriberRoute
```

----------------------------------------

TITLE: FastStream RedisBatchStreamMessage Class Definition
DESCRIPTION: Documents the `RedisBatchStreamMessage` class, a core component for handling batched stream messages in FastStream's Redis integration. The provided text only references the class name, without detailing its methods or properties.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/message/RedisBatchStreamMessage.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.redis.message.RedisBatchStreamMessage:
    # No further details provided in the source text.
```

----------------------------------------

TITLE: FastStream Confluent AsyncAPI Default Subscriber Class Reference
DESCRIPTION: Documents the `AsyncAPIDefaultSubscriber` class, which is likely responsible for handling default asynchronous API subscriptions within the FastStream Confluent integration. This entry provides the class path for reference.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/subscriber/asyncapi/AsyncAPIDefaultSubscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.confluent.subscriber.asyncapi.AsyncAPIDefaultSubscriber:
  # Details such as methods, parameters, and properties are not provided in this snippet.
```

----------------------------------------

TITLE: Run Docker Container with Environment File
DESCRIPTION: After successfully pulling the image, use this command to start the Docker container. The `--rm` flag ensures the container is removed upon stopping, `--name faststream-app` assigns a name, and `--env-file` specifies a path to an environment file for secure configuration and secrets.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/template/index.md#_snippet_21

LANGUAGE: bash
CODE:
```
docker run --rm --name faststream-app --env-file /path/to/env-file ghcr.io/<username>/<repo-name>:latest
```

----------------------------------------

TITLE: RabbitMetricsSettingsProvider Class Reference
DESCRIPTION: This snippet points to the `RabbitMetricsSettingsProvider` class, which is a key component for integrating Prometheus metrics with RabbitMQ in FastStream applications. It is expected to define settings for metrics collection.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/prometheus/provider/RabbitMetricsSettingsProvider.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.rabbit.prometheus.provider.RabbitMetricsSettingsProvider
```

----------------------------------------

TITLE: FastStream RabbitMQ BaseRMQInformation Class Reference
DESCRIPTION: References the `BaseRMQInformation` class, likely a base schema for RabbitMQ message information within the FastStream library. This class would typically define common attributes for RabbitMQ queues, exchanges, or other protocol-level details, serving as a foundational element for message handling.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/schemas/proto/BaseRMQInformation.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.rabbit.schemas.proto.BaseRMQInformation:
```

----------------------------------------

TITLE: BasePublisherProto
DESCRIPTION: API reference for the `BasePublisherProto` protocol/interface, serving as a base for publisher definitions in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_42

LANGUAGE: APIDOC
CODE:
```
BasePublisherProto
```

----------------------------------------

TITLE: API Reference: faststream.rabbit.schemas.queue.StreamQueueArgs
DESCRIPTION: Reference to the `StreamQueueArgs` class, likely detailing arguments for configuring RabbitMQ stream queues within the FastStream framework. This entry points to the location of the API documentation for this specific class.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/schemas/queue/StreamQueueArgs.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.rabbit.schemas.queue.StreamQueueArgs
```

----------------------------------------

TITLE: Install OpenTelemetry OTLP gRPC Exporter
DESCRIPTION: This command installs the `opentelemetry-exporter-otlp` Python package, which is required to export OpenTelemetry spans via gRPC. This exporter is used to send traces to the OpenTelemetry Collector.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/observability/opentelemetry/sentry.md#_snippet_0

LANGUAGE: shell
CODE:
```
pip install opentelemetry-exporter-otlp
```

----------------------------------------

TITLE: Install Msgpack Dependencies
DESCRIPTION: Instructions to install the `msgpack` library, which is required for encoding and decoding messages using the Msgpack binary format.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/serialization/examples.md#_snippet_5

LANGUAGE: console
CODE:
```
pip install msgpack
```

----------------------------------------

TITLE: Hotfix for NatsResponse in FastStream RPC
DESCRIPTION: This Python snippet illustrates a hotfix addressing the correct processing of `NatsResponse` when a FastStream handler returns it in an RPC (Remote Procedure Call) scenario. It ensures the publisher correctly handles the response.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_7

LANGUAGE: python
CODE:
```
@broker.subscriber(...)
async def handler():
    return NatsResponse(...)

await broker.publish(..., rpc=True)
```

----------------------------------------

TITLE: FastStream Broker Schema: NameRequired
DESCRIPTION: Documents the `NameRequired` schema within the `faststream.broker.schemas` module. This directive typically pulls in the detailed definition, properties, and usage of this schema, which likely specifies naming conventions or requirements for FastStream components.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/schemas/NameRequired.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.broker.schemas.NameRequired
```

----------------------------------------

TITLE: API Reference for faststream.confluent.security.parse_security
DESCRIPTION: This entry references the `parse_security` function from the `faststream.confluent.security` module. It is typically used in documentation systems like Sphinx or MkDocs to automatically generate API documentation for the specified Python object.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/security/parse_security.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.security.parse_security
```

----------------------------------------

TITLE: Install FastStream Release Candidate
DESCRIPTION: Instructions to manually install the FastStream 0.5.0rc0 release candidate version using pip. This allows users to test the new features before the stable release.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_37

LANGUAGE: console
CODE:
```
pip install faststream==0.5.0rc0
```

----------------------------------------

TITLE: FastStream Utilities Context Module Components
DESCRIPTION: Outlines components related to context management within `faststream.utils.context`, including `Context`, `ContextRepo`, `Header`, and `Path`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_78

LANGUAGE: APIDOC
CODE:
```
faststream.utils.context:
  - Context
  - ContextRepo
  - Header
  - Path
```

----------------------------------------

TITLE: FastStream Utilities General Functions
DESCRIPTION: Outlines general utility functions within `faststream.utils.functions`, including asynchronous operations, context faking, and timeout scopes.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_83

LANGUAGE: APIDOC
CODE:
```
faststream.utils.functions:
  - call_or_await
  - drop_response_type
  - fake_context
  - return_input
  - sync_fake_context
  - timeout_scope
  - to_async
```

----------------------------------------

TITLE: API Reference for faststream.cli.main.run
DESCRIPTION: Documents the `run` function within the `faststream.cli.main` module, which is typically the main entry point for FastStream CLI applications. It processes command-line arguments to execute FastStream commands.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/cli/main/run.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Function: faststream.cli.main.run
  Description: The main entry point for FastStream CLI applications.
  Parameters:
    *args: Arbitrary positional arguments, typically parsed from the command line.
    **kwargs: Arbitrary keyword arguments.
  Returns:
    None: This function typically executes commands and does not return a value, or returns None upon completion.
```

----------------------------------------

TITLE: FastStream ASGI AsgiResponse Class API Reference
DESCRIPTION: This entry references the API documentation for the `AsgiResponse` class, a core component for handling ASGI responses in FastStream applications. It outlines the class's interface and usage.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asgi/AsgiResponse.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.asgi.AsgiResponse
```

----------------------------------------

TITLE: FastStream AsyncAPI Message Model Schema Function Reference
DESCRIPTION: Reference to the `get_model_schema` function within the `faststream.asyncapi.message` module. This function is typically used to retrieve the schema definition for a message model.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/message/get_model_schema.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Function: faststream.asyncapi.message.get_model_schema
Signature: get_model_schema()
```

----------------------------------------

TITLE: faststream.utils.context.builders.Context Class Reference
DESCRIPTION: API documentation for the `Context` class, a utility within the `faststream.utils.context.builders` module. This class is likely used for constructing or managing execution contexts within the FastStream framework.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/utils/context/builders/Context.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.utils.context.builders.Context
  Description: (Details not provided in source text)
  Methods:
    (None explicitly documented in source text)
  Properties:
    (None explicitly documented in source text)
```

----------------------------------------

TITLE: API Reference for faststream.testing.TestApp
DESCRIPTION: Provides a reference for the `TestApp` class within the `faststream.testing` module. This class is typically used for testing FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/testing/TestApp.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.testing.TestApp
```

----------------------------------------

TITLE: Initialize Git repository and push FastStream project to GitHub
DESCRIPTION: These commands initialize a new Git repository, add all project files, commit them, set the main branch, link to a remote GitHub repository, and push the code. Replace `<username>` and `<repo-name>` with your GitHub details.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/template/index.md#_snippet_4

LANGUAGE: bash
CODE:
```
git init
git add .
git commit -m "first commit"
git branch -M main
git remote add origin git@github.com:<username>/<repo-name>.git
git push -u origin main
```

----------------------------------------

TITLE: FastStream AsyncAPI Operation Class Reference
DESCRIPTION: Documents the `Operation` class within the `faststream.asyncapi.schema.operations` module, which is a key component of the FastStream library's AsyncAPI schema implementation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/operations/Operation.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asyncapi.schema.operations.Operation
```

----------------------------------------

TITLE: FastStream Redis PubSub Class Reference
DESCRIPTION: This entry refers to the `faststream.redis.schemas.pub_sub.PubSub` class or module, which is part of the FastStream framework's Redis integration and likely defines the structure for publish/subscribe messages. The provided source indicates a direct reference to this API element.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/schemas/pub_sub/PubSub.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.redis.schemas.pub_sub.PubSub
```

----------------------------------------

TITLE: FastStream Response Class Reference
DESCRIPTION: Documents the `Response` class from the `faststream` library, which is used to define the structure of API responses. This entry serves as a direct reference to the class.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/Response.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.Response
```

----------------------------------------

TITLE: FastStream AioPikaFastProducer Class Reference
DESCRIPTION: Reference documentation for the `AioPikaFastProducer` class, which is part of the FastStream library for asynchronous message processing with RabbitMQ using AioPika. This class is responsible for producing and sending messages to RabbitMQ.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/publisher/producer/AioPikaFastProducer.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.rabbit.publisher.producer.AioPikaFastProducer:
  # This class provides methods for publishing messages to RabbitMQ.
  # Detailed methods, parameters, and return types would be listed here.
```

----------------------------------------

TITLE: ignore_handler
DESCRIPTION: API reference for the `ignore_handler` function, likely used to suppress or ignore specific handlers in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_37

LANGUAGE: APIDOC
CODE:
```
ignore_handler
```

----------------------------------------

TITLE: FastStream AsyncAPI ChannelBinding Class Definition
DESCRIPTION: Reference for the `ChannelBinding` class, which defines channel-level binding objects according to the AsyncAPI specification. This class is part of the `faststream.asyncapi.schema.bindings` module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/bindings/ChannelBinding.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.asyncapi.schema.bindings.ChannelBinding
  Purpose: Represents a binding object for an AsyncAPI channel.
  Properties: (Details not provided in source)
  Methods: (Details not provided in source)
```

----------------------------------------

TITLE: FastStream RedisMessage Class API Reference
DESCRIPTION: A reference to the `RedisMessage` class within the `faststream.redis.message` module. This entry indicates that documentation for this class is available or being generated, typically followed by its detailed API specification.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/message/RedisMessage.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.redis.message.RedisMessage
```

----------------------------------------

TITLE: encode_message
DESCRIPTION: API reference for the `encode_message` function, used to encode messages within FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_30

LANGUAGE: APIDOC
CODE:
```
encode_message
```

----------------------------------------

TITLE: FastStream Kafka AsyncAPIDefaultPublisher Reference
DESCRIPTION: This entry refers to the `AsyncAPIDefaultPublisher` class from the `faststream.kafka.publisher.asyncapi` module. It is typically used for publishing messages to Kafka topics, adhering to AsyncAPI specifications for structured message definitions.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/publisher/asyncapi/AsyncAPIDefaultPublisher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.kafka.publisher.asyncapi.AsyncAPIDefaultPublisher
```

----------------------------------------

TITLE: FastStream SubscriberProto Class Definition
DESCRIPTION: Defines the `SubscriberProto` class, which serves as a foundational protocol or interface for subscribers within the FastStream broker system. This entry provides the class signature; specific methods and properties would be detailed here if provided in the source text.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/subscriber/proto/SubscriberProto.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.broker.subscriber.proto.SubscriberProto:
  # No specific methods or properties documented in the provided text.
```

----------------------------------------

TITLE: API Reference: faststream.rabbit.schemas.queue.QuorumQueueArgs
DESCRIPTION: Provides a reference to the `QuorumQueueArgs` schema, likely used for configuring quorum queues in FastStream's RabbitMQ integration.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/schemas/queue/QuorumQueueArgs.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.rabbit.schemas.queue.QuorumQueueArgs
```

----------------------------------------

TITLE: Faststream RabbitMQ QueueType Schema Reference
DESCRIPTION: References the `QueueType` schema definition within the `faststream.rabbit.schemas` module. This schema is typically used for configuring various RabbitMQ queue types in Faststream applications, defining their properties and behaviors.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/schemas/QueueType.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.rabbit.schemas.QueueType
```

----------------------------------------

TITLE: FastStream Kafka Telemetry Settings Provider API Reference
DESCRIPTION: Reference documentation for the `BatchKafkaTelemetrySettingsProvider` class within the `faststream.kafka.opentelemetry.provider` module, detailing its full path.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/opentelemetry/provider/BatchKafkaTelemetrySettingsProvider.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.kafka.opentelemetry.provider.BatchKafkaTelemetrySettingsProvider
```

----------------------------------------

TITLE: FastStream RedisLoggingBroker Class Definition
DESCRIPTION: Defines the `RedisLoggingBroker` class, which is part of the `faststream.redis.broker.logging` module. This class is intended for handling logging functionalities related to Redis message brokers within the FastStream framework, serving as a core component for integrating logging with FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/broker/logging/RedisLoggingBroker.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.redis.broker.logging.RedisLoggingBroker:
```

----------------------------------------

TITLE: FastStream API Reference: catch_startup_validation_error
DESCRIPTION: API reference for the `catch_startup_validation_error` function within the `faststream.app` module. This directive indicates where the detailed API documentation for this function would be located or generated.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/app/catch_startup_validation_error.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.app.catch_startup_validation_error
```

----------------------------------------

TITLE: faststream.log.formatter.ColourizedFormatter API Reference
DESCRIPTION: API documentation for the `ColourizedFormatter` class within the `faststream.log.formatter` module. This entry indicates the presence of detailed documentation for this specific class.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/log/formatter/ColourizedFormatter.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.log.formatter.ColourizedFormatter
```

----------------------------------------

TITLE: FastStream CLI Logging Utility API Reference
DESCRIPTION: References the `get_log_level` function within the `faststream.cli.utils.logs` module, typically used for retrieving log level configurations in FastStream applications. This directive is commonly used in documentation generators to automatically include API documentation for the specified object.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/cli/utils/logs/get_log_level.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.cli.utils.logs.get_log_level
```

----------------------------------------

TITLE: FastStream Confluent GroupProtocol API Documentation Directive
DESCRIPTION: A documentation directive used to automatically include the API documentation for the `faststream.confluent.config.GroupProtocol` class. This typically triggers the generation of detailed class, method, and property documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/config/GroupProtocol.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
::: faststream.confluent.config.GroupProtocol
```

----------------------------------------

TITLE: KafkaPrometheusMiddleware API Reference
DESCRIPTION: Documents the `KafkaPrometheusMiddleware` class from the `faststream.confluent.prometheus.middleware` module, which is likely used for integrating Prometheus metrics with Kafka in FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/prometheus/middleware/KafkaPrometheusMiddleware.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.confluent.prometheus.middleware.KafkaPrometheusMiddleware
```

----------------------------------------

TITLE: FastStream Confluent TopicPartition Schema Reference
DESCRIPTION: Provides a reference to the `TopicPartition` schema, typically used for defining Kafka topic and partition details in FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/schemas/TopicPartition.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.schemas.TopicPartition
```

----------------------------------------

TITLE: FastStream Prometheus ConsumeAttrs Type Reference
DESCRIPTION: References the `ConsumeAttrs` type within the `faststream.prometheus.types` module. This type is likely used for defining attributes related to message consumption for Prometheus metrics in FastStream applications. The directive typically expands into detailed API documentation for the specified type.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/prometheus/types/ConsumeAttrs.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.prometheus.types.ConsumeAttrs
```

----------------------------------------

TITLE: API Reference for faststream.exceptions.StopApplication
DESCRIPTION: Documents the `StopApplication` exception within the `faststream.exceptions` module, which is used for signaling application termination or control flow within FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/exceptions/StopApplication.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.exceptions.StopApplication
```

----------------------------------------

TITLE: FastStream Confluent Telemetry Settings Provider API Reference
DESCRIPTION: Reference to the `ConfluentTelemetrySettingsProvider` class, indicating its role in providing telemetry settings for Confluent within the FastStream framework.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/opentelemetry/provider/ConfluentTelemetrySettingsProvider.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.confluent.opentelemetry.provider.ConfluentTelemetrySettingsProvider
```

----------------------------------------

TITLE: gen_cor_id
DESCRIPTION: API reference for the `gen_cor_id` function, used to generate correlation IDs for messages in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_31

LANGUAGE: APIDOC
CODE:
```
gen_cor_id
```

----------------------------------------

TITLE: FastStream KafkaResponse Class API Reference
DESCRIPTION: Provides the API definition for the `KafkaResponse` class, which is likely used for handling responses in FastStream applications integrated with Kafka. This snippet outlines the class structure.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/response/KafkaResponse.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.kafka.response.KafkaResponse:
  # This class represents a response object for Kafka operations.
  # Further details (methods, properties, constructor) would be listed here if available in the source documentation.
```

----------------------------------------

TITLE: FastStream Redis StreamSub API Reference
DESCRIPTION: Reference to the `faststream.redis.StreamSub` class or module for API documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/StreamSub.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.redis.StreamSub
```

----------------------------------------

TITLE: FastStream NATS ObjWatch API Reference
DESCRIPTION: Provides a reference to the `ObjWatch` class within the `faststream.nats` module, which is typically used for observing or watching objects in NATS streams.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/ObjWatch.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.nats.ObjWatch
```

----------------------------------------

TITLE: Reference Docker Compose for FastStream Test Environment
DESCRIPTION: This entry refers to the `docker-compose.yaml` file that defines the necessary Docker containers for message brokers and other services required to run FastStream's integration tests.
SOURCE: https://github.com/ag2ai/faststream/blob/main/CONTRIBUTING.md#_snippet_8

LANGUAGE: yaml
CODE:
```
{! includes/docker-compose.yaml !}
```

----------------------------------------

TITLE: FastStream BrokerRouter API Reference
DESCRIPTION: This entry references the `BrokerRouter` class from the `faststream.broker.router` module. In FastStream, the BrokerRouter is a core component used for defining and managing message routing logic within a message broker application.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/router/BrokerRouter.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.broker.router.BrokerRouter
```

----------------------------------------

TITLE: KafkaRouter Class Definition
DESCRIPTION: Defines the `KafkaRouter` class, a core component for integrating FastStream with FastAPI applications for Confluent Kafka messaging.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/fastapi/fastapi/KafkaRouter.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.confluent.fastapi.fastapi.KafkaRouter
```

----------------------------------------

TITLE: Install FastStream OpenTelemetry Dependencies
DESCRIPTION: Provides the command to install the necessary dependencies for integrating OpenTelemetry with FastStream, enabling advanced observability features like tracing and metrics.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_21

LANGUAGE: bash
CODE:
```
pip install 'faststream[otel]'
```

----------------------------------------

TITLE: SetupAble
DESCRIPTION: API reference for the `SetupAble` protocol/interface, indicating an element can be set up in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_40

LANGUAGE: APIDOC
CODE:
```
SetupAble
```

----------------------------------------

TITLE: faststream.nats.schemas.ObjWatch API Reference
DESCRIPTION: Reference documentation for the `ObjWatch` schema object from the `faststream.nats` module. This entry indicates the specific API element being documented.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/schemas/ObjWatch.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.nats.schemas.ObjWatch
```

----------------------------------------

TITLE: Example Non-JSON Message for Default Handler
DESCRIPTION: An example message payload in raw bytes, which would be delivered to the `default_handler` function (the one without a specific filter) in the FastStream application.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/filtering.md#_snippet_2

LANGUAGE: Python
CODE:
```
# Non-JSON message example
b"Hello, FastStream!"
```

----------------------------------------

TITLE: FastStream AsyncAPI HTML Generation Function Reference
DESCRIPTION: Documents the `get_asyncapi_html` function from the `faststream.asyncapi` module. This function is likely used to programmatically generate HTML representations of AsyncAPI specifications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/get_asyncapi_html.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asyncapi.get_asyncapi_html
```

----------------------------------------

TITLE: Accessing Deployed AsyncAPI Documentation URL
DESCRIPTION: Provides the generic URL structure to access AsyncAPI documentation hosted on GitHub Pages after a successful deployment. Users need to replace placeholders with their GitHub username and repository name to view the documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/template/index.md#_snippet_19

LANGUAGE: txt
CODE:
```
https://<username>.github.io/<repo-name>/
```

----------------------------------------

TITLE: FastStream ExceptionMiddleware API Reference
DESCRIPTION: Provides API documentation for the `ExceptionMiddleware` class within the `faststream` library. This class is typically used for handling exceptions in message processing pipelines.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/ExceptionMiddleware.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.ExceptionMiddleware:
  # Further details (methods, parameters) would be listed here if available in source documentation.
```

----------------------------------------

TITLE: FastStream NATS Watchable Class Reference
DESCRIPTION: References the `Watchable` class within the `faststream.nats.subscriber.subscription` module. This class is likely used for observing or reacting to NATS message streams.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/subscriber/subscription/Watchable.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.nats.subscriber.subscription.Watchable
```

----------------------------------------

TITLE: ExceptionMiddleware (middlewares/exception)
DESCRIPTION: API reference for the `ExceptionMiddleware` class within the exception middleware components of FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_36

LANGUAGE: APIDOC
CODE:
```
ExceptionMiddleware
```

----------------------------------------

TITLE: RabbitTelemetryMiddleware Class API Reference
DESCRIPTION: Provides the API definition for the `RabbitTelemetryMiddleware` class, which integrates OpenTelemetry tracing into FastStream applications using RabbitMQ. This middleware enables automatic tracing of messages published and consumed via RabbitMQ, enhancing observability.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/opentelemetry/middleware/RabbitTelemetryMiddleware.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.rabbit.opentelemetry.middleware.RabbitTelemetryMiddleware
  Purpose: Middleware for integrating OpenTelemetry tracing with FastStream applications using RabbitMQ.
  Details: This class is designed to automatically instrument RabbitMQ message operations (publish, consume) to generate OpenTelemetry spans, aiding in distributed tracing and observability.
```

----------------------------------------

TITLE: Git Add and Commit Changes for FastStream Contribution
DESCRIPTION: These Git commands stage all modified and new files for commit and then create a new commit with a descriptive message. This is the essential first step in preparing your changes for contribution to the FastStream project.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/template/index.md#_snippet_17

LANGUAGE: bash
CODE:
```
git add .
git commit -m "Your commit message"
```

----------------------------------------

TITLE: FastStreamException Class Reference
DESCRIPTION: Reference to the base exception class for FastStream, `FastStreamException`, located within the `faststream.exceptions` module. This class serves as the root for all custom exceptions raised by the FastStream library.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/exceptions/FastStreamException.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.exceptions.FastStreamException
```

----------------------------------------

TITLE: FastStream OneTryWatcher Class Reference
DESCRIPTION: Reference for the `OneTryWatcher` class, located in the `faststream.broker.acknowledgement_watcher` module. This class is typically used for handling message acknowledgements within a FastStream broker, potentially implementing a single-try mechanism.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/acknowledgement_watcher/OneTryWatcher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.broker.acknowledgement_watcher.OneTryWatcher:
  # No specific methods or properties are detailed in the provided source text.
  # This class is expected to manage message acknowledgement logic.
```

----------------------------------------

TITLE: FastStream Redis Test Broker API Reference
DESCRIPTION: Reference to the `TestRedisBroker` class in the `faststream.redis` module, typically used for testing Redis-based message brokers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/TestRedisBroker.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.redis.TestRedisBroker
```

----------------------------------------

TITLE: FastStream Confluent ConcurrentDefaultSubscriber Class Definition
DESCRIPTION: Defines the `ConcurrentDefaultSubscriber` class, which is part of the `faststream.confluent.subscriber.usecase` module. This class is typically used for managing concurrent message subscriptions within FastStream applications that integrate with Confluent.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/subscriber/usecase/ConcurrentDefaultSubscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.confluent.subscriber.usecase.ConcurrentDefaultSubscriber
  Module: faststream.confluent.subscriber.usecase
  Name: ConcurrentDefaultSubscriber
  Purpose: Manages concurrent message subscriptions for Confluent in FastStream applications.
```

----------------------------------------

TITLE: SourceType
DESCRIPTION: API reference for the `SourceType` enum/class, defining message source types in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_27

LANGUAGE: APIDOC
CODE:
```
SourceType
```

----------------------------------------

TITLE: FastStream BaseWatcher Class API Reference
DESCRIPTION: Documents the `BaseWatcher` class, located in `faststream.broker.acknowledgement_watcher`. This class serves as a base for implementing acknowledgement watching mechanisms within the FastStream broker, defining essential methods for managing message acknowledgements.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/acknowledgement_watcher/BaseWatcher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.broker.acknowledgement_watcher.BaseWatcher:
  description: Base class for implementing acknowledgement watching logic.
  methods:
    start():
      description: Starts the watcher.
      returns: None
    stop():
      description: Stops the watcher.
      returns: None
    add_message(message: Any):
      description: Adds a message to be watched.
      parameters:
        message: The message object to add.
      returns: None
    ack_message(message: Any):
      description: Acknowledges a watched message.
      parameters:
        message: The message object to acknowledge.
      returns: None
    nack_message(message: Any):
      description: Negative acknowledges a watched message.
      parameters:
        message: The message object to negative acknowledge.
      returns: None
```

----------------------------------------

TITLE: FastStream KafkaPublisher Class Reference
DESCRIPTION: Reference to the `KafkaPublisher` class, an integral part of the `faststream.kafka.router` module, designed for publishing messages to Kafka topics.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/router/KafkaPublisher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.kafka.router.KafkaPublisher
```

----------------------------------------

TITLE: API Reference for faststream.cli.supervisors.basereload.BaseReload
DESCRIPTION: This snippet provides a direct reference to the API documentation for the `BaseReload` class, which is part of the `faststream.cli.supervisors` module. It is typically used in FastStream CLI applications for managing application reloading.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/cli/supervisors/basereload/BaseReload.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class Reference: faststream.cli.supervisors.basereload.BaseReload
  Purpose: Points to the detailed API documentation for the BaseReload class.
  Module: faststream.cli.supervisors.basereload
```

----------------------------------------

TITLE: API Reference for fast_depends.utils.run_async
DESCRIPTION: This snippet provides the API reference for the `run_async` utility function. While specific parameters and return types are not detailed in the provided input, this entry serves as a placeholder for its documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/utils/functions/call_or_await.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
fast_depends.utils.run_async
```

----------------------------------------

TITLE: Example JSON Message for Filtered Handler
DESCRIPTION: An example message payload formatted as JSON, which would be delivered to the `handle` function (the one with the JSON content-type filter) in the FastStream application.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/subscription/filtering.md#_snippet_1

LANGUAGE: Python
CODE:
```
# JSON message example
{
    "name": "John Doe",
    "value": 123
}
```

----------------------------------------

TITLE: FastStream Redis ChannelVisitor API Reference
DESCRIPTION: Documents the `ChannelVisitor` class within the `faststream.redis.testing` module, providing details on its structure and usage for testing Redis interactions.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/testing/ChannelVisitor.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.redis.testing.ChannelVisitor
```

----------------------------------------

TITLE: FastStream LoggingBroker API Reference
DESCRIPTION: This snippet provides a direct reference to the `LoggingBroker` class within the `faststream.broker.core.logging` module. It serves as an entry point for understanding the logging capabilities of the FastStream broker.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/core/logging/LoggingBroker.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.broker.core.logging.LoggingBroker
```

----------------------------------------

TITLE: MultiLock
DESCRIPTION: API reference for the `MultiLock` utility, likely a synchronization primitive within FastStream's broker utilities.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_58

LANGUAGE: APIDOC
CODE:
```
MultiLock
```

----------------------------------------

TITLE: FastStream Utilities Classes Module
DESCRIPTION: Describes utility classes, such as `Singleton`, found within the `faststream.utils.classes` module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_77

LANGUAGE: APIDOC
CODE:
```
faststream.utils.classes:
  - Singleton
```

----------------------------------------

TITLE: Reference faststream.Context API Element
DESCRIPTION: This entry indicates a reference to the `faststream.Context` class or module within the FastStream API documentation. It serves as a placeholder for detailed API documentation that would typically be generated from the source code.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/Context.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
faststream.Context
```

----------------------------------------

TITLE: FastStream Kafka FakeProducer Class API Reference
DESCRIPTION: Detailed API documentation for the `faststream.kafka.testing.FakeProducer` class, used for simulating Kafka producer behavior in testing environments within the FastStream framework. This entry outlines its structure and common methods.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/testing/FakeProducer.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.kafka.testing.FakeProducer
  A mock Kafka producer for testing purposes within FastStream applications.

  __init__(self, *args, **kwargs)
    Initializes the FakeProducer instance.
    Parameters:
      *args: Positional arguments passed to the underlying mock object.
      **kwargs: Keyword arguments passed to the underlying mock object.

  publish(self, message: Any, *args, **kwargs) -> None
    Simulates publishing a message to a Kafka topic.
    Parameters:
      message: The message content to be 'published'.
      *args: Additional positional arguments for the mock publish call.
      **kwargs: Additional keyword arguments for the mock publish call.

  start(self) -> None
    Simulates starting the producer.

  stop(self) -> None
    Simulates stopping the producer.
```

----------------------------------------

TITLE: FakePublisher
DESCRIPTION: API reference for the `FakePublisher` class, a mock publisher for testing or development in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_41

LANGUAGE: APIDOC
CODE:
```
FakePublisher
```

----------------------------------------

TITLE: FastStream Redis StreamPublisher Class Reference
DESCRIPTION: Provides API documentation for the `StreamPublisher` class located in `faststream.redis.publisher.usecase`, detailing its structure and usage within the FastStream framework for Redis stream publishing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/publisher/usecase/StreamPublisher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.redis.publisher.usecase.StreamPublisher
```

----------------------------------------

TITLE: Install Taskiq-FastStream Library
DESCRIPTION: Command to install the `taskiq-faststream` library, which provides integration for asynchronous task scheduling with FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/scheduling.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install taskiq-faststream
```

----------------------------------------

TITLE: FastStream RabbitMQ ChannelManager API Reference
DESCRIPTION: Documents the `ChannelManager` class within `faststream.rabbit.helpers`, providing an entry point for its API details. This syntax is typically used in documentation generators like MkDocs with `mkdocstrings` to embed API documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/helpers/channel_manager/ChannelManager.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.rabbit.helpers.channel_manager.ChannelManager
```

----------------------------------------

TITLE: NATS.js Retention Policy API Documentation Reference
DESCRIPTION: This directive points to the `RetentionPolicy` class within the NATS.js API documentation. It indicates that detailed information about this specific API component is available at the referenced location.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/RetentionPolicy.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
nats.js.api.RetentionPolicy
```

----------------------------------------

TITLE: FastDepends Dependency Injection API Reference Directive
DESCRIPTION: A documentation directive used to embed or link to the API documentation for the `Depends` class from the `fast_depends.use` module. This class is commonly used in Python for dependency injection patterns.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/utils/Depends.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
::: fast_depends.use.Depends
```

----------------------------------------

TITLE: Configure Page Title and Outdated Version Warning in Jinja2 Template
DESCRIPTION: This Jinja2 template snippet extends a base HTML template and dynamically sets the page title based on site configuration or page metadata. It also includes a block to display a warning for outdated versions of the documentation, providing a link to the latest version. Requires a base.html template and access to config, page objects, and base_url variable within the Jinja2 environment.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/overrides/main.html#_snippet_0

LANGUAGE: Jinja2
CODE:
```
{% extends "base.html" %}
{% block extrahead %}
  {% set title = config.site_name %}
  {% if page and page.meta and page.meta.title %}
    {% set title = title ~ " - " ~ page.meta.title %}
  {% elif page and page.title and not page.is_homepage %}
    {% set title = title ~ " - " ~ page.title | striptags %}
  {% endif %}
{% endblock %}
{% block outdated %}
  You're not viewing the latest version. [**Click here to go to latest.**]({{ '../' ~ base_url }})
{% endblock %}
```

----------------------------------------

TITLE: FastStream Context Class API Definition
DESCRIPTION: Defines the `Context` class from the `faststream.utils.context` module, a core utility for managing application-wide context in FastStream applications. This entry serves as a reference to its API signature.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/utils/context/Context.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.utils.context.Context:
  # Further details like methods and properties would appear here if provided by the source documentation.
```

----------------------------------------

TITLE: FastStream Redis ListSub Schema API Reference
DESCRIPTION: Documents the `ListSub` schema from `faststream.redis.schemas`, providing details on its structure and usage within the FastStream library. This entry points to the auto-generated documentation for the specified Python object.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/schemas/list_sub/ListSub.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.redis.schemas.list_sub.ListSub
```

----------------------------------------

TITLE: FastStream AsyncAPI Operation Class Reference
DESCRIPTION: Refers to the `Operation` class within the `faststream.asyncapi.schema` module, which defines the structure for operations in AsyncAPI specifications. This entry serves as a placeholder for detailed API documentation of this class.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/Operation.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asyncapi.schema.Operation
```

----------------------------------------

TITLE: FastStream KafkaRoute Class Reference
DESCRIPTION: References the `KafkaRoute` class from the `faststream.kafka.router` module. This directive is commonly used in documentation systems like Sphinx or MkDocs to automatically generate API documentation for the specified Python object.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/router/KafkaRoute.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.kafka.router.KafkaRoute
```

----------------------------------------

TITLE: FastStream RedisRouter API Reference
DESCRIPTION: References the `RedisRouter` class from the `faststream.redis.fastapi.fastapi` module. This directive indicates where the detailed API documentation for this class would be found, typically used for integrating Redis messaging with FastAPI applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/fastapi/fastapi/RedisRouter.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class Reference: faststream.redis.fastapi.fastapi.RedisRouter
```

----------------------------------------

TITLE: FastStream AsyncAPI OperationBinding Directive
DESCRIPTION: A Sphinx-style directive used in documentation to automatically include the API documentation for the `OperationBinding` class from the `faststream.asyncapi.schema` module. This class is crucial for defining how operations are bound in AsyncAPI specifications within FastStream.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/OperationBinding.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.asyncapi.schema.OperationBinding
```

----------------------------------------

TITLE: PublisherUsecase
DESCRIPTION: API reference for the `PublisherUsecase` class, representing a use case for publishing messages in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_45

LANGUAGE: APIDOC
CODE:
```
PublisherUsecase
```

----------------------------------------

TITLE: API Reference for AioPikaParser Class
DESCRIPTION: Documents the `AioPikaParser` class, which is part of the `faststream.rabbit.parser` module in the FastStream library. This class is likely responsible for parsing messages within the FastStream RabbitMQ integration.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/parser/AioPikaParser.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class Reference: faststream.rabbit.parser.AioPikaParser
```

----------------------------------------

TITLE: FastStream Confluent KafkaRegistrator API Reference
DESCRIPTION: Detailed API documentation for the `KafkaRegistrator` class, a key component in `faststream.confluent.broker.registrator`. This section outlines its definition and serves as a reference for its usage within FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/broker/registrator/KafkaRegistrator.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.broker.registrator.KafkaRegistrator
  Class: KafkaRegistrator
  Module: faststream.confluent.broker.registrator
  Description: A class responsible for registering Kafka-related components within the FastStream framework.
```

----------------------------------------

TITLE: FastStream LicenseDict API Schema Reference
DESCRIPTION: Reference documentation for the `LicenseDict` schema, which is part of the `faststream.asyncapi.schema.info` module. This schema is typically used within AsyncAPI specifications to define license information.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/info/LicenseDict.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asyncapi.schema.info.LicenseDict
```

----------------------------------------

TITLE: FastStream AsyncAPI ServerVariable Class Reference
DESCRIPTION: References the `ServerVariable` class, part of the `faststream.asyncapi.schema.servers` module. This class is typically used for defining variables associated with servers in AsyncAPI specifications, allowing for dynamic configuration of server details.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/servers/ServerVariable.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class Reference:
  faststream.asyncapi.schema.servers.ServerVariable
```

----------------------------------------

TITLE: FastStream BrokerUsecase API Reference
DESCRIPTION: References the `BrokerUsecase` class within the `faststream.broker.core.usecase` module, typically used for generating detailed API documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/core/usecase/BrokerUsecase.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.broker.core.usecase.BrokerUsecase
```

----------------------------------------

TITLE: API Reference: faststream.rabbit.testing.apply_pattern
DESCRIPTION: Detailed API documentation for the `apply_pattern` function, which is part of FastStream's RabbitMQ testing module. This function is typically used to apply specific testing patterns or configurations to a FastStream application and its RabbitMQ broker.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/testing/apply_pattern.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.rabbit.testing.apply_pattern(app: Any, broker: Any, *args, **kwargs)
  app: The FastStream application instance to which the pattern will be applied.
  broker: The RabbitMQ broker instance associated with the application.
  *args: Optional positional arguments that might be required by the specific pattern being applied.
  **kwargs: Optional keyword arguments that might be required by the specific pattern being applied.
  Returns: None
  Description: Applies a predefined testing pattern or configuration to a FastStream application and its RabbitMQ broker for integration testing purposes. The exact behavior depends on the pattern implemented.
```

----------------------------------------

TITLE: FastStream AsyncAPI Common Binding Schemas
DESCRIPTION: Defines general binding schemas that can be applied to channels, operations, and servers, serving as a base for protocol-specific extensions.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_9

LANGUAGE: APIDOC
CODE:
```
ChannelBinding
OperationBinding
ServerBinding
```

----------------------------------------

TITLE: NatsBroker Class API Reference
DESCRIPTION: API documentation for the `NatsBroker` class, which serves as the core component for interacting with NATS messaging within the FastStream library. This class manages connections, message publishing, and subscription handling for NATS.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/broker/broker/NatsBroker.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.nats.broker.broker.NatsBroker:
  # This class provides an interface for NATS messaging.
  # Further methods and properties would be documented here.
```

----------------------------------------

TITLE: FastStream RabbitMQ Broker Class Reference
DESCRIPTION: References the `RabbitBroker` class from the `faststream.rabbit.broker.broker` module, indicating its availability for detailed API documentation. This directive is typically used in Sphinx-based documentation to embed the class's API specification.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/broker/broker/RabbitBroker.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.rabbit.broker.broker.RabbitBroker
```

----------------------------------------

TITLE: Automatic TestBroker `connect_only` Argument
DESCRIPTION: The `TestBroker` now automatically determines the `connect_only` argument based on Abstract Syntax Tree (AST) analysis. This simplifies testing configurations by inferring connection requirements, reducing manual setup.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_58

LANGUAGE: APIDOC
CODE:
```
TestBroker(connect_only: bool)
  description: Argument is automatically determined based on AST
```

----------------------------------------

TITLE: FastStream TestApp Class Reference
DESCRIPTION: Provides a reference for the `TestApp` class within the `faststream.testing.app` module, typically used for testing FastStream applications. This directive indicates the start of the auto-generated documentation for this class.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/TestApp.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.testing.app.TestApp
```

----------------------------------------

TITLE: FastStream RabbitMQ Test Broker Class Reference
DESCRIPTION: Reference for the `TestRabbitBroker` class, a core component for simulating a RabbitMQ broker within FastStream test environments. This class facilitates the testing of message-driven applications by providing a controlled, in-memory representation of RabbitMQ interactions.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/testing/TestRabbitBroker.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.rabbit.testing.TestRabbitBroker
Description: A testing utility to simulate a RabbitMQ broker for FastStream applications, enabling isolated and efficient testing of message flows.
```

----------------------------------------

TITLE: ExceptionMiddleware (middlewares)
DESCRIPTION: API reference for the `ExceptionMiddleware` class, handling exceptions within FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_33

LANGUAGE: APIDOC
CODE:
```
ExceptionMiddleware
```

----------------------------------------

TITLE: API Reference for faststream.redis.schemas.StreamSub
DESCRIPTION: This entry points to the auto-generated API documentation for the `StreamSub` schema within the `faststream.redis` module, providing details on its structure and usage. It uses a Sphinx/MkDocs directive to include the API documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/schemas/StreamSub.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.redis.schemas.StreamSub
```

----------------------------------------

TITLE: API Reference for FastStream KafkaRegistrator
DESCRIPTION: This entry points to the API documentation for the `KafkaRegistrator` class within the `faststream.kafka.broker.registrator` module. It is typically used in documentation generators like MkDocs with `mkdocstrings` to automatically include the class's methods, properties, and usage details.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/broker/registrator/KafkaRegistrator.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.kafka.broker.registrator.KafkaRegistrator
```

----------------------------------------

TITLE: FastStream Utilities Data Module Functions
DESCRIPTION: Lists data manipulation functions, such as `filter_by_dict`, available in `faststream.utils.data`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_82

LANGUAGE: APIDOC
CODE:
```
faststream.utils.data:
  - filter_by_dict
```

----------------------------------------

TITLE: Docker Compose Configuration for Test Environment
DESCRIPTION: YAML configuration for starting necessary broker dependencies (RabbitMQ, Kafka, NATS, Redis, Confluent) as Docker containers to support integration testing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/contributing/CONTRIBUTING.md#_snippet_8

LANGUAGE: yaml
CODE:
```
{! includes/docker-compose.yaml !}
```

----------------------------------------

TITLE: FastStream ASGI Ping Factory API Reference
DESCRIPTION: Documents the API path for the `make_ping_asgi` factory function, which is part of the `faststream.asgi.factories` module. This reference points to the function responsible for creating a ping ASGI application.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asgi/factories/make_ping_asgi.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asgi.factories.make_ping_asgi
```

----------------------------------------

TITLE: FastStream Confluent create_publisher API Reference
DESCRIPTION: This entry references the `create_publisher` function, which is part of the `faststream.confluent.subscriber.factory` module. It is typically used to create a publisher instance for interacting with Confluent Kafka within the FastStream framework.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/subscriber/factory/create_publisher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.confluent.subscriber.factory.create_publisher
```

----------------------------------------

TITLE: API Reference: faststream.asgi.make_ping_asgi
DESCRIPTION: Documents the `make_ping_asgi` function from the `faststream.asgi` module, which is used to create a simple ASGI application for health checks or ping responses.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asgi/make_ping_asgi.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asgi.make_ping_asgi:
  make_ping_asgi()
    description: Creates a lightweight ASGI application that responds to health check or ping requests.
    returns: An ASGI application callable.
```

----------------------------------------

TITLE: FastStream Path API Reference
DESCRIPTION: Documents the `Path` object within the `faststream` library, typically used for defining path parameters in FastStream applications. This directive indicates an auto-generated API documentation entry, similar to how Sphinx or MkDocs auto-document Python objects.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/Path.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.Path
  Description: Represents a path parameter in a FastStream application.
  Usage: Used within FastStream route definitions to extract values from the URL path.
  Type: Class/Object
```

----------------------------------------

TITLE: FastStream Utilities Path Module Functions
DESCRIPTION: Lists path-related utility functions, such as `compile_path`, available in `faststream.utils.path`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_86

LANGUAGE: APIDOC
CODE:
```
faststream.utils.path:
  - compile_path
```

----------------------------------------

TITLE: FastStream Utilities Context Builders
DESCRIPTION: Lists context builder components within `faststream.utils.context.builders`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_79

LANGUAGE: APIDOC
CODE:
```
faststream.utils.context.builders:
  - Context
  - Header
  - Path
```

----------------------------------------

TITLE: FastStream Utilities AST Module Functions
DESCRIPTION: Details functions within the `faststream.utils.ast` module for abstract syntax tree manipulation, including node finding and context checks.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_76

LANGUAGE: APIDOC
CODE:
```
faststream.utils.ast:
  - find_ast_node
  - find_withitems
  - get_withitem_calls
  - is_contains_context_name
```

----------------------------------------

TITLE: FastStream Exception Middleware: ignore_handler
DESCRIPTION: Documents the `ignore_handler` function or class within the `faststream.broker.middlewares.exception` module, typically used for handling exceptions in message brokers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/middlewares/exception/ignore_handler.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.broker.middlewares.exception.ignore_handler
```

----------------------------------------

TITLE: RabbitTelemetrySettingsProvider Class API Reference
DESCRIPTION: Reference for the `RabbitTelemetrySettingsProvider` class, which is responsible for providing telemetry settings for RabbitMQ consumers and producers in FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/opentelemetry/provider/RabbitTelemetrySettingsProvider.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.rabbit.opentelemetry.provider.RabbitTelemetrySettingsProvider
```

----------------------------------------

TITLE: FastStream Prometheus MetricsSettingsProvider API Reference
DESCRIPTION: Reference to the `MetricsSettingsProvider` class, used for configuring Prometheus metrics within FastStream applications. This directive indicates that the full documentation for this class is generated at this location.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/prometheus/provider/MetricsSettingsProvider.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.prometheus.provider.MetricsSettingsProvider
```

----------------------------------------

TITLE: API Reference: faststream.security.SASLPlaintext
DESCRIPTION: Provides API documentation for the `SASLPlaintext` class within the `faststream.security` module, typically used for SASL PLAIN authentication.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/security/SASLPlaintext.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.security.SASLPlaintext
```

----------------------------------------

TITLE: PublisherMiddleware
DESCRIPTION: API reference for the `PublisherMiddleware` type, defining middleware for publishers in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_57

LANGUAGE: APIDOC
CODE:
```
PublisherMiddleware
```

----------------------------------------

TITLE: FastStream Redis FakeProducer Class API
DESCRIPTION: Documents the `FakeProducer` class, a component within `faststream.redis.testing` designed for simulating Redis message production during testing. This class likely provides methods to enqueue messages without actual Redis connectivity.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/testing/FakeProducer.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.redis.testing.FakeProducer
  Description: A class used for simulating Redis message production in testing scenarios within the FastStream framework.
  Usage: Typically imported from `faststream.redis.testing` for unit or integration tests.
```

----------------------------------------

TITLE: FastStream Kafka AsyncAPIBatchSubscriber Class Reference
DESCRIPTION: Defines the `AsyncAPIBatchSubscriber` class, which is part of the FastStream library for managing asynchronous API batch subscriptions specifically for Kafka. This class is crucial for processing messages in batches from Kafka topics, enabling efficient and scalable message consumption.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/subscriber/asyncapi/AsyncAPIBatchSubscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.kafka.subscriber.asyncapi.AsyncAPIBatchSubscriber
  Description: A subscriber class designed to process messages from Kafka topics in batches, leveraging asynchronous API capabilities within the FastStream framework.
```

----------------------------------------

TITLE: FastStream Kafka BatchSubscriber Class API Reference
DESCRIPTION: References the API documentation for the `BatchSubscriber` class, located in `faststream.kafka.subscriber.usecase`. This Sphinx directive indicates that the detailed API documentation for this class should be included at this point.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/subscriber/usecase/BatchSubscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.kafka.subscriber.usecase.BatchSubscriber
```

----------------------------------------

TITLE: FastStream Redis BatchStreamSubscriber API Reference
DESCRIPTION: References the `BatchStreamSubscriber` class from `faststream.redis.subscriber.usecase` for automatic API documentation generation, detailing its methods and properties.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/subscriber/usecase/BatchStreamSubscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.redis.subscriber.usecase.BatchStreamSubscriber
```

----------------------------------------

TITLE: FastStream RejectMessage Exception API Reference
DESCRIPTION: References the `RejectMessage` exception within the `faststream.exceptions` module, indicating an API element used for handling message rejection in FastStream applications. This syntax is common in Sphinx autodoc directives.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/exceptions/RejectMessage.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
::: faststream.exceptions.RejectMessage
```

----------------------------------------

TITLE: API Reference: faststream.asyncapi.message.parse_handler_params
DESCRIPTION: This entry refers to the `parse_handler_params` function, part of the `faststream.asyncapi.message` module in the FastStream library. It is typically used for parsing parameters related to message handlers in AsyncAPI contexts.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/message/parse_handler_params.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Module/Function Reference:
  faststream.asyncapi.message.parse_handler_params
```

----------------------------------------

TITLE: FastStream AsyncAPI Site Serve Application Function Reference
DESCRIPTION: References the `serve_app` function from the `faststream.asyncapi.site` module, indicating its availability for use in serving AsyncAPI applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/site/serve_app.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asyncapi.site.serve_app
```

----------------------------------------

TITLE: FastStream Utilities NUID Module
DESCRIPTION: Details the `NUID` component within `faststream.utils.nuid`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_85

LANGUAGE: APIDOC
CODE:
```
faststream.utils.nuid:
  - NUID
```

----------------------------------------

TITLE: FastStream RabbitMQ PublishKwargs Class Reference
DESCRIPTION: Documentation for the `PublishKwargs` class, used to define keyword arguments for publishing messages via FastStream's RabbitMQ integration.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/publisher/usecase/PublishKwargs.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.rabbit.publisher.usecase.PublishKwargs
  Description: Represents keyword arguments for publishing messages in FastStream RabbitMQ.
```

----------------------------------------

TITLE: faststream.rabbit.RabbitPublisher Class Reference
DESCRIPTION: The `RabbitPublisher` class facilitates sending messages to RabbitMQ exchanges. It manages the connection, channel, and message serialization, providing a high-level interface for publishing. It requires an active RabbitMQ broker connection and is designed for integration with FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/RabbitPublisher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.rabbit.RabbitPublisher:
  """A publisher for sending messages to RabbitMQ exchanges."""

  __init__(broker: faststream.rabbit.RabbitBroker, 
           exchange: str = "", 
           routing_key: str = "", 
           **kwargs)
    broker: The RabbitMQ broker instance to use for connection.
    exchange: The name of the RabbitMQ exchange to publish to. Defaults to the default exchange.
    routing_key: The routing key for the message. Defaults to an empty string.
    kwargs: Additional keyword arguments passed to the underlying aio_pika.Channel.publish method.

  publish(message: Any, 
          exchange: str = "", 
          routing_key: str = "", 
          **kwargs) -> None
    """Publishes a message to a RabbitMQ exchange."""
    message: The message payload to send. Can be any serializable type.
    exchange: Overrides the default exchange for this specific publish call.
    routing_key: Overrides the default routing key for this specific publish call.
    kwargs: Additional keyword arguments for the underlying aio_pika.Channel.publish method.
    Returns: None

  start() -> None
    """Starts the publisher, ensuring the connection and channel are ready."""
    Returns: None

  stop() -> None
    """Stops the publisher, closing the channel and releasing resources."""
    Returns: None
```

----------------------------------------

TITLE: Stop Docker Containers for Test Environment
DESCRIPTION: Script to stop the Docker containers that were started for the test environment, cleaning up resources after testing is complete.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/contributing/CONTRIBUTING.md#_snippet_10

LANGUAGE: bash
CODE:
```
./scripts/stop_test_env.sh
```

----------------------------------------

TITLE: Upgrade pip in Python Virtual Environment
DESCRIPTION: Updates the pip package installer within the active virtual environment to its latest version, which is recommended for efficient dependency management.
SOURCE: https://github.com/ag2ai/faststream/blob/main/CONTRIBUTING.md#_snippet_2

LANGUAGE: bash
CODE:
```
python -m pip install --upgrade pip
```

----------------------------------------

TITLE: MkDocs Navigation and Search Boost Configuration
DESCRIPTION: This YAML snippet defines the navigation order and titles for several documentation pages within a MkDocs project. It also configures the search functionality to boost results by a factor of 0.5, indicating a lower priority for search relevance from this specific configuration.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/utils/context/types/Context.md#_snippet_0

LANGUAGE: YAML
CODE:
```
# 0.5 - API
# 2 - Release
# 3 - Contributing
# 5 - Template Page
# 10 - Default
search:
  boost: 0.5
```

----------------------------------------

TITLE: FastStream Project Search and Navigation Configuration
DESCRIPTION: Defines the search boosting and navigation structure for the FastStream project documentation, assigning boost values to different sections like API, Release, and Contributing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/utils/functions/fake_context.md#_snippet_0

LANGUAGE: YAML
CODE:
```
# 0.5 - API
# 2 - Release
# 3 - Contributing
# 5 - Template Page
# 10 - Default
search:
  boost: 0.5
```

----------------------------------------

TITLE: MkDocs Navigation and Search Configuration
DESCRIPTION: This snippet defines the navigation structure and search boosting settings for a documentation site, likely using MkDocs. It maps section titles to their corresponding page weights for search relevance, improving search results for key sections like 'API'.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/cli/supervisors/asgi_multiprocess/UvicornExtraConfig.md#_snippet_0

LANGUAGE: YAML
CODE:
```
# 0.5 - API
# 2 - Release
# 3 - Contributing
# 5 - Template Page
# 10 - Default
search:
  boost: 0.5
```

----------------------------------------

TITLE: API Reference for faststream.broker.utils.default_filter
DESCRIPTION: Documents the `default_filter` utility from the `faststream.broker.utils` module, which is likely used for message filtering within FastStream applications. This entry points to the auto-generated documentation for this specific object.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/utils/default_filter.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.broker.utils.default_filter
```

----------------------------------------

TITLE: FastStream Kafka ConsumerProtocol Reference
DESCRIPTION: References the `ConsumerProtocol` within the `faststream.kafka.message` module, indicating a point of API documentation for this specific protocol, typically used for defining message consumption behavior.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/message/ConsumerProtocol.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.kafka.message.ConsumerProtocol
```

----------------------------------------

TITLE: RabbitRouter Class API Reference
DESCRIPTION: Documentation for the `faststream.rabbit.fastapi.router.RabbitRouter` class, which facilitates routing and handling of RabbitMQ messages within a FastAPI application context using the FastStream framework.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/fastapi/router/RabbitRouter.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.rabbit.fastapi.router.RabbitRouter:
  Type: Class
  Description: A router class designed for integrating RabbitMQ messaging with FastAPI applications, leveraging the FastStream framework.
```

----------------------------------------

TITLE: FastStream RabbitMQ create_subscriber Function Reference
DESCRIPTION: This entry refers to the `create_subscriber` function, which is part of the `faststream.rabbit.subscriber.factory` module. It is typically used to define and configure a message subscriber for RabbitMQ within a FastStream application.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/subscriber/factory/create_subscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.rabbit.subscriber.factory.create_subscriber
```

----------------------------------------

TITLE: API Reference for faststream.asgi.response.AsgiResponse
DESCRIPTION: Documents the `faststream.asgi.response.AsgiResponse` class/module, which is typically used in ASGI (Asynchronous Server Gateway Interface) applications for handling HTTP responses. This directive is commonly used by documentation generators (e.g., Sphinx, MkDocs with mkdocstrings) to embed the full API documentation for the specified object.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asgi/response/AsgiResponse.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asgi.response.AsgiResponse
```

----------------------------------------

TITLE: Reference to FastStream ASGI Uvicorn Parameters Casting Function
DESCRIPTION: This entry points to the `cast_uvicorn_params` function within the `faststream.asgi.app` module, indicating its documentation should be included or referenced here. It is part of the FastStream library, likely used for configuring Uvicorn parameters for ASGI applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asgi/app/cast_uvicorn_params.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.asgi.app.cast_uvicorn_params
```

----------------------------------------

TITLE: FastStream `fake_context` Utility Function API Reference
DESCRIPTION: References the API documentation for the `fake_context` utility function within the `faststream.utils.functions` module, indicating its availability for documentation generation or direct API lookup.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/utils/functions/fake_context.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
::: faststream.utils.functions.fake_context
```

----------------------------------------

TITLE: API Reference: faststream.utils.context.types.resolve_context_by_name
DESCRIPTION: This entry references the `resolve_context_by_name` function from the `faststream.utils.context.types` module. It serves as a directive for documentation generation tools (like MkDocs with mkdocstrings) to include the detailed API specification for this function.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/utils/context/types/resolve_context_by_name.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.utils.context.types.resolve_context_by_name
```

----------------------------------------

TITLE: API Reference: faststream.nats.subscriber.factory.create_subscriber
DESCRIPTION: Documents the `create_subscriber` function, a factory method within the `faststream.nats.subscriber.factory` module. This entry serves as a direct reference to the function's location for API documentation generation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/subscriber/factory/create_subscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.nats.subscriber.factory.create_subscriber
```

----------------------------------------

TITLE: FastStream Kafka Prometheus Middleware API Reference
DESCRIPTION: Provides the API documentation for the `KafkaPrometheusMiddleware` class, which integrates Prometheus metrics with FastStream Kafka applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/prometheus/KafkaPrometheusMiddleware.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.kafka.prometheus.KafkaPrometheusMiddleware:
  # No methods or properties detailed in the provided text.
```

----------------------------------------

TITLE: FastStream Log API Components
DESCRIPTION: Details API elements for FastStream's logging utilities, including formatters and extended filters.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_62

LANGUAGE: APIDOC
CODE:
```
formatter:
  - ColourizedFormatter
  - expand_log_field
logging:
  - ExtendedFilter
  - get_broker_logger
  - set_logger_fmt
```

----------------------------------------

TITLE: FastStream Kafka API Components
DESCRIPTION: Lists classes and functions for FastStream's Kafka integration, including subscribers, publishers, and testing utilities.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_61

LANGUAGE: APIDOC
CODE:
```
subscriber:
  asyncapi:
    - AsyncAPIBatchSubscriber
    - AsyncAPIConcurrentBetweenPartitionsSubscriber
    - AsyncAPIConcurrentDefaultSubscriber
    - AsyncAPIDefaultSubscriber
    - AsyncAPISubscriber
  factory:
    - create_publisher
    - create_subscriber
  usecase:
    - BatchSubscriber
    - ConcurrentBetweenPartitionsSubscriber
    - ConcurrentDefaultSubscriber
    - DefaultSubscriber
    - LogicSubscriber
testing:
  - FakeProducer
  - TestKafkaBroker
  - build_message
```

----------------------------------------

TITLE: FastStream Redis Broker Logging API
DESCRIPTION: API documentation for logging components within the FastStream Redis broker, specifically RedisLoggingBroker.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_66

LANGUAGE: APIDOC
CODE:
```
RedisLoggingBroker (api/faststream/redis/broker/logging/RedisLoggingBroker.md)
```

----------------------------------------

TITLE: Install FastStream with Redis Support
DESCRIPTION: This command installs FastStream version 0.3.0rc0 along with the necessary dependencies for Redis integration. This enables the new Redis support feature introduced in this release candidate.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_54

LANGUAGE: bash
CODE:
```
pip install faststream==0.3.0rc0 && pip install "faststream[redis]"
```

----------------------------------------

TITLE: FastStream RedisBroker Class API Reference
DESCRIPTION: This entry documents the `RedisBroker` class from the `faststream.redis` module. It serves as a core component for integrating Redis as a message broker within the FastStream framework, enabling asynchronous message processing and communication.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/RedisBroker.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.redis.RedisBroker
  Description: Represents a message broker for Redis within the FastStream framework.
  Usage: Typically instantiated to connect to a Redis server and manage message queues.
```

----------------------------------------

TITLE: FastStream Confluent KafkaPublisher Class Reference
DESCRIPTION: Documents the `KafkaPublisher` class from the `faststream.confluent` module. This entry serves as a placeholder for the detailed API specification of the class, including its constructor, methods, and properties, which would typically follow this directive.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/KafkaPublisher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.KafkaPublisher
```

----------------------------------------

TITLE: FastStream Context Utility Class Reference
DESCRIPTION: References the `Context` class within the `faststream.utils` module, indicating its availability for API documentation generation or direct usage.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/utils/Context.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.utils.Context
```

----------------------------------------

TITLE: API Reference: FastStream Broker Logger
DESCRIPTION: Provides a direct reference to the `get_broker_logger` function within the `faststream.log.logging` module. This function is typically used for obtaining a logger instance specifically configured for FastStream broker operations, enabling detailed logging of message processing and system events.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/log/logging/get_broker_logger.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.log.logging.get_broker_logger
```

----------------------------------------

TITLE: FastStream RabbitMQ ReplyConfig Schema Reference
DESCRIPTION: Reference documentation for the `ReplyConfig` schema within `faststream.rabbit.schemas.reply`, likely defining configuration options for reply messages in RabbitMQ. Specific properties and methods are not detailed in the provided source.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/schemas/reply/ReplyConfig.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.rabbit.schemas.reply.ReplyConfig:
  # Further details on properties and methods are not provided in the source text.
```

----------------------------------------

TITLE: API Reference for faststream.confluent.config.Debug
DESCRIPTION: Provides a reference to the `faststream.confluent.config.Debug` class or module within the FastStream library, likely used for debugging configurations related to Confluent Kafka.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/config/Debug.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.config.Debug
```

----------------------------------------

TITLE: build_faststream_to_fastapi_parser
DESCRIPTION: API reference for the `build_faststream_to_fastapi_parser` function, used to create a parser for FastStream messages compatible with FastAPI.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_22

LANGUAGE: APIDOC
CODE:
```
build_faststream_to_fastapi_parser
```

----------------------------------------

TITLE: FastStream Redis Publisher API
DESCRIPTION: API documentation for message publishing components in FastStream Redis, including AsyncAPI publishers, producers, and use case specific publishers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_73

LANGUAGE: APIDOC
CODE:
```
asyncapi:
  AsyncAPIChannelPublisher (api/faststream/redis/publisher/asyncapi/AsyncAPIChannelPublisher.md)
  AsyncAPIListBatchPublisher (api/faststream/redis/publisher/asyncapi/AsyncAPIListBatchPublisher.md)
  AsyncAPIListPublisher (api/faststream/redis/publisher/asyncapi/AsyncAPIListPublisher.md)
  AsyncAPIPublisher (api/faststream/redis/publisher/asyncapi/AsyncAPIPublisher.md)
  AsyncAPIStreamPublisher (api/faststream/redis/publisher/asyncapi/AsyncAPIStreamPublisher.md)
producer:
  RedisFastProducer (api/faststream/redis/publisher/producer/RedisFastProducer.md)
usecase:
  ChannelPublisher (api/faststream/redis/publisher/usecase/ChannelPublisher.md)
  ListBatchPublisher (api/faststream/redis/publisher/usecase/ListBatchPublisher.md)
```

----------------------------------------

TITLE: API Reference for faststream.utils.NoCast
DESCRIPTION: Documents the `faststream.utils.NoCast` entity, which is likely a class or function within the FastStream library, used for preventing type casting. This entry serves as a placeholder for its detailed API specification.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/utils/NoCast.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.utils.NoCast
```

----------------------------------------

TITLE: FastStream SkipMessage Exception Class Reference
DESCRIPTION: Documents the `SkipMessage` exception class found in the `faststream.exceptions` module. This exception is typically used within FastStream applications to signal that a message should be ignored or skipped from further processing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/exceptions/SkipMessage.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.exceptions.SkipMessage
```

----------------------------------------

TITLE: FastStream Documentation Search and Navigation Configuration
DESCRIPTION: This snippet defines the navigation structure and search boosting settings for a FastStream project's documentation. It assigns weights to different sections like API, Release, and Contributing, influencing search relevance.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/prometheus/ConsumeAttrs.md#_snippet_0

LANGUAGE: YAML
CODE:
```
---
# 0.5 - API
# 2 - Release
# 3 - Contributing
# 5 - Template Page
# 10 - Default
search:
  boost: 0.5
---
```

----------------------------------------

TITLE: FastStream CLI `docs serve` Reload Option
DESCRIPTION: The `faststream docs serve` command now includes a `--reload` flag. This option enables hot-reloading of documentation changes, significantly improving the development workflow for documentation updates.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/release.md#_snippet_60

LANGUAGE: APIDOC
CODE:
```
faststream docs serve --reload
  description: Hotreload documentation changes
```

----------------------------------------

TITLE: FastStream OpenTelemetry Public API Components
DESCRIPTION: Details the public API components for FastStream's OpenTelemetry integration, focusing on middleware and settings for distributed tracing and metrics.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
OpenTelemetry Public API:
  Baggage
  TelemetryMiddleware
  TelemetrySettingsProvider
```

----------------------------------------

TITLE: FastStream Redis FastAPI Integration API
DESCRIPTION: API documentation for integrating FastStream Redis with FastAPI, including context management and router functionalities.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_68

LANGUAGE: APIDOC
CODE:
```
Context (api/faststream/redis/fastapi/Context.md)
RedisRouter (api/faststream/redis/fastapi/RedisRouter.md)
fastapi:
  RedisRouter (api/faststream/redis/fastapi/fastapi/RedisRouter.md)
```

----------------------------------------

TITLE: FastStream Project Contribution Guidelines
DESCRIPTION: Provides an overview of how to contribute to the FastStream project, including development and documentation guidelines.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_88

LANGUAGE: APIDOC
CODE:
```
Contributing:
  - Development
  - Documentation
```

----------------------------------------

TITLE: Reference AsyncConfluentParser API Class
DESCRIPTION: This entry points to the `AsyncConfluentParser` class within the `faststream.confluent.parser` module. It indicates that the documentation system should automatically generate API documentation for this specific class.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/parser/AsyncConfluentParser.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.parser.AsyncConfluentParser
```

----------------------------------------

TITLE: FastStream Kafka Telemetry Settings Provider API Reference
DESCRIPTION: API documentation for the `BaseKafkaTelemetrySettingsProvider` class, which is part of FastStream's Kafka OpenTelemetry integration. This class is responsible for providing telemetry settings.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/opentelemetry/provider/BaseKafkaTelemetrySettingsProvider.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.kafka.opentelemetry.provider.BaseKafkaTelemetrySettingsProvider:
```

----------------------------------------

TITLE: FastStream NATS API Components
DESCRIPTION: Outlines various classes and configurations for FastStream's NATS integration, covering brokers, streams, and testing tools.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_63

LANGUAGE: APIDOC
CODE:
```
AckPolicy
ConsumerConfig
DeliverPolicy
DiscardPolicy
ExternalStream
JStream
KvWatch
NatsBroker
NatsPublisher
NatsResponse
NatsRoute
NatsRouter
ObjWatch
Placement
PullSub
RePublish
ReplayPolicy
RetentionPolicy
StorageType
StreamConfig
StreamSource
TestApp
TestNatsBroker
broker:
  NatsBroker
  broker:
    - NatsBroker
  logging:
    - NatsLoggingBroker
  registrator:
    - NatsRegistrator
fastapi:
  - Context
  - NatsRouter
  fastapi:
    - NatsRouter
helpers:
  - KVBucketDeclarer
  - OSBucketDeclarer
  - StreamBuilder
```

----------------------------------------

TITLE: API Reference for FastStream Confluent DefaultPublisher
DESCRIPTION: Documents the `DefaultPublisher` class, which is part of the `faststream.confluent.publisher.usecase` module. This entry points to the auto-generated API documentation for this specific class, likely detailing its methods, properties, and usage for publishing messages via Confluent Kafka.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/publisher/usecase/DefaultPublisher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.publisher.usecase.DefaultPublisher
```

----------------------------------------

TITLE: FastStream AsyncAPI AMQP Protocol Bindings
DESCRIPTION: Specific AsyncAPI binding schemas tailored for the AMQP protocol, including channel, operation, and server bindings, along with AMQP-specific entities like Exchange and Queue.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_10

LANGUAGE: APIDOC
CODE:
```
ChannelBinding
Exchange
OperationBinding
Queue
ServerBinding
```

----------------------------------------

TITLE: API Reference for FastStream OperationForbiddenError
DESCRIPTION: Documents the `OperationForbiddenError` class within the `faststream.exceptions` module, indicating its availability for API reference. This entry points to the specific exception class that can be encountered in FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/exceptions/OperationForbiddenError.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.exceptions.OperationForbiddenError
```

----------------------------------------

TITLE: FastStream RabbitMQ QueueType API Reference
DESCRIPTION: API documentation for the `QueueType` element within the `faststream.rabbit` module. This likely refers to an enumeration or class defining various types of RabbitMQ queues or their configurations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/QueueType.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.rabbit.QueueType:
  Type: Class or Enumeration
  Module: faststream.rabbit
  Description: Defines types or configurations for RabbitMQ queues within the FastStream framework.
```

----------------------------------------

TITLE: FastStream Documentation Search Configuration
DESCRIPTION: Configuration settings for the documentation's search functionality, including navigation priorities and a search boost value.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/fastapi/get_dependant/get_fastapi_native_dependant.md#_snippet_0

LANGUAGE: YAML
CODE:
```
# 0.5 - API
# 2 - Release
# 3 - Contributing
# 5 - Template Page
# 10 - Default
search:
  boost: 0.5
```

----------------------------------------

TITLE: FastStream AsyncAPI TagDict API Documentation Directive
DESCRIPTION: This directive, likely used in a documentation generator like MkDocs with `mkdocstrings`, specifies that the API documentation for the `TagDict` class from `faststream.asyncapi.schema.utils` should be embedded at this location. The `TagDict` class is used for managing tags within AsyncAPI schemas.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/utils/TagDict.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
::: faststream.asyncapi.schema.utils.TagDict
```

----------------------------------------

TITLE: Documentation Search Boost Configuration
DESCRIPTION: YAML configuration snippet for adjusting search relevance, typically used in documentation generation tools to boost specific sections or terms.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/NatsBroker.md#_snippet_1

LANGUAGE: YAML
CODE:
```
search:
  boost: 0.5
```

----------------------------------------

TITLE: NameRequired
DESCRIPTION: API reference for the `NameRequired` schema/class, indicating a name is required in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_51

LANGUAGE: APIDOC
CODE:
```
NameRequired
```

----------------------------------------

TITLE: FastStream Hot Reload Run Output Example
DESCRIPTION: Example output illustrating the log messages when a FastStream application is run with hot reload, indicating the reloader process startup and successful application initialization.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/cli/index.md#_snippet_7

LANGUAGE: shell
CODE:
```
INFO     - Started reloader process [7902] using WatchFiles
INFO     - FastStream app starting...
INFO     - test |            - `Handle` waiting for messages
INFO     - FastStream app started successfully! To exit press CTRL+C
```

----------------------------------------

TITLE: FastStream RabbitMQ Security `parse_security` Function API Reference
DESCRIPTION: Detailed API documentation for the `parse_security` function, which is responsible for parsing security configurations within FastStream applications using RabbitMQ. It outlines the expected input parameters and the type of object returned.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/security/parse_security.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.rabbit.security.parse_security(
  security_config: dict
) -> faststream.rabbit.security.SecurityConfig

Parses a dictionary representing security configuration into a FastStream SecurityConfig object.

Parameters:
  security_config (dict): A dictionary containing security parameters (e.g., 'username', 'password', 'ssl_options').

Returns:
  faststream.rabbit.security.SecurityConfig: An object representing the parsed security configuration.

Raises:
  ValueError: If the provided security_config is invalid or missing required parameters.
```

----------------------------------------

TITLE: Check FastStream Version
DESCRIPTION: This command displays the currently installed version of FastStream. It is recommended to include this output when reporting a security vulnerability to provide context for the FastStream team.
SOURCE: https://github.com/ag2ai/faststream/blob/main/SECURITY.md#_snippet_0

LANGUAGE: bash
CODE:
```
faststream --version
```

----------------------------------------

TITLE: FastStream `find_ast_node` API Reference
DESCRIPTION: This entry provides the API documentation for the `find_ast_node` utility function located in `faststream.utils.ast`. It details its purpose, parameters, and return values for use in abstract syntax tree (AST) manipulation within FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/utils/ast/find_ast_node.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.utils.ast.find_ast_node(node: ast.AST, target_type: type | tuple[type, ...], recursive: bool = True) -> ast.AST | None

  Finds the first AST node of a specified type within a given AST subtree.

  Parameters:
    node (ast.AST): The starting AST node to search from.
    target_type (type | tuple[type, ...]): The type or a tuple of types of the AST node(s) to find.
    recursive (bool, optional): If True, searches recursively into child nodes. Defaults to True.

  Returns:
    ast.AST | None: The first matching AST node found, or None if no node of the target type is found.
```

----------------------------------------

TITLE: BaseExceptionMiddleware
DESCRIPTION: API reference for the `BaseExceptionMiddleware` class, serving as a base for exception handling middlewares in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_35

LANGUAGE: APIDOC
CODE:
```
BaseExceptionMiddleware
```

----------------------------------------

TITLE: FastStream Kafka AioKafkaParser Class API Reference
DESCRIPTION: Documents the `AioKafkaParser` class from the `faststream.kafka.parser` module. This class is likely responsible for parsing messages specifically for AioKafka, providing a structured interface for message handling within FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/parser/AioKafkaParser.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.kafka.parser.AioKafkaParser:
```

----------------------------------------

TITLE: API Reference for faststream.confluent.config.ClientDNSLookup
DESCRIPTION: Documents the `ClientDNSLookup` class, which is part of the `faststream.confluent.config` module. This entry serves as a placeholder for detailed API documentation, including its methods, properties, and usage examples, which would typically follow this directive in a full documentation system.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/config/ClientDNSLookup.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.config.ClientDNSLookup
```

----------------------------------------

TITLE: API Reference for faststream.nats.parser.BatchParser
DESCRIPTION: This entry points to the API documentation for the `faststream.nats.parser.BatchParser` class, which is part of the FastStream library's NATS integration. It typically details the class's constructor, methods, properties, and their usage for parsing NATS messages.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/parser/BatchParser.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.nats.parser.BatchParser:
  # This section would contain detailed API documentation for the BatchParser class.
  # Example structure:
  #   __init__(self, *args, **kwargs)
  #     Initializes the BatchParser instance.
  #     Parameters:
  #       *args: Variable length argument list.
  #       **kwargs: Arbitrary keyword arguments.
  #     Returns: None
  #
  #   parse_message(self, message: bytes) -> Any
  #     Parses a raw NATS message into a structured format.
  #     Parameters:
  #       message (bytes): The raw bytes of the NATS message to parse.
  #     Returns:
  #       Any: The parsed content of the message, type depends on implementation.
  #     Raises:
  #       ParsingError: If the message cannot be parsed successfully.
```

----------------------------------------

TITLE: FastStream NATS PatchedMessage Class API Reference
DESCRIPTION: This entry refers to the `PatchedMessage` class, a component of the `faststream.nats.testing` module. In documentation systems like MkDocs with `mkdocstrings`, this directive expands to show the class's full API, including its methods, attributes, and inheritance hierarchy.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/testing/PatchedMessage.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.nats.testing.PatchedMessage
```

----------------------------------------

TITLE: FastStream ContextRepo Class API Reference
DESCRIPTION: This snippet provides a direct reference to the `ContextRepo` class, indicating its full module path. It is typically used for auto-generating API documentation for this specific class, which likely manages application context or state within the FastStream framework.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/utils/context/repository/ContextRepo.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.utils.context.repository.ContextRepo
  Description: A reference to the ContextRepo class, typically used for managing application context within the FastStream framework.
```

----------------------------------------

TITLE: FastStream NATS LogicSubscriber Class API Reference
DESCRIPTION: API documentation for the `LogicSubscriber` class, located in the `faststream.nats.subscriber.usecase` module. This entry outlines the class structure as referenced in the documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/subscriber/usecase/LogicSubscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.nats.subscriber.usecase.LogicSubscriber
  Description: API reference for the LogicSubscriber class.
  Methods:
    (Methods not detailed in source)
  Properties:
    (Properties not detailed in source)
```

----------------------------------------

TITLE: FastStream NATS PushStreamSubscription API Reference
DESCRIPTION: References the `PushStreamSubscription` class within `faststream.nats.subscriber.usecase` for API documentation generation, indicating the target for detailed API specifications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/subscriber/usecase/PushStreamSubscription.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.nats.subscriber.usecase.PushStreamSubscription
```

----------------------------------------

TITLE: AsyncAPIListPublisher Class Reference
DESCRIPTION: Reference documentation for the `AsyncAPIListPublisher` class, used for publishing messages via AsyncAPI with Redis in FastStream.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/publisher/asyncapi/AsyncAPIListPublisher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.redis.publisher.asyncapi.AsyncAPIListPublisher
```

----------------------------------------

TITLE: NatsPublisher Class API Reference
DESCRIPTION: Defines the `NatsPublisher` class, which is responsible for handling message publishing operations within a FastStream application using NATS as the message broker. This class is typically used internally by FastStream routers to manage outgoing messages.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/router/NatsPublisher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.nats.router.NatsPublisher:
  # This class represents a publisher for NATS messages within FastStream.
  # Further details (methods, attributes) would be documented here if available.
```

----------------------------------------

TITLE: get_fastapi_dependant
DESCRIPTION: API reference for the `get_fastapi_dependant` function, likely used for FastAPI dependency injection integration within FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_16

LANGUAGE: APIDOC
CODE:
```
get_fastapi_dependant
```

----------------------------------------

TITLE: NatsTelemetryMiddleware Class Reference
DESCRIPTION: Provides the API definition for `faststream.nats.opentelemetry.NatsTelemetryMiddleware`, a middleware class used to automatically instrument NATS message handling with OpenTelemetry for distributed tracing and metrics collection.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/opentelemetry/NatsTelemetryMiddleware.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.nats.opentelemetry.NatsTelemetryMiddleware:
  """Middleware for OpenTelemetry integration with NATS in FastStream.

  This class typically instruments message consumption and publishing
  to generate OpenTelemetry spans and metrics.

  Attributes:
    tracer_provider (opentelemetry.trace.TracerProvider, optional):
      The OpenTelemetry TracerProvider to use. Defaults to the global provider.
    meter_provider (opentelemetry.metrics.MeterProvider, optional):
      The OpenTelemetry MeterProvider to use. Defaults to the global provider.

  Methods (inferred):
    __init__(self, tracer_provider=None, meter_provider=None):
      Initializes the middleware with optional OpenTelemetry providers.
    call_next(self, message, context):
      Processes the message and calls the next middleware in the chain,
      instrumenting the operation with OpenTelemetry.
  """
```

----------------------------------------

TITLE: PrometheusMiddleware Class Reference
DESCRIPTION: API documentation for the `PrometheusMiddleware` class within the `faststream.prometheus.middleware` module. This class likely provides middleware functionality for integrating Prometheus metrics with FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/prometheus/middleware/PrometheusMiddleware.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.prometheus.middleware.PrometheusMiddleware
  Description: A middleware class for integrating Prometheus metrics with FastStream applications.
```

----------------------------------------

TITLE: Upgrade pip in Virtual Environment
DESCRIPTION: Ensures the `pip` package installer is up-to-date within the activated virtual environment for reliable package management.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/contributing/CONTRIBUTING.md#_snippet_2

LANGUAGE: bash
CODE:
```
python -m pip install --upgrade pip
```

----------------------------------------

TITLE: FastStream AsyncAPI Redis Protocol Bindings
DESCRIPTION: Specific AsyncAPI binding schemas for the Redis protocol. (Note: No detailed components are listed in the provided input, indicating a placeholder or future expansion).
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_14

LANGUAGE: APIDOC
CODE:
```

```

----------------------------------------

TITLE: API Reference: faststream.utils.path.compile_path
DESCRIPTION: This entry refers to the `compile_path` function, a utility within the `faststream.utils.path` module. It serves as a placeholder for its full API documentation, which would typically include its signature, parameters, and return types.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/utils/path/compile_path.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.utils.path.compile_path
```

----------------------------------------

TITLE: FastStream NATS Registrator Class API Reference
DESCRIPTION: References the `NatsRegistrator` class from the `faststream.nats.broker.registrator` module, indicating it as an element for API documentation generation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/broker/registrator/NatsRegistrator.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.nats.broker.registrator.NatsRegistrator
```

----------------------------------------

TITLE: has_forbidden_types
DESCRIPTION: API reference for the `has_forbidden_types` function, likely used for type validation or checking forbidden types in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_18

LANGUAGE: APIDOC
CODE:
```
has_forbidden_types
```

----------------------------------------

TITLE: API Reference for faststream.nats.parser.JsParser
DESCRIPTION: Provides the API documentation for the `JsParser` class, which is likely responsible for parsing JavaScript-related data within NATS messages in the FastStream framework.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/parser/JsParser.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.nats.parser.JsParser
  Module: faststream.nats.parser
  Purpose: Represents a parser for NATS messages, likely handling JavaScript object serialization/deserialization.
```

----------------------------------------

TITLE: FastStream TestApp Class API Reference Directive
DESCRIPTION: A Sphinx/MkDocs directive used to automatically generate API documentation for the `TestApp` class, located in `faststream.testing.app`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/testing/app/TestApp.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.testing.app.TestApp
```

----------------------------------------

TITLE: make_fastapi_execution
DESCRIPTION: API reference for the `make_fastapi_execution` function, responsible for executing FastAPI-compatible operations within FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_23

LANGUAGE: APIDOC
CODE:
```
make_fastapi_execution
```

----------------------------------------

TITLE: RabbitExchange Class API Reference
DESCRIPTION: This entry documents the `RabbitExchange` class, which is part of the `faststream.rabbit.schemas.exchange` module in FastStream. It defines the properties and configuration for a RabbitMQ exchange, a core component in message routing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/schemas/exchange/RabbitExchange.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.rabbit.schemas.exchange.RabbitExchange:
  # This class defines the structure and properties of a RabbitMQ exchange.
  # Further details (e.g., properties like 'name', 'type', 'durable', 'auto_delete')
  # would typically be listed here if available in the source documentation.
```

----------------------------------------

TITLE: FastStream Kafka AsyncAPIPublisher Class Reference
DESCRIPTION: Reference for the `AsyncAPIPublisher` class within the `faststream.kafka.publisher.asyncapi` module, typically used for publishing messages with AsyncAPI specifications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/publisher/asyncapi/AsyncAPIPublisher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.kafka.publisher.asyncapi.AsyncAPIPublisher
```

----------------------------------------

TITLE: FastStream: `get_asgi_routes` Function Reference
DESCRIPTION: Documents the `get_asgi_routes` function located in the `faststream.asyncapi.generate` module. This function is typically used to extract or generate ASGI routes, which are essential for defining endpoints in an AsyncAPI specification.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/generate/get_asgi_routes.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asyncapi.generate.get_asgi_routes
```

----------------------------------------

TITLE: FastStream KafkaRoute API Reference
DESCRIPTION: Reference documentation for the `KafkaRoute` class within the `faststream.kafka` module, used for defining Kafka message routes.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/KafkaRoute.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.kafka.KafkaRoute
```

----------------------------------------

TITLE: API Reference for faststream.rabbit.schemas.queue.QuorumQueueSpecificArgs
DESCRIPTION: Documents the `QuorumQueueSpecificArgs` class, likely a schema or model, within the `faststream.rabbit.schemas.queue` module. This directive indicates that the class's definition, methods, and properties should be automatically included in the generated documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/schemas/queue/QuorumQueueSpecificArgs.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.rabbit.schemas.queue.QuorumQueueSpecificArgs
```

----------------------------------------

TITLE: FastStream Redis ListSub API Reference
DESCRIPTION: Provides a reference to the API documentation for the `ListSub` class within the `faststream.redis` module, typically used for Redis list-based subscriptions.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/ListSub.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.redis.ListSub
```

----------------------------------------

TITLE: API Reference for is_routing_exchange Utility
DESCRIPTION: Documents the `is_routing_exchange` utility function found in the `faststream.rabbit.utils` module. This function is part of the FastStream library and is used to identify routing exchanges within RabbitMQ configurations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/utils/is_routing_exchange.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.rabbit.utils.is_routing_exchange
```

----------------------------------------

TITLE: HandlerItem
DESCRIPTION: API reference for the `HandlerItem` class, representing an item for handler calls in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_52

LANGUAGE: APIDOC
CODE:
```
HandlerItem
```

----------------------------------------

TITLE: Sphinx Directive for RabbitRegistrator API Reference
DESCRIPTION: This snippet shows the Sphinx/MkDocs directive used to embed the API documentation for the `faststream.rabbit.broker.registrator.RabbitRegistrator` class. When processed by a documentation generator, this directive expands to include the class definition, its methods, parameters, and properties, based on the Python source code and docstrings.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/broker/registrator/RabbitRegistrator.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.rabbit.broker.registrator.RabbitRegistrator
```

----------------------------------------

TITLE: FastStream API Reference: mark_faststream_decorated
DESCRIPTION: This entry refers to the `mark_faststream_decorated` function or decorator within the `faststream.broker.fastapi.get_dependant` module. It is typically used in FastStream applications integrated with FastAPI to mark or identify specific dependencies, indicating its role in dependency management or introspection.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/fastapi/get_dependant/mark_faststream_decorated.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.broker.fastapi.get_dependant.mark_faststream_decorated
```

----------------------------------------

TITLE: ensure_response
DESCRIPTION: API reference for the `ensure_response` function, used to ensure a valid response object in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_47

LANGUAGE: APIDOC
CODE:
```
ensure_response
```

----------------------------------------

TITLE: FastStream API Module and Class Hierarchy
DESCRIPTION: This snippet outlines the module and class structure of the FastStream library, particularly focusing on `asyncapi` schema components and `broker` functionalities. It details various bindings (Redis, SQS), channel definitions, information objects (Contact, License), main schema components, message structures, operation definitions, security schemas, server configurations, and general utilities. It also includes core broker components like acknowledgement watchers and FastAPI integration elements.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_15

LANGUAGE: APIDOC
CODE:
```
asyncapi:
    schema:
        bindings:
            redis:
                ChannelBinding
                OperationBinding
                ServerBinding
            sqs:
                ChannelBinding
                OperationBinding
                ServerBinding
        channels:
            Channel
        info:
            Contact
            ContactDict
            EmailStr
            Info
            License
            LicenseDict
        main:
            Components
            Schema
        message:
            CorrelationId
            Message
        operations:
            Operation
        security:
            OauthFlowObj
            OauthFlows
            SecuritySchemaComponent
        servers:
            Server
            ServerVariable
        utils:
            ExternalDocs
            ExternalDocsDict
            Parameter
            Reference
            Tag
            TagDict
    site:
        get_asyncapi_html
        serve_app
    utils:
        resolve_payloads
        to_camelcase
broker:
    acknowledgement_watcher:
        BaseWatcher
        CounterWatcher
        EndlessWatcher
        OneTryWatcher
        WatcherContext
        get_watcher
    core:
        abc:
            ABCBroker
        logging:
            LoggingBroker
        usecase:
            BrokerUsecase
    fastapi:
        StreamMessage
        StreamRouter
        config:
            FastAPIConfig
        context:
            Context
        get_dependant
```

----------------------------------------

TITLE: FastStream RabbitMQ ExchangeType API Reference
DESCRIPTION: References the `ExchangeType` enumeration within the `faststream.rabbit` module, typically used for defining message exchange patterns in RabbitMQ consumers and producers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/ExchangeType.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
::: faststream.rabbit.ExchangeType
```

----------------------------------------

TITLE: FastStream RabbitMQ ReplyConfig Schema Definition
DESCRIPTION: Defines the structure and properties of the ReplyConfig schema, which is crucial for configuring how replies are handled in message exchanges within FastStream's RabbitMQ applications. This schema typically includes settings related to reply-to queues and correlation IDs.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/schemas/ReplyConfig.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.rabbit.schemas.ReplyConfig:
  """Configuration for handling replies in RabbitMQ messages."""
  # Properties and methods would be listed here if available in source documentation.
```

----------------------------------------

TITLE: FastStream Confluent OpenTelemetry Telemetry Attributes Provider Factory API Reference
DESCRIPTION: Documents the `telemetry_attributes_provider_factory` within the `faststream.confluent.opentelemetry.provider` module. This factory is likely responsible for generating or configuring OpenTelemetry attributes, specifically for Confluent Kafka integrations within a FastStream application. It plays a crucial role in observability by ensuring relevant metadata is attached to traces and metrics.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/opentelemetry/provider/telemetry_attributes_provider_factory.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.opentelemetry.provider.telemetry_attributes_provider_factory
```

----------------------------------------

TITLE: FastStream ASGI API: make_asyncapi_asgi Function Reference
DESCRIPTION: Documents the `make_asyncapi_asgi` function from the `faststream.asgi` module. This function is designed to create an ASGI application that serves AsyncAPI documentation, typically generated from a FastStream application, making it accessible via a web interface.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asgi/make_asyncapi_asgi.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asgi.make_asyncapi_asgi(
    app: faststream.FastStream,
    prefix: str = "/asyncapi",
    **kwargs
) -> ASGIApp

Parameters:
  app (faststream.FastStream): The FastStream application instance for which to generate AsyncAPI documentation.
  prefix (str, optional): The URL prefix where the AsyncAPI documentation will be served. Defaults to "/asyncapi".
  **kwargs: Additional keyword arguments to pass to the underlying ASGI application constructor.

Returns:
  ASGIApp: An ASGI application that serves the AsyncAPI documentation.

Description:
  This function takes a FastStream application and returns an ASGI application that can be mounted to serve the AsyncAPI specification generated from the FastStream application. It provides a convenient way to expose your message-driven API documentation.
```

----------------------------------------

TITLE: FastStream LogicSubscriber Class API Reference
DESCRIPTION: Reference to the `LogicSubscriber` class within the `faststream.confluent.subscriber.usecase` module, indicating its inclusion in the project's API documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/subscriber/usecase/LogicSubscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.subscriber.usecase.LogicSubscriber
```

----------------------------------------

TITLE: RedisPubSubParser Class API Reference
DESCRIPTION: Detailed API documentation for the `RedisPubSubParser` class found in the `faststream.redis.parser` module. This class is designed for parsing messages received from Redis PubSub channels.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/parser/RedisPubSubParser.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.redis.parser.RedisPubSubParser:
  # This class is responsible for parsing messages from Redis PubSub channels.
  # Methods and attributes for message parsing would be documented here, for example:
  #   __init__(self, ...)
  #     Initializes the parser.
  #   parse_message(self, message: bytes) -> Any
  #     Parses a raw Redis PubSub message into a usable format.
  #     message: The raw bytes of the message received from Redis.
  #     Returns: The parsed message content.
```

----------------------------------------

TITLE: AsyncAPIStreamSubscriber Class Reference
DESCRIPTION: Provides a reference for the `AsyncAPIStreamSubscriber` class, likely detailing its methods, properties, and usage within the `faststream.nats` module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/subscriber/asyncapi/AsyncAPIStreamSubscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.nats.subscriber.asyncapi.AsyncAPIStreamSubscriber
```

----------------------------------------

TITLE: API Reference for faststream.utils.nuid.NUID
DESCRIPTION: This snippet indicates the inclusion of API documentation for the `NUID` utility class, located within the `faststream.utils` module. `NUID` is typically used for generating unique, non-sequential identifiers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/utils/nuid/NUID.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.utils.nuid.NUID
```

----------------------------------------

TITLE: FastStream Broker Response Class Reference
DESCRIPTION: Reference to the `faststream.broker.response.Response` class, indicating its presence in the FastStream API documentation. This directive typically points to a detailed API specification.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/response/Response.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.broker.response.Response
```

----------------------------------------

TITLE: FastStream BaseRedisMetricsSettingsProvider API Reference
DESCRIPTION: API documentation for the `BaseRedisMetricsSettingsProvider` class, located in `faststream.redis.prometheus.provider`. This class is likely responsible for configuring Prometheus metrics related to Redis within FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/prometheus/provider/BaseRedisMetricsSettingsProvider.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.redis.prometheus.provider.BaseRedisMetricsSettingsProvider
```

----------------------------------------

TITLE: API Reference for faststream.testing.app.TestApp
DESCRIPTION: This entry points to the auto-generated API documentation for the `TestApp` class, located within the `faststream.testing.app` module. This class is typically used for testing FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/TestApp.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.testing.app.TestApp
```

----------------------------------------

TITLE: API Reference for faststream.security.SASLOAuthBearer
DESCRIPTION: References the `SASLOAuthBearer` class within the `faststream.security` module, typically used for SASL OAuth Bearer token authentication in FastStream applications. This directive is used by documentation generators to include the class's API documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/security/SASLOAuthBearer.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.security.SASLOAuthBearer
```

----------------------------------------

TITLE: FastStream Redis AsyncAPIStreamPublisher Class Reference
DESCRIPTION: This entry provides a reference to the `AsyncAPIStreamPublisher` class from the `faststream.redis.publisher.asyncapi` module. It is designed for publishing messages to Redis streams while adhering to the AsyncAPI specification.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/publisher/asyncapi/AsyncAPIStreamPublisher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.redis.publisher.asyncapi.AsyncAPIStreamPublisher
  Module: faststream.redis.publisher.asyncapi
  Purpose: This class is responsible for publishing messages to Redis streams, ensuring compliance with the AsyncAPI specification for defining asynchronous APIs.
```

----------------------------------------

TITLE: FastStream Redis SimpleParser Class API Reference
DESCRIPTION: API documentation for the `faststream.redis.parser.SimpleParser` class, which is designed for parsing messages within FastStream's Redis integration. This class likely handles the deserialization of incoming data from Redis streams or channels.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/parser/SimpleParser.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.redis.parser.SimpleParser
```

----------------------------------------

TITLE: TasksMixin
DESCRIPTION: API reference for the `TasksMixin` class, providing task management capabilities to subscribers in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_54

LANGUAGE: APIDOC
CODE:
```
TasksMixin
```

----------------------------------------

TITLE: AsyncAPIKeyValueWatchSubscriber Class Definition
DESCRIPTION: Defines the `AsyncAPIKeyValueWatchSubscriber` class, which is part of the FastStream library for NATS messaging. This class is intended for subscribing to and watching changes in NATS key-value stores, adhering to AsyncAPI standards.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/subscriber/asyncapi/AsyncAPIKeyValueWatchSubscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.nats.subscriber.asyncapi.AsyncAPIKeyValueWatchSubscriber:
```

----------------------------------------

TITLE: faststream.security.SASLScram256 Class API Reference
DESCRIPTION: Detailed API documentation for the `SASLScram256` class, which implements the SASL SCRAM-256 authentication mechanism in FastStream applications. This class is crucial for securing message brokers and ensuring data integrity.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/security/SASLScram256.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.security.SASLScram256
  Description: Implements the SASL SCRAM-256 authentication mechanism for FastStream applications.
  Purpose: Provides secure authentication by handling username and password hashing, salting, and iteration count for robust credential verification.
  Attributes:
    (None specified in input)
  Methods:
    (None specified in input)
```

----------------------------------------

TITLE: FastStream StreamRouter Class API Reference
DESCRIPTION: Provides a direct reference to the `StreamRouter` class, indicating its location within the `faststream.broker.fastapi` module. This class is typically used for integrating FastStream brokers with FastAPI applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/fastapi/StreamRouter.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.broker.fastapi.StreamRouter
```

----------------------------------------

TITLE: API Reference for faststream.utils.functions.return_input
DESCRIPTION: Documents the `return_input` function within the `faststream.utils.functions` module. This entry provides the signature and basic description for API documentation purposes.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/utils/functions/return_input.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.utils.functions.return_input(
    input: Any
) -> Any
  Description: A utility function that returns its input.
  Parameters:
    input (Any): The value to be returned.
  Returns:
    Any: The original input value.
```

----------------------------------------

TITLE: API Reference for faststream.confluent.client.check_msg_error
DESCRIPTION: This entry points to the documentation for the `check_msg_error` function, which is part of the `faststream.confluent.client` module. It is typically used for validating messages in a Confluent Kafka context.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/client/check_msg_error.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.client.check_msg_error
```

----------------------------------------

TITLE: mark_faststream_decorated
DESCRIPTION: API reference for the `mark_faststream_decorated` function, used to mark an element as decorated by FastStream in the broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_20

LANGUAGE: APIDOC
CODE:
```
mark_faststream_decorated
```

----------------------------------------

TITLE: is_faststream_decorated
DESCRIPTION: API reference for the `is_faststream_decorated` function, used to check if an element is decorated by FastStream in the broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_19

LANGUAGE: APIDOC
CODE:
```
is_faststream_decorated
```

----------------------------------------

TITLE: Faststream AST Utility Function Reference
DESCRIPTION: Documents the `get_withitem_calls` function from `faststream.utils.ast`, providing a direct reference to its API documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/utils/ast/get_withitem_calls.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.utils.ast.get_withitem_calls
```

----------------------------------------

TITLE: FastStream AMQP ServerBinding API Reference
DESCRIPTION: References the `ServerBinding` class within the `faststream.asyncapi.schema.bindings.amqp` module, indicating where its detailed API documentation can be found.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/bindings/amqp/ServerBinding.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
::: faststream.asyncapi.schema.bindings.amqp.ServerBinding
```

----------------------------------------

TITLE: FastStream Confluent LogicPublisher Class Reference
DESCRIPTION: References the `LogicPublisher` class from the `faststream.confluent.publisher.usecase` module. This directive is typically used in documentation generators (like Sphinx with autodoc) to automatically include the API documentation for the specified Python class.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/publisher/usecase/LogicPublisher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.confluent.publisher.usecase.LogicPublisher
```

----------------------------------------

TITLE: faststream.nats.JStream API Reference
DESCRIPTION: Reference documentation for the JStream class within the faststream.nats module, typically used for NATS JetStream interactions. This directive points to the auto-generated API documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/JStream.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.nats.JStream
```

----------------------------------------

TITLE: FastStream Confluent TopicPartition Class Reference
DESCRIPTION: Documents the `TopicPartition` class, a core component in `faststream.confluent` for managing Kafka topic partitions. This entry serves as a placeholder for detailed API specifications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/TopicPartition.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.confluent.TopicPartition
```

----------------------------------------

TITLE: FastStream Redis Prometheus Middleware Class Reference
DESCRIPTION: API documentation for the `RedisPrometheusMiddleware` class, typically used for integrating Prometheus metrics with Redis streams in FastStream applications. This entry points to the class's location for further API details.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/prometheus/middleware/RedisPrometheusMiddleware.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.redis.prometheus.middleware.RedisPrometheusMiddleware
  Purpose: Middleware for Prometheus metrics in FastStream Redis applications.
```

----------------------------------------

TITLE: API Reference for KafkaTelemetryMiddleware
DESCRIPTION: Provides a reference to the `KafkaTelemetryMiddleware` class, which is part of FastStream's Confluent Kafka integration with OpenTelemetry. This middleware is responsible for instrumenting Kafka operations for distributed tracing and metrics.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/opentelemetry/middleware/KafkaTelemetryMiddleware.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.opentelemetry.middleware.KafkaTelemetryMiddleware
```

----------------------------------------

TITLE: StreamMessage (fastapi/route)
DESCRIPTION: API reference for the `StreamMessage` class within FastStream's FastAPI route integration, representing a message stream.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_21

LANGUAGE: APIDOC
CODE:
```
StreamMessage
```

----------------------------------------

TITLE: FastStream RabbitMQ ChannelManager Class Reference
DESCRIPTION: Provides a reference to the `ChannelManager` class, a helper utility in FastStream designed for efficient management of connections and channels to RabbitMQ brokers. This class is crucial for handling underlying RabbitMQ communication resources.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/helpers/ChannelManager.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.rabbit.helpers.ChannelManager
```

----------------------------------------

TITLE: FastStream SQS Operation Binding Class Reference
DESCRIPTION: References the `OperationBinding` class, part of the `faststream.asyncapi.schema.bindings.sqs` module, which is typically used for defining SQS operation bindings within AsyncAPI specifications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/bindings/sqs/OperationBinding.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.asyncapi.schema.bindings.sqs.OperationBinding
```

----------------------------------------

TITLE: API Reference for faststream.cli.utils.imports.try_import_app
DESCRIPTION: Documents the `try_import_app` function from the `faststream.cli.utils.imports` module. This function is typically used to attempt importing a FastStream application dynamically. Detailed parameters and return types are usually generated from the source code by the documentation system.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/cli/utils/imports/try_import_app.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.cli.utils.imports.try_import_app
```

----------------------------------------

TITLE: API Documentation for faststream.exceptions.SetupError
DESCRIPTION: Documents the `SetupError` exception class within the `faststream.exceptions` module, typically raised during application setup failures. This entry points to the specific exception class for detailed API reference.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/exceptions/SetupError.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.exceptions.SetupError
```

----------------------------------------

TITLE: FastStream Kafka ConcurrentDefaultSubscriber API Reference
DESCRIPTION: Documents the `ConcurrentDefaultSubscriber` class from `faststream.kafka.subscriber.usecase`, typically used for concurrent message processing in Kafka applications. This directive points to the class's full API documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/subscriber/usecase/ConcurrentDefaultSubscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.kafka.subscriber.usecase.ConcurrentDefaultSubscriber
```

----------------------------------------

TITLE: FastStream Redis ChannelSubscriber Class API Reference
DESCRIPTION: Documents the `ChannelSubscriber` class from the `faststream.redis.subscriber.usecase` module, which is responsible for handling Redis channel subscriptions. This entry serves as a placeholder for its detailed API specification.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/subscriber/usecase/ChannelSubscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.redis.subscriber.usecase.ChannelSubscriber:
    # Detailed methods and properties would be listed here if provided in the source documentation.
```

----------------------------------------

TITLE: FastStream Confluent AsyncAPIPublisher Class Reference
DESCRIPTION: References the `AsyncAPIPublisher` class from `faststream.confluent.publisher.asyncapi`, a key component for generating AsyncAPI documentation in FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/publisher/asyncapi/AsyncAPIPublisher.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.publisher.asyncapi.AsyncAPIPublisher
```

----------------------------------------

TITLE: FastStream Confluent AsyncAPIBatchSubscriber API Reference
DESCRIPTION: Detailed API documentation for the `AsyncAPIBatchSubscriber` class within FastStream's Confluent integration, used for handling asynchronous API batch subscriptions.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/subscriber/asyncapi/AsyncAPIBatchSubscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.confluent.subscriber.asyncapi.AsyncAPIBatchSubscriber:
```

----------------------------------------

TITLE: FastStream Redis AsyncAPIStreamBatchSubscriber Class Reference
DESCRIPTION: Detailed API documentation for the `AsyncAPIStreamBatchSubscriber` class, which is responsible for managing asynchronous batch subscriptions to Redis streams. It includes methods for initialization, subscribing handlers, and controlling the subscriber lifecycle.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/subscriber/asyncapi/AsyncAPIStreamBatchSubscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.redis.subscriber.asyncapi.AsyncAPIStreamBatchSubscriber:
  Description: A class for handling asynchronous API stream batch subscriptions from Redis.
  Methods:
    __init__(self, stream_name: str, batch_size: int = 1, poll_interval: float = 1.0, **kwargs):
      Description: Initializes the batch subscriber.
      Parameters:
        stream_name (str): The name of the Redis stream to subscribe to.
        batch_size (int): The maximum number of messages to process in a single batch. Defaults to 1.
        poll_interval (float): The interval in seconds to poll for new messages. Defaults to 1.0.
        **kwargs: Additional keyword arguments for the base subscriber.
      Returns: None
    subscribe(self, handler: Callable[[List[Any]], Awaitable[None]]):
      Description: Registers a handler function to process batches of messages from the stream.
      Parameters:
        handler (Callable): An asynchronous callable that accepts a list of messages as input.
      Returns: None
    start(self):
      Description: Starts the subscriber, beginning to poll for messages.
      Returns: None
    stop(self):
      Description: Stops the subscriber, ceasing message polling.
      Returns: None
```

----------------------------------------

TITLE: API Reference: faststream.asyncapi.message.get_response_schema
DESCRIPTION: This entry references the `get_response_schema` element located within the `faststream.asyncapi.message` module. It is typically used to automatically generate or link to documentation for this specific API component, likely a function or method that retrieves a response schema.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/message/get_response_schema.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asyncapi.message.get_response_schema
```

----------------------------------------

TITLE: FastStream AsyncAPI Core Utilities and Abstract Base Classes
DESCRIPTION: Provides foundational utilities for AsyncAPI documentation generation, including HTML rendering, and defines abstract base classes for common AsyncAPI operations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
get_asyncapi_html

# Abstract Base Classes
AsyncAPIOperation
```

----------------------------------------

TITLE: FastStream NATS, OpenTelemetry, and Prometheus API Components
DESCRIPTION: Detailed listing of classes, functions, and modules within the FastStream NATS, OpenTelemetry, and Prometheus libraries, organized by their hierarchical structure.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_65

LANGUAGE: APIDOC
CODE:
```
Module: faststream.nats
  Submodule: security
    Function: parse_security
  Submodule: subscriber
    Submodule: asyncapi
      Class: AsyncAPIBatchPullStreamSubscriber
      Class: AsyncAPIConcurrentCoreSubscriber
      Class: AsyncAPIConcurrentPullStreamSubscriber
      Class: AsyncAPIConcurrentPushStreamSubscriber
      Class: AsyncAPICoreSubscriber
      Class: AsyncAPIKeyValueWatchSubscriber
      Class: AsyncAPIObjStoreWatchSubscriber
      Class: AsyncAPIPullStreamSubscriber
      Class: AsyncAPIStreamSubscriber
      Class: AsyncAPISubscriber
    Submodule: factory
      Function: create_subscriber
    Submodule: subscription
      Class: UnsubscribeAdapter
      Class: Unsubscriptable
      Class: Watchable
    Submodule: usecase
      Class: BatchPullStreamSubscriber
      Class: ConcurrentCoreSubscriber
      Class: ConcurrentPullStreamSubscriber
      Class: ConcurrentPushStreamSubscriber
      Class: CoreSubscriber
      Class: KeyValueWatchSubscriber
      Class: LogicSubscriber
      Class: ObjStoreWatchSubscriber
      Class: PullStreamSubscriber
      Class: PushStreamSubscription
  Submodule: testing
    Class: FakeProducer
    Class: PatchedMessage
    Class: TestNatsBroker
    Function: build_message
Module: faststream.opentelemetry
  Class: Baggage
  Class: TelemetryMiddleware
  Class: TelemetrySettingsProvider
  Submodule: baggage
    Class: Baggage
  Submodule: consts
    Class: MessageAction
  Submodule: middleware
    Class: BaseTelemetryMiddleware
    Class: TelemetryMiddleware
  Submodule: provider
    Class: TelemetrySettingsProvider
Module: faststream.prometheus
  Class: BasePrometheusMiddleware
  Class: ConsumeAttrs
  Class: MetricsSettingsProvider
  Submodule: container
    Class: MetricsContainer
  Submodule: manager
```

----------------------------------------

TITLE: FastStream ProducerProto Class API Reference
DESCRIPTION: This entry refers to the 'ProducerProto' class within the 'faststream.broker.publisher.proto' module, indicating its availability for detailed API documentation generation. It serves as a reference to a core component in the FastStream broker publisher protocol.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/publisher/proto/ProducerProto.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
faststream.broker.publisher.proto.ProducerProto
```

----------------------------------------

TITLE: FastStream CLI Main Entry Point API Reference
DESCRIPTION: This directive points to the main entry point of the FastStream command-line interface, typically used by documentation generators (like MkDocs with mkdocstrings) to automatically extract and display API documentation for the specified Python module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/cli/main/main.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.cli.main.main
```

----------------------------------------

TITLE: FastStream Utilities NoCast Module
DESCRIPTION: Describes the `NoCast` component within `faststream.utils.no_cast`.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_84

LANGUAGE: APIDOC
CODE:
```
faststream.utils.no_cast:
  - NoCast
```

----------------------------------------

TITLE: API Reference for faststream.asyncapi.schema.Channel
DESCRIPTION: This snippet references the `Channel` class within the `faststream.asyncapi.schema` module. It indicates a point where detailed API documentation for this specific AsyncAPI schema component would be generated or linked.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/Channel.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asyncapi.schema.Channel
```

----------------------------------------

TITLE: FastStream BasePublisherProto API Reference Directive
DESCRIPTION: This directive indicates that the API documentation for the `BasePublisherProto` class from the `faststream.broker.publisher.proto` module should be included at this point in the documentation. It serves as a placeholder for auto-generated API content.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/publisher/proto/BasePublisherProto.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
::: faststream.broker.publisher.proto.BasePublisherProto
```

----------------------------------------

TITLE: FastStream Search Boost Configuration
DESCRIPTION: A YAML configuration snippet defining the search boost value for the FastStream project's documentation. This setting influences the relevance of search results by assigning a weight to search hits.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/prometheus/provider/settings_provider_factory.md#_snippet_0

LANGUAGE: YAML
CODE:
```
search:
  boost: 0.5
```

----------------------------------------

TITLE: FastStream MkDocs Search Configuration
DESCRIPTION: This YAML configuration block defines search boosting parameters for the MkDocs documentation site. The `search.boost` parameter adjusts the relevance of search results, while the commented lines appear to be navigation or section identifiers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/utils/ExternalDocsDict.md#_snippet_0

LANGUAGE: YAML
CODE:
```
# 0.5 - API
# 2 - Release
# 3 - Contributing
# 5 - Template Page
# 10 - Default
search:
  boost: 0.5
```

----------------------------------------

TITLE: Configure FastStream Project Navigation and Search (YAML)
DESCRIPTION: This YAML configuration block defines the navigation order for documentation pages and sets a search boost value. The numbers indicate the order of appearance for 'API', 'Release', 'Contributing', 'Template Page', and 'Default' sections, while 'search.boost' adjusts the relevance of search results.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/client/BatchBuilder.md#_snippet_0

LANGUAGE: YAML
CODE:
```
---
# 0.5 - API
# 2 - Release
# 3 - Contributing
# 5 - Template Page
# 10 - Default
search:
  boost: 0.5
---
```

----------------------------------------

TITLE: FastStream Documentation Navigation and Search Configuration
DESCRIPTION: This YAML snippet defines the navigation structure for the FastStream project documentation, assigning weights to different sections like API, Release, and Contributing. It also configures the search functionality with a boost factor.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/rabbit/schemas/constants/ExchangeType.md#_snippet_0

LANGUAGE: YAML
CODE:
```
# 0.5 - API
# 2 - Release
# 3 - Contributing
# 5 - Template Page
# 10 - Default
search:
  boost: 0.5
```

----------------------------------------

TITLE: FastStream Project Navigation and Search Configuration
DESCRIPTION: Defines the documentation structure and search boosting for the FastStream project, listing key sections such as API, Release, Contributing, Template Page, and Default content.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/security/parse_security.md#_snippet_0

LANGUAGE: YAML
CODE:
```
# 0.5 - API
# 2 - Release
# 3 - Contributing
# 5 - Template Page
# 10 - Default
search:
  boost: 0.5
```

----------------------------------------

TITLE: FastStream Documentation Navigation and Search Configuration
DESCRIPTION: Defines the navigation structure and search boosting parameters for the FastStream project's documentation, typically used in a documentation generator like MkDocs.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/config/GroupProtocol.md#_snippet_0

LANGUAGE: YAML
CODE:
```
---
# 0.5 - API
# 2 - Release
# 3 - Contributing
# 5 - Template Page
# 10 - Default
search:
  boost: 0.5
---
```

----------------------------------------

TITLE: Response
DESCRIPTION: API reference for the `Response` class, representing a response object in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_46

LANGUAGE: APIDOC
CODE:
```
Response
```

----------------------------------------

TITLE: API Reference for faststream.confluent.response.KafkaResponse
DESCRIPTION: Documents the `KafkaResponse` class, part of the `faststream.confluent.response` module, likely used for handling responses in FastStream applications integrated with Confluent Kafka.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/response/KafkaResponse.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.response.KafkaResponse
```

----------------------------------------

TITLE: FastStream KafkaRouter Class API Reference
DESCRIPTION: Documents the `KafkaRouter` class from the `faststream.kafka.fastapi.fastapi` module, outlining its purpose and structure for building Kafka-enabled FastAPI applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/fastapi/fastapi/KafkaRouter.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.kafka.fastapi.fastapi.KafkaRouter:
```

----------------------------------------

TITLE: FastStream CounterWatcher Class API Reference
DESCRIPTION: API documentation reference for the `CounterWatcher` class, located within the `faststream.broker.acknowledgement_watcher` module. This directive indicates that detailed API information for this class should be generated or is available.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/acknowledgement_watcher/CounterWatcher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.broker.acknowledgement_watcher.CounterWatcher
```

----------------------------------------

TITLE: FastStream AsyncAPI ServerBinding Reference
DESCRIPTION: References the `ServerBinding` class within the `faststream.asyncapi.schema.bindings.main` module, likely representing server-specific binding information for AsyncAPI specifications in FastStream.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/bindings/main/ServerBinding.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asyncapi.schema.bindings.main.ServerBinding
```

----------------------------------------

TITLE: API Reference for faststream.utils.ContextRepo
DESCRIPTION: Documents the `ContextRepo` class within the `faststream.utils` module, likely used for managing context in FastStream applications. This entry points to its auto-generated documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/utils/ContextRepo.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.utils.ContextRepo
```

----------------------------------------

TITLE: FastStream ASGI GetHandler Class API Reference
DESCRIPTION: Documents the `GetHandler` class from the `faststream.asgi.handlers` module, which is likely responsible for processing HTTP GET requests in FastStream's ASGI applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asgi/handlers/GetHandler.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.asgi.handlers.GetHandler
  Purpose: Handles HTTP GET requests within FastStream ASGI applications.
```

----------------------------------------

TITLE: FastStream Broker Message Encoding Function Reference
DESCRIPTION: References the `encode_message` function within the `faststream.broker.message` module. This function is typically used for serializing messages before transmission in the FastStream broker system, ensuring proper data formatting for inter-service communication.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/message/encode_message.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.broker.message.encode_message
```

----------------------------------------

TITLE: FastStream Confluent Configuration Class Reference
DESCRIPTION: Documents the `ConfluentFastConfig` class within the `faststream.confluent.config` module, providing details on its attributes and methods for configuring Confluent Kafka integrations. This entry serves as a reference to the class for API documentation purposes.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/config/ConfluentFastConfig.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.config.ConfluentFastConfig
```

----------------------------------------

TITLE: API Reference for faststream.redis.message.BatchListMessage
DESCRIPTION: This entry refers to the API documentation for the `BatchListMessage` class, which is part of the `faststream.redis.message` module in the FastStream project. It is typically used to automatically generate documentation for the class's methods, properties, and usage.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/message/BatchListMessage.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.redis.message.BatchListMessage
```

----------------------------------------

TITLE: Faststream RedisListParser Class API Reference
DESCRIPTION: Detailed API documentation for the `RedisListParser` class, part of the `faststream.redis.parser` module. This class is typically used for parsing messages from Redis lists within the FastStream framework.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/parser/RedisListParser.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.redis.parser.RedisListParser
```

----------------------------------------

TITLE: FastStream RedisRegistrator Class API Reference
DESCRIPTION: Reference for the `RedisRegistrator` class, part of the `faststream.redis.broker.registrator` module, used for registering Redis-specific functionalities within FastStream.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/broker/registrator/RedisRegistrator.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.redis.broker.registrator.RedisRegistrator
```

----------------------------------------

TITLE: FastStream Redis AsyncAPIPublisher Class Reference
DESCRIPTION: This entry refers to the `AsyncAPIPublisher` class, a key component in the `faststream` library for defining and managing asynchronous API publishers using Redis. It is typically used for auto-generating documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/publisher/asyncapi/AsyncAPIPublisher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.redis.publisher.asyncapi.AsyncAPIPublisher
```

----------------------------------------

TITLE: FastStream AsyncAPI AMQP ChannelBinding Reference
DESCRIPTION: Reference to the `ChannelBinding` class, part of the FastStream library for defining AMQP channel bindings in AsyncAPI schemas. This entry points to the documentation for this specific API component.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/bindings/amqp/ChannelBinding.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asyncapi.schema.bindings.amqp.ChannelBinding
```

----------------------------------------

TITLE: FastStream Confluent Prometheus Metrics Provider Reference
DESCRIPTION: References the `BaseConfluentMetricsSettingsProvider` class, used by documentation generators to include its API definition. This class is part of the FastStream Confluent integration for Prometheus metrics.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/prometheus/provider/BaseConfluentMetricsSettingsProvider.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.prometheus.provider.BaseConfluentMetricsSettingsProvider
```

----------------------------------------

TITLE: API Reference for faststream.kafka.security.parse_security
DESCRIPTION: Documents the `parse_security` object within the `faststream.kafka.security` module. This entry serves as a placeholder for detailed API documentation, which would typically include parameters, return types, and usage examples.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/security/parse_security.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.kafka.security.parse_security:
  Type: Function/Module
  Description: Detailed API documentation for this object would appear here, including parameters, return types, and usage examples.
```

----------------------------------------

TITLE: FastStream NATS JStream Schema Reference
DESCRIPTION: Documents the `JStream` schema, a core component for configuring JetStream streams within the FastStream NATS library. This entry points to the schema's definition.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/schemas/JStream.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.nats.schemas.JStream
```

----------------------------------------

TITLE: FastStream NATS CoreSubscriber Class Definition
DESCRIPTION: Defines the `CoreSubscriber` class, which is a key component for managing message subscriptions in FastStream applications using NATS. This class is typically used internally by FastStream to abstract NATS subscription logic.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/subscriber/usecase/CoreSubscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.nats.subscriber.usecase.CoreSubscriber
```

----------------------------------------

TITLE: FastStream NATS LogicPublisher Class Reference
DESCRIPTION: Documents the `LogicPublisher` class, a key component in FastStream's NATS integration for defining and managing message publishing logic.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/publisher/usecase/LogicPublisher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.nats.publisher.usecase.LogicPublisher
```

----------------------------------------

TITLE: FastStream Project Navigation and Search Configuration
DESCRIPTION: This snippet defines the navigation structure and search boosting parameters for the FastStream project documentation. It assigns boost values to different sections like API, Release, and Contributing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/TagDict.md#_snippet_0

LANGUAGE: YAML
CODE:
```
# 0.5 - API
# 2 - Release
# 3 - Contributing
# 5 - Template Page
# 10 - Default
search:
  boost: 0.5
```

----------------------------------------

TITLE: FastStream Documentation Sections and Search Boost Configuration
DESCRIPTION: This snippet defines the main sections of the FastStream project documentation and configures the search boost parameter, which influences search result relevance in search functionality.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/broker/publisher/proto/ProducerProto.md#_snippet_0

LANGUAGE: YAML
CODE:
```
# 0.5 - API
# 2 - Release
# 3 - Contributing
# 5 - Template Page
# 10 - Default
search:
  boost: 0.5
```

----------------------------------------

TITLE: Configure Project Search Boost (YAML)
DESCRIPTION: This snippet defines project-level metadata and search boosting parameters. It sets a boost value of 0.5 for search results, influencing their relevance. This configuration is typically used in documentation generation tools.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/publisher/producer/RedisFastProducer.md#_snippet_0

LANGUAGE: YAML
CODE:
```
---
# 0.5 - API
# 2 - Release
# 3 - Contributing
# 5 - Template Page
# 10 - Default
search:
  boost: 0.5
---
```

----------------------------------------

TITLE: FastStream Documentation Navigation and Search Configuration
DESCRIPTION: This YAML-like configuration defines the structure of the FastStream project's documentation, mapping section titles to their respective IDs and setting a search boost value. It helps organize the content for navigation and search indexing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/subscriber/usecase/BatchListSubscriber.md#_snippet_0

LANGUAGE: YAML
CODE:
```
---
# 0.5 - API
# 2 - Release
# 3 - Contributing
# 5 - Template Page
# 10 - Default
search:
  boost: 0.5
---
```

----------------------------------------

TITLE: FastStream RabbitMQ and Prometheus API Component Reference
DESCRIPTION: A comprehensive list of API components, classes, and modules within the FastStream library, including their respective file paths. This section covers core RabbitMQ functionalities, Prometheus metrics, and related utilities.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_90

LANGUAGE: APIDOC
CODE:
```
MetricsManager (Path: api/faststream/prometheus/manager/MetricsManager.md)
```

LANGUAGE: APIDOC
CODE:
```
BasePrometheusMiddleware (Path: api/faststream/prometheus/middleware/BasePrometheusMiddleware.md)
```

LANGUAGE: APIDOC
CODE:
```
PrometheusMiddleware (Path: api/faststream/prometheus/middleware/PrometheusMiddleware.md)
```

LANGUAGE: APIDOC
CODE:
```
MetricsSettingsProvider (Path: api/faststream/prometheus/provider/MetricsSettingsProvider.md)
```

LANGUAGE: APIDOC
CODE:
```
ConsumeAttrs (Path: api/faststream/prometheus/types/ConsumeAttrs.md)
```

LANGUAGE: APIDOC
CODE:
```
ProcessingStatus (Path: api/faststream/prometheus/types/ProcessingStatus.md)
```

LANGUAGE: APIDOC
CODE:
```
PublishingStatus (Path: api/faststream/prometheus/types/PublishingStatus.md)
```

LANGUAGE: APIDOC
CODE:
```
Channel (Path: api/faststream/rabbit/Channel.md)
```

LANGUAGE: APIDOC
CODE:
```
ExchangeType (Path: api/faststream/rabbit/ExchangeType.md)
```

LANGUAGE: APIDOC
CODE:
```
QueueType (Path: api/faststream/rabbit/QueueType.md)
```

LANGUAGE: APIDOC
CODE:
```
RabbitBroker (Path: api/faststream/rabbit/RabbitBroker.md)
```

LANGUAGE: APIDOC
CODE:
```
RabbitExchange (Path: api/faststream/rabbit/RabbitExchange.md)
```

LANGUAGE: APIDOC
CODE:
```
RabbitPublisher (Path: api/faststream/rabbit/RabbitPublisher.md)
```

LANGUAGE: APIDOC
CODE:
```
RabbitQueue (Path: api/faststream/rabbit/RabbitQueue.md)
```

LANGUAGE: APIDOC
CODE:
```
RabbitResponse (Path: api/faststream/rabbit/RabbitResponse.md)
```

LANGUAGE: APIDOC
CODE:
```
RabbitRoute (Path: api/faststream/rabbit/RabbitRoute.md)
```

LANGUAGE: APIDOC
CODE:
```
RabbitRouter (Path: api/faststream/rabbit/RabbitRouter.md)
```

LANGUAGE: APIDOC
CODE:
```
ReplyConfig (Path: api/faststream/rabbit/ReplyConfig.md)
```

LANGUAGE: APIDOC
CODE:
```
TestApp (Path: api/faststream/rabbit/TestApp.md)
```

LANGUAGE: APIDOC
CODE:
```
TestRabbitBroker (Path: api/faststream/rabbit/TestRabbitBroker.md)
```

LANGUAGE: APIDOC
CODE:
```
RabbitBroker (Path: api/faststream/rabbit/broker/RabbitBroker.md)
```

LANGUAGE: APIDOC
CODE:
```
RabbitBroker (Path: api/faststream/rabbit/broker/broker/RabbitBroker.md)
```

LANGUAGE: APIDOC
CODE:
```
RabbitLoggingBroker (Path: api/faststream/rabbit/broker/logging/RabbitLoggingBroker.md)
```

LANGUAGE: APIDOC
CODE:
```
RabbitRegistrator (Path: api/faststream/rabbit/broker/registrator/RabbitRegistrator.md)
```

LANGUAGE: APIDOC
CODE:
```
Context (Path: api/faststream/rabbit/fastapi/Context.md)
```

LANGUAGE: APIDOC
CODE:
```
RabbitRouter (Path: api/faststream/rabbit/fastapi/RabbitRouter.md)
```

LANGUAGE: APIDOC
CODE:
```
RabbitRouter (Path: api/faststream/rabbit/fastapi/router/RabbitRouter.md)
```

LANGUAGE: APIDOC
CODE:
```
ChannelManager (Path: api/faststream/rabbit/helpers/ChannelManager.md)
```

LANGUAGE: APIDOC
CODE:
```
RabbitDeclarer (Path: api/faststream/rabbit/helpers/RabbitDeclarer.md)
```

LANGUAGE: APIDOC
CODE:
```
ChannelManager (Path: api/faststream/rabbit/helpers/channel_manager/ChannelManager.md)
```

LANGUAGE: APIDOC
CODE:
```
RabbitDeclarer (Path: api/faststream/rabbit/helpers/declarer/RabbitDeclarer.md)
```

LANGUAGE: APIDOC
CODE:
```
RabbitMessage (Path: api/faststream/rabbit/message/RabbitMessage.md)
```

LANGUAGE: APIDOC
CODE:
```
RabbitTelemetryMiddleware (Path: api/faststream/rabbit/opentelemetry/RabbitTelemetryMiddleware.md)
```

LANGUAGE: APIDOC
CODE:
```
RabbitTelemetryMiddleware (Path: api/faststream/rabbit/opentelemetry/middleware/RabbitTelemetryMiddleware.md)
```

LANGUAGE: APIDOC
CODE:
```
RabbitTelemetrySettingsProvider (Path: api/faststream/rabbit/opentelemetry/provider/RabbitTelemetrySettingsProvider.md)
```

LANGUAGE: APIDOC
CODE:
```
AioPikaParser (Path: api/faststream/rabbit/parser/AioPikaParser.md)
```

LANGUAGE: APIDOC
CODE:
```
RabbitPrometheusMiddleware (Path: api/faststream/rabbit/prometheus/RabbitPrometheusMiddleware.md)
```

LANGUAGE: APIDOC
CODE:
```
RabbitPrometheusMiddleware (Path: api/faststream/rabbit/prometheus/middleware/RabbitPrometheusMiddleware.md)
```

LANGUAGE: APIDOC
CODE:
```
RabbitMetricsSettingsProvider (Path: api/faststream/rabbit/prometheus/provider/RabbitMetricsSettingsProvider.md)
```

LANGUAGE: APIDOC
CODE:
```
AsyncAPIPublisher (Path: api/faststream/rabbit/publisher/asyncapi/AsyncAPIPublisher.md)
```

LANGUAGE: APIDOC
CODE:
```
AioPikaFastProducer (Path: api/faststream/rabbit/publisher/producer/AioPikaFastProducer.md)
```

LANGUAGE: APIDOC
CODE:
```
LogicPublisher (Path: api/faststream/rabbit/publisher/usecase/LogicPublisher.md)
```

LANGUAGE: APIDOC
CODE:
```
PublishKwargs (Path: api/faststream/rabbit/publisher/usecase/PublishKwargs.md)
```

LANGUAGE: APIDOC
CODE:
```
RequestPublishKwargs (Path: api/faststream/rabbit/publisher/usecase/RequestPublishKwargs.md)
```

LANGUAGE: APIDOC
CODE:
```
RabbitResponse (Path: api/faststream/rabbit/response/RabbitResponse.md)
```

----------------------------------------

TITLE: FastStream OpenTelemetry Baggage Class Reference
DESCRIPTION: Provides a reference to the `Baggage` class, a core component for managing OpenTelemetry baggage context within FastStream applications. This entry identifies the class by its full path.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/opentelemetry/baggage/Baggage.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.opentelemetry.baggage.Baggage
  Purpose: Manages OpenTelemetry baggage context.
```

----------------------------------------

TITLE: FastStream NATS Broker Class Reference
DESCRIPTION: References the `NatsBroker` class within the `faststream.nats.broker` module, typically used for auto-generating API documentation for NATS message brokering functionalities in FastStream.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/broker/NatsBroker.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.nats.broker.NatsBroker
```

----------------------------------------

TITLE: NATS KVBucketDeclarer API Reference
DESCRIPTION: Reference to the `KVBucketDeclarer` helper class in `faststream.nats.helpers`, which is used for declaring and managing NATS Key-Value buckets within FastStream applications.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/helpers/KVBucketDeclarer.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.nats.helpers.KVBucketDeclarer
```

----------------------------------------

TITLE: SubscriberUsecase
DESCRIPTION: API reference for the `SubscriberUsecase` class, representing a use case for subscribing to messages in FastStream's broker module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_56

LANGUAGE: APIDOC
CODE:
```
SubscriberUsecase
```

----------------------------------------

TITLE: API Reference: BatchConfluentTelemetrySettingsProvider
DESCRIPTION: References the `BatchConfluentTelemetrySettingsProvider` class, typically used for configuring OpenTelemetry settings within FastStream's Confluent integration. This entry points to the class's API documentation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/opentelemetry/provider/BatchConfluentTelemetrySettingsProvider.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.opentelemetry.provider.BatchConfluentTelemetrySettingsProvider
```

----------------------------------------

TITLE: API Reference for faststream.utils.functions.timeout_scope
DESCRIPTION: Documents the `timeout_scope` utility, which is likely used for managing execution timeouts within FastStream applications. This entry serves as a direct reference to the API element.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/utils/functions/timeout_scope.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.utils.functions.timeout_scope
```

----------------------------------------

TITLE: API Reference: faststream.asyncapi.site.get_asyncapi_html
DESCRIPTION: Documents the `get_asyncapi_html` function within the `faststream.asyncapi.site` module. This function is likely responsible for generating AsyncAPI documentation in HTML format.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/site/get_asyncapi_html.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asyncapi.site.get_asyncapi_html
```

----------------------------------------

TITLE: FastStream AsyncAPI Message Class Reference
DESCRIPTION: References the `Message` class within the `faststream.asyncapi.schema` module, typically used for defining message structures in AsyncAPI specifications. This directive is used by documentation tools to generate detailed API documentation for the class.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/Message.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.asyncapi.schema.Message
```

----------------------------------------

TITLE: NatsMetricsSettingsProvider Class API Reference
DESCRIPTION: Provides API documentation for the `NatsMetricsSettingsProvider` class within the `faststream.nats.prometheus.provider` module. This class likely manages settings related to Prometheus metrics for NATS streams in a FastStream application.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/prometheus/provider/NatsMetricsSettingsProvider.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.nats.prometheus.provider.NatsMetricsSettingsProvider
  Description: Manages settings for Prometheus metrics in NATS streams.
```

----------------------------------------

TITLE: AsyncAPIDefaultPublisher Class Reference
DESCRIPTION: Reference to the `AsyncAPIDefaultPublisher` class, likely part of the FastStream Confluent publisher module for AsyncAPI integration.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/confluent/publisher/asyncapi/AsyncAPIDefaultPublisher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.confluent.publisher.asyncapi.AsyncAPIDefaultPublisher
```

----------------------------------------

TITLE: FastStream Prometheus ProcessingStatus Type Reference
DESCRIPTION: Documents the `ProcessingStatus` type from the `faststream.prometheus.types` module, likely an enumeration or class defining states for Prometheus metric processing within FastStream. This directive is used to generate API documentation for the specified type.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/prometheus/types/ProcessingStatus.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.prometheus.types.ProcessingStatus
```

----------------------------------------

TITLE: API Reference for faststream.nats.parser.NatsBaseParser
DESCRIPTION: This entry points to the documentation for the `NatsBaseParser` class. It serves as a placeholder for detailed API specifications including methods, parameters, and return types for NATS message parsing.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/parser/NatsBaseParser.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.nats.parser.NatsBaseParser
```

----------------------------------------

TITLE: FastStream NATS AsyncAPIPublisher Class Reference
DESCRIPTION: Reference to the `AsyncAPIPublisher` class within the `faststream.nats.publisher.asyncapi` module, typically used for generating AsyncAPI documentation for NATS publishers.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/publisher/asyncapi/AsyncAPIPublisher.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.nats.publisher.asyncapi.AsyncAPIPublisher
```

----------------------------------------

TITLE: Activate Python Virtual Environment
DESCRIPTION: Activates the created virtual environment, making its Python interpreter and installed packages accessible for the current shell session.
SOURCE: https://github.com/ag2ai/faststream/blob/main/CONTRIBUTING.md#_snippet_1

LANGUAGE: bash
CODE:
```
source ./venv/bin/activate
```

----------------------------------------

TITLE: Create Python Virtual Environment with venv
DESCRIPTION: Instructions to create an isolated Python environment using the `venv` module, resulting in a `./venv/` directory for project-specific packages.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/getting-started/contributing/CONTRIBUTING.md#_snippet_0

LANGUAGE: bash
CODE:
```
python -m venv venv
```

----------------------------------------

TITLE: FastStream Documentation Search and Navigation Configuration
DESCRIPTION: This snippet defines the search boosting values for various documentation sections and lists the primary navigation entries within the FastStream project documentation, typically used in MkDocs or similar static site generators.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/generate/get_broker_server.md#_snippet_0

LANGUAGE: YAML
CODE:
```
# 0.5 - API
# 2 - Release
# 3 - Contributing
# 5 - Template Page
# 10 - Default
search:
  boost: 0.5
```

----------------------------------------

TITLE: Configure Search Boost and Navigation Priorities
DESCRIPTION: This configuration block defines navigation priorities for different sections of a documentation site and sets a search boost value. It helps in organizing content and influencing search relevance.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/Context.md#_snippet_0

LANGUAGE: YAML
CODE:
```
# 0.5 - API
# 2 - Release
# 3 - Contributing
# 5 - Template Page
# 10 - Default
search:
  boost: 0.5
```

----------------------------------------

TITLE: FastStream Project Navigation and Search Configuration
DESCRIPTION: Defines the navigation structure and search boosting parameters for the FastStream project documentation. The `search.boost` setting adjusts the relevance of search results.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/bindings/amqp/ServerBinding.md#_snippet_0

LANGUAGE: YAML
CODE:
```
# 0.5 - API
# 2 - Release
# 3 - Contributing
# 5 - Template Page
# 10 - Default
search:
  boost: 0.5
```

----------------------------------------

TITLE: FastStream Redis Telemetry Middleware API Reference Directive
DESCRIPTION: A Sphinx or MkDocs directive used to automatically include and display the API documentation for the 'RedisTelemetryMiddleware' class, which is part of the 'faststream.redis.opentelemetry' module.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/redis/opentelemetry/RedisTelemetryMiddleware.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
::: faststream.redis.opentelemetry.RedisTelemetryMiddleware
```

----------------------------------------

TITLE: FastStream NATS Broker API Reference Directive
DESCRIPTION: A directive used in documentation systems (like MkDocs) to reference and automatically generate documentation for the `faststream.nats.NatsBroker` class.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/NatsBroker.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.nats.NatsBroker
```

----------------------------------------

TITLE: FastStream API Reference Directive for expand_log_field
DESCRIPTION: This snippet represents a documentation directive used to include the API documentation for `faststream.log.formatter.expand_log_field`. It instructs a documentation generator (like Sphinx or MkDocs) to render the detailed API specification for this Python object at this location.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/log/formatter/expand_log_field.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.log.formatter.expand_log_field
```

----------------------------------------

TITLE: FastStream KafkaBroker Class API Reference Directive
DESCRIPTION: This snippet represents the directive used in documentation systems (like Sphinx or MkDocs) to automatically generate API documentation for the `faststream.kafka.KafkaBroker` class. It instructs the documentation builder to include the detailed API reference for this specific class.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/KafkaBroker.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.kafka.KafkaBroker
```

----------------------------------------

TITLE: API Reference Directive for LogicSubscriber
DESCRIPTION: This directive points to the `LogicSubscriber` class, indicating that its API documentation should be generated and included at this location. It's commonly used in documentation systems like Sphinx to automatically pull in docstrings and signatures from Python code.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/kafka/subscriber/usecase/LogicSubscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.kafka.subscriber.usecase.LogicSubscriber
```

----------------------------------------

TITLE: FastStream AsyncAPI ContactDict API Reference Directive
DESCRIPTION: This `mkdocstrings` directive instructs the documentation generator to automatically embed the API documentation for the `ContactDict` class, located within the `faststream.asyncapi.schema.info` module. It's used to dynamically include detailed class information, methods, and attributes.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/asyncapi/schema/info/ContactDict.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
::: faststream.asyncapi.schema.info.ContactDict
```

----------------------------------------

TITLE: FastStream NATS Public API Components
DESCRIPTION: Lists the public API components available for FastStream's NATS integration, including stream configuration, testing utilities, and subscription types.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/SUMMARY.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
NATS Public API:
  PullSub
  RePublish
  ReplayPolicy
  RetentionPolicy
  StorageType
  StreamConfig
  StreamSource
  TestApp
  TestNatsBroker
```

----------------------------------------

TITLE: API Reference for faststream.utils.context.builders.Header
DESCRIPTION: This entry points to the API documentation for the `Header` class or object located in the `faststream.utils.context.builders` module, indicating its availability for detailed reference.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/utils/context/builders/Header.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.utils.context.builders.Header
```

----------------------------------------

TITLE: FastStream NATS KeyValueWatchSubscriber API Reference
DESCRIPTION: This entry refers to the `KeyValueWatchSubscriber` class, located in the `faststream.nats.subscriber.usecase` module, which is part of the FastStream library for NATS Key-Value store watch operations.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/subscriber/usecase/KeyValueWatchSubscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.nats.subscriber.usecase.KeyValueWatchSubscriber
```

----------------------------------------

TITLE: FastStream NATS AsyncAPI Batch Pull Stream Subscriber API Reference
DESCRIPTION: Documents the `AsyncAPIBatchPullStreamSubscriber` class within the FastStream NATS module, detailing its purpose for asynchronous message processing with batching and pull semantics, as referenced by the documentation directive.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/subscriber/asyncapi/AsyncAPIBatchPullStreamSubscriber.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.nats.subscriber.asyncapi.AsyncAPIBatchPullStreamSubscriber
```

----------------------------------------

TITLE: FastStream NATS PullSub Schema Reference
DESCRIPTION: Reference for the `PullSub` schema within `faststream.nats.schemas`, used to define parameters for NATS pull subscriptions. This entry indicates the presence of the schema without detailing its internal fields, as they were not provided in the source.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/schemas/PullSub.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: faststream.nats.schemas.PullSub
  Description: Schema for NATS pull subscriptions.
```

----------------------------------------

TITLE: FastStream NATS KvWatch API Reference
DESCRIPTION: This entry provides a reference to the `KvWatch` schema within the `faststream.nats` module, indicating its availability for API documentation generation.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/schemas/kv_watch/KvWatch.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
::: faststream.nats.schemas.kv_watch.KvWatch
```

----------------------------------------

TITLE: BatchNatsMetricsSettingsProvider Class Definition
DESCRIPTION: Defines the `BatchNatsMetricsSettingsProvider` class, a component within the `faststream.nats.prometheus.provider` module, typically used for NATS metrics settings.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/prometheus/provider/BatchNatsMetricsSettingsProvider.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class faststream.nats.prometheus.provider.BatchNatsMetricsSettingsProvider:
```

----------------------------------------

TITLE: NatsPrometheusMiddleware Class API Reference
DESCRIPTION: Provides the API reference for the `faststream.nats.prometheus.NatsPrometheusMiddleware` class. This class is typically used to expose Prometheus metrics from a FastStream application interacting with NATS.
SOURCE: https://github.com/ag2ai/faststream/blob/main/docs/docs/en/api/faststream/nats/prometheus/NatsPrometheusMiddleware.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
faststream.nats.prometheus.NatsPrometheusMiddleware
```